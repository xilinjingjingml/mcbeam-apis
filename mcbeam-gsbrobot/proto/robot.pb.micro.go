// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/robot.proto

package robot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RobotRpc service

func NewRobotRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RobotRpc service

type RobotRpcService interface {
	// 通知机器人入桌
	NotifyJoinRoom(ctx context.Context, in *NotifyJoinRoomReq, opts ...client.CallOption) (*NotifyJoinRoomRsp, error)
	// 通知机器人加入比赛
	NotifyJoinMatch(ctx context.Context, in *NotifyJoinMatchReq, opts ...client.CallOption) (*NotifyJoinMatchRsp, error)
}

type robotRpcService struct {
	c    client.Client
	name string
}

func NewRobotRpcService(name string, c client.Client) RobotRpcService {
	return &robotRpcService{
		c:    c,
		name: name,
	}
}

func (c *robotRpcService) NotifyJoinRoom(ctx context.Context, in *NotifyJoinRoomReq, opts ...client.CallOption) (*NotifyJoinRoomRsp, error) {
	req := c.c.NewRequest(c.name, "RobotRpc.NotifyJoinRoom", in)
	out := new(NotifyJoinRoomRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotRpcService) NotifyJoinMatch(ctx context.Context, in *NotifyJoinMatchReq, opts ...client.CallOption) (*NotifyJoinMatchRsp, error) {
	req := c.c.NewRequest(c.name, "RobotRpc.NotifyJoinMatch", in)
	out := new(NotifyJoinMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RobotRpc service

type RobotRpcHandler interface {
	// 通知机器人入桌
	NotifyJoinRoom(context.Context, *NotifyJoinRoomReq, *NotifyJoinRoomRsp) error
	// 通知机器人加入比赛
	NotifyJoinMatch(context.Context, *NotifyJoinMatchReq, *NotifyJoinMatchRsp) error
}

func RegisterRobotRpcHandler(s server.Server, hdlr RobotRpcHandler, opts ...server.HandlerOption) error {
	type robotRpc interface {
		NotifyJoinRoom(ctx context.Context, in *NotifyJoinRoomReq, out *NotifyJoinRoomRsp) error
		NotifyJoinMatch(ctx context.Context, in *NotifyJoinMatchReq, out *NotifyJoinMatchRsp) error
	}
	type RobotRpc struct {
		robotRpc
	}
	h := &robotRpcHandler{hdlr}
	return s.Handle(s.NewHandler(&RobotRpc{h}, opts...))
}

type robotRpcHandler struct {
	RobotRpcHandler
}

func (h *robotRpcHandler) NotifyJoinRoom(ctx context.Context, in *NotifyJoinRoomReq, out *NotifyJoinRoomRsp) error {
	return h.RobotRpcHandler.NotifyJoinRoom(ctx, in, out)
}

func (h *robotRpcHandler) NotifyJoinMatch(ctx context.Context, in *NotifyJoinMatchReq, out *NotifyJoinMatchRsp) error {
	return h.RobotRpcHandler.NotifyJoinMatch(ctx, in, out)
}
