// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/version.proto

package version

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api1 "github.com/micro/micro/v3/proto/api"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Config service

func NewConfigEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Config service

type ConfigService interface {
	Get(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	// 获取在线参数
	GetOnlineParam(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	LoadGameInfo(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	// 检查热更新
	CheckUpdate(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	// 获取游戏列表配置
	LoadMatchConfig(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	// 获取公告
	LoadNotice(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) Get(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Config.Get", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) GetOnlineParam(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Config.GetOnlineParam", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadGameInfo(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Config.LoadGameInfo", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CheckUpdate(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Config.CheckUpdate", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadMatchConfig(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Config.LoadMatchConfig", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadNotice(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Config.LoadNotice", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigHandler interface {
	Get(context.Context, *api1.Request, *api1.Response) error
	// 获取在线参数
	GetOnlineParam(context.Context, *api1.Request, *api1.Response) error
	LoadGameInfo(context.Context, *api1.Request, *api1.Response) error
	// 检查热更新
	CheckUpdate(context.Context, *api1.Request, *api1.Response) error
	// 获取游戏列表配置
	LoadMatchConfig(context.Context, *api1.Request, *api1.Response) error
	// 获取公告
	LoadNotice(context.Context, *api1.Request, *api1.Response) error
}

func RegisterConfigHandler(s server.Server, hdlr ConfigHandler, opts ...server.HandlerOption) error {
	type config interface {
		Get(ctx context.Context, in *api1.Request, out *api1.Response) error
		GetOnlineParam(ctx context.Context, in *api1.Request, out *api1.Response) error
		LoadGameInfo(ctx context.Context, in *api1.Request, out *api1.Response) error
		CheckUpdate(ctx context.Context, in *api1.Request, out *api1.Response) error
		LoadMatchConfig(ctx context.Context, in *api1.Request, out *api1.Response) error
		LoadNotice(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type Config struct {
		config
	}
	h := &configHandler{hdlr}
	return s.Handle(s.NewHandler(&Config{h}, opts...))
}

type configHandler struct {
	ConfigHandler
}

func (h *configHandler) Get(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ConfigHandler.Get(ctx, in, out)
}

func (h *configHandler) GetOnlineParam(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ConfigHandler.GetOnlineParam(ctx, in, out)
}

func (h *configHandler) LoadGameInfo(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ConfigHandler.LoadGameInfo(ctx, in, out)
}

func (h *configHandler) CheckUpdate(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ConfigHandler.CheckUpdate(ctx, in, out)
}

func (h *configHandler) LoadMatchConfig(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ConfigHandler.LoadMatchConfig(ctx, in, out)
}

func (h *configHandler) LoadNotice(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.ConfigHandler.LoadNotice(ctx, in, out)
}

// Api Endpoints for ConfigRpc service

func NewConfigRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConfigRpc service

type ConfigRpcService interface {
	// 更新缓存
	Refresh(ctx context.Context, in *RefreshCacheReq, opts ...client.CallOption) (*RefreshCacheRsp, error)
}

type configRpcService struct {
	c    client.Client
	name string
}

func NewConfigRpcService(name string, c client.Client) ConfigRpcService {
	return &configRpcService{
		c:    c,
		name: name,
	}
}

func (c *configRpcService) Refresh(ctx context.Context, in *RefreshCacheReq, opts ...client.CallOption) (*RefreshCacheRsp, error) {
	req := c.c.NewRequest(c.name, "ConfigRpc.Refresh", in)
	out := new(RefreshCacheRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigRpc service

type ConfigRpcHandler interface {
	// 更新缓存
	Refresh(context.Context, *RefreshCacheReq, *RefreshCacheRsp) error
}

func RegisterConfigRpcHandler(s server.Server, hdlr ConfigRpcHandler, opts ...server.HandlerOption) error {
	type configRpc interface {
		Refresh(ctx context.Context, in *RefreshCacheReq, out *RefreshCacheRsp) error
	}
	type ConfigRpc struct {
		configRpc
	}
	h := &configRpcHandler{hdlr}
	return s.Handle(s.NewHandler(&ConfigRpc{h}, opts...))
}

type configRpcHandler struct {
	ConfigRpcHandler
}

func (h *configRpcHandler) Refresh(ctx context.Context, in *RefreshCacheReq, out *RefreshCacheRsp) error {
	return h.ConfigRpcHandler.Refresh(ctx, in, out)
}
