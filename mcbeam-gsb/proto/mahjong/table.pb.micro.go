// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mahjong/table.proto

package mahjong

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Table service

func NewTableEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Table service

type TableService interface {
	// 准备
	Ready(ctx context.Context, in *ReadyReq, opts ...client.CallOption) (*Empty, error)
	// 开始游戏
	StartGame(ctx context.Context, in *StartGameReq, opts ...client.CallOption) (*Empty, error)
}

type tableService struct {
	c    client.Client
	name string
}

func NewTableService(name string, c client.Client) TableService {
	return &tableService{
		c:    c,
		name: name,
	}
}

func (c *tableService) Ready(ctx context.Context, in *ReadyReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Table.Ready", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableService) StartGame(ctx context.Context, in *StartGameReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Table.StartGame", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Table service

type TableHandler interface {
	// 准备
	Ready(context.Context, *ReadyReq, *Empty) error
	// 开始游戏
	StartGame(context.Context, *StartGameReq, *Empty) error
}

func RegisterTableHandler(s server.Server, hdlr TableHandler, opts ...server.HandlerOption) error {
	type table interface {
		Ready(ctx context.Context, in *ReadyReq, out *Empty) error
		StartGame(ctx context.Context, in *StartGameReq, out *Empty) error
	}
	type Table struct {
		table
	}
	h := &tableHandler{hdlr}
	return s.Handle(s.NewHandler(&Table{h}, opts...))
}

type tableHandler struct {
	TableHandler
}

func (h *tableHandler) Ready(ctx context.Context, in *ReadyReq, out *Empty) error {
	return h.TableHandler.Ready(ctx, in, out)
}

func (h *tableHandler) StartGame(ctx context.Context, in *StartGameReq, out *Empty) error {
	return h.TableHandler.StartGame(ctx, in, out)
}
