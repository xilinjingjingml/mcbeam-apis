// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: proto/define.proto

package gsbase

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 房间状态
type RoomStatus int32

const (
	RoomStatus_Unknown     RoomStatus = 0 // 初始化完成
	RoomStatus_Initialized RoomStatus = 1 // 初始化完成
	RoomStatus_Started     RoomStatus = 2 // 进行中
	RoomStatus_Dismissed   RoomStatus = 3 // 已解散
)

// Enum value maps for RoomStatus.
var (
	RoomStatus_name = map[int32]string{
		0: "Unknown",
		1: "Initialized",
		2: "Started",
		3: "Dismissed",
	}
	RoomStatus_value = map[string]int32{
		"Unknown":     0,
		"Initialized": 1,
		"Started":     2,
		"Dismissed":   3,
	}
)

func (x RoomStatus) Enum() *RoomStatus {
	p := new(RoomStatus)
	*p = x
	return p
}

func (x RoomStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_define_proto_enumTypes[0].Descriptor()
}

func (RoomStatus) Type() protoreflect.EnumType {
	return &file_proto_define_proto_enumTypes[0]
}

func (x RoomStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomStatus.Descriptor instead.
func (RoomStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{0}
}

// 房间类型
type RoomType int32

const (
	RoomType_NormalRoom  RoomType = 0 // 普通房
	RoomType_PrivateRoom RoomType = 1 // 私人房
	RoomType_ClubRoom    RoomType = 2 // 俱乐部房间
)

// Enum value maps for RoomType.
var (
	RoomType_name = map[int32]string{
		0: "NormalRoom",
		1: "PrivateRoom",
		2: "ClubRoom",
	}
	RoomType_value = map[string]int32{
		"NormalRoom":  0,
		"PrivateRoom": 1,
		"ClubRoom":    2,
	}
)

func (x RoomType) Enum() *RoomType {
	p := new(RoomType)
	*p = x
	return p
}

func (x RoomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_define_proto_enumTypes[1].Descriptor()
}

func (RoomType) Type() protoreflect.EnumType {
	return &file_proto_define_proto_enumTypes[1]
}

func (x RoomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomType.Descriptor instead.
func (RoomType) EnumDescriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{1}
}

type PlayerGameStatus int32

const (
	PlayerGameStatus_Invalid PlayerGameStatus = 0
	PlayerGameStatus_Joined  PlayerGameStatus = 1 // 已加入
	PlayerGameStatus_Leave   PlayerGameStatus = 2 // 已离开
)

// Enum value maps for PlayerGameStatus.
var (
	PlayerGameStatus_name = map[int32]string{
		0: "Invalid",
		1: "Joined",
		2: "Leave",
	}
	PlayerGameStatus_value = map[string]int32{
		"Invalid": 0,
		"Joined":  1,
		"Leave":   2,
	}
)

func (x PlayerGameStatus) Enum() *PlayerGameStatus {
	p := new(PlayerGameStatus)
	*p = x
	return p
}

func (x PlayerGameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerGameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_define_proto_enumTypes[2].Descriptor()
}

func (PlayerGameStatus) Type() protoreflect.EnumType {
	return &file_proto_define_proto_enumTypes[2]
}

func (x PlayerGameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerGameStatus.Descriptor instead.
func (PlayerGameStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{2}
}

type DismissCode int32

const (
	// 正常解散
	DismissCode_GameOver DismissCode = 0
	// 系统解散
	DismissCode_System DismissCode = 1
	// 超时解散
	DismissCode_TimeOut DismissCode = 2
	// 游戏服务器解散
	DismissCode_GameDismiss DismissCode = 3
	// 玩家离开，人数不足
	DismissCode_DismissCodePlayerNotEnough DismissCode = 4
	// 管理员解散
	DismissCode_DismissCodeAdmin DismissCode = 255
)

// Enum value maps for DismissCode.
var (
	DismissCode_name = map[int32]string{
		0:   "GameOver",
		1:   "System",
		2:   "TimeOut",
		3:   "GameDismiss",
		4:   "DismissCodePlayerNotEnough",
		255: "DismissCodeAdmin",
	}
	DismissCode_value = map[string]int32{
		"GameOver":                   0,
		"System":                     1,
		"TimeOut":                    2,
		"GameDismiss":                3,
		"DismissCodePlayerNotEnough": 4,
		"DismissCodeAdmin":           255,
	}
)

func (x DismissCode) Enum() *DismissCode {
	p := new(DismissCode)
	*p = x
	return p
}

func (x DismissCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DismissCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_define_proto_enumTypes[3].Descriptor()
}

func (DismissCode) Type() protoreflect.EnumType {
	return &file_proto_define_proto_enumTypes[3]
}

func (x DismissCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DismissCode.Descriptor instead.
func (DismissCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{3}
}

type GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"room_id"
	RoomId string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" bson:"room_id"`
	//@inject_tag: bson:"game_gid"
	GameGid string `protobuf:"bytes,2,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty" bson:"game_gid"`
	//@inject_tag: bson:"properties"
	Properties string `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty" bson:"properties"`
	//@inject_tag: bson:"create_at"
	CreateAt int64 `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty" bson:"create_at"`
	//@inject_tag: bson:"expire_at"
	ExpireAt int64 `protobuf:"varint,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty" bson:"expire_at"`
	//@inject_tag: bson:"share_code,omitempty"
	ShareCode string `protobuf:"bytes,6,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty" bson:"share_code,omitempty"`
	//@inject_tag: bson:"plat_aid"
	PlatAid int32 `protobuf:"varint,7,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty" bson:"plat_aid"`
	//@inject_tag: bson:"settle_item"
	SettleItem int32 `protobuf:"varint,8,opt,name=settle_item,json=settleItem,proto3" json:"settle_item,omitempty" bson:"settle_item"`
	//@inject_tag: bson:"date"
	Date int32 `protobuf:"varint,9,opt,name=date,proto3" json:"date,omitempty" bson:"date"`
	//@inject_tag: bson:"status"
	Status RoomStatus `protobuf:"varint,10,opt,name=status,proto3,enum=gsbase.RoomStatus" json:"status,omitempty" bson:"status"`
	//@inject_tag: bson:"type"
	Type int32 `protobuf:"varint,11,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	//@inject_tag: bson:"match_cid"
	MatchCid string `protobuf:"bytes,12,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty" bson:"match_cid"`
	//@inject_tag: bson:"players"
	Players []*PlayerGameData `protobuf:"bytes,13,rep,name=players,proto3" json:"players,omitempty" bson:"players"`
	//@inject_tag: bson:"rounds"
	Rounds []*RoundData `protobuf:"bytes,14,rep,name=rounds,proto3" json:"rounds,omitempty" bson:"rounds"`
	//@inject_tag: bson:"server_id"
	ServerId string `protobuf:"bytes,15,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty" bson:"server_id"`
	//@inject_tag: bson:"tags,omitempty"
	Tags map[string]string `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags,omitempty"`
	//@inject_tag: bson:"match_id,omitempty"
	MatchId string `protobuf:"bytes,17,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty" bson:"match_id,omitempty"`
	//@inject_tag: bson:"update_time"
	UpdateTime int64 `protobuf:"varint,18,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" bson:"update_time"`
	//@inject_tag: bson:"max_round_num"
	MaxRoundNum int32 `protobuf:"varint,19,opt,name=max_round_num,json=maxRoundNum,proto3" json:"max_round_num,omitempty" bson:"max_round_num"`
	//@inject_tag: bson:"labels"
	Labels []string `protobuf:"bytes,20,rep,name=labels,proto3" json:"labels,omitempty" bson:"labels"`
	//@inject_tag: bson:"dismiss_code"
	DismissCode int32 `protobuf:"varint,21,opt,name=dismiss_code,json=dismissCode,proto3" json:"dismiss_code,omitempty" bson:"dismiss_code"`
	//@inject_tag: bson:"aliases"
	Aliases []string `protobuf:"bytes,22,rep,name=aliases,proto3" json:"aliases,omitempty" bson:"aliases"`
}

func (x *GameResult) Reset() {
	*x = GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_define_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResult) ProtoMessage() {}

func (x *GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_define_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResult.ProtoReflect.Descriptor instead.
func (*GameResult) Descriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{0}
}

func (x *GameResult) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameResult) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *GameResult) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

func (x *GameResult) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GameResult) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *GameResult) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

func (x *GameResult) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *GameResult) GetSettleItem() int32 {
	if x != nil {
		return x.SettleItem
	}
	return 0
}

func (x *GameResult) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *GameResult) GetStatus() RoomStatus {
	if x != nil {
		return x.Status
	}
	return RoomStatus_Unknown
}

func (x *GameResult) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GameResult) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *GameResult) GetPlayers() []*PlayerGameData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameResult) GetRounds() []*RoundData {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *GameResult) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *GameResult) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GameResult) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GameResult) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *GameResult) GetMaxRoundNum() int32 {
	if x != nil {
		return x.MaxRoundNum
	}
	return 0
}

func (x *GameResult) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GameResult) GetDismissCode() int32 {
	if x != nil {
		return x.DismissCode
	}
	return 0
}

func (x *GameResult) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type PlayerGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"openid"
	Openid string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty" bson:"openid"` // 玩家ID
	//@inject_tag: bson:"win_lose"
	WinLose int64 `protobuf:"varint,2,opt,name=win_lose,json=winLose,proto3" json:"win_lose,omitempty" bson:"win_lose"` // 玩家输赢
	//@inject_tag: bson:"status"
	Status PlayerGameStatus `protobuf:"varint,3,opt,name=status,proto3,enum=gsbase.PlayerGameStatus" json:"status,omitempty" bson:"status"` // 玩家状态
	//@inject_tag: bson:"update_time"
	UpdateTime int64 `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" bson:"update_time"` // 最后一次更新时间
	//@inject_tag: bson:"labels"
	Labels []string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" bson:"labels"` // 战绩标签
	//@inject_tag: bson:"tags,omitempty"
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"tags,omitempty"` // 战绩额外参数
	//@inject_tag: bson:"nickname"
	Nickname string `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty" bson:"nickname"`
}

func (x *PlayerGameData) Reset() {
	*x = PlayerGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_define_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerGameData) ProtoMessage() {}

func (x *PlayerGameData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_define_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerGameData.ProtoReflect.Descriptor instead.
func (*PlayerGameData) Descriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerGameData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *PlayerGameData) GetWinLose() int64 {
	if x != nil {
		return x.WinLose
	}
	return 0
}

func (x *PlayerGameData) GetStatus() PlayerGameStatus {
	if x != nil {
		return x.Status
	}
	return PlayerGameStatus_Invalid
}

func (x *PlayerGameData) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *PlayerGameData) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PlayerGameData) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PlayerGameData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type BattleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"openid"
	Openid string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty" bson:"openid"` // 玩家ID
	//@inject_tag: bson:"win_lose"
	WinLose int64 `protobuf:"varint,2,opt,name=win_lose,json=winLose,proto3" json:"win_lose,omitempty" bson:"win_lose"` // 玩家输赢
	//@inject_tag: bson:"labels"
	Labels []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" bson:"labels"` // 战绩标签
}

func (x *BattleData) Reset() {
	*x = BattleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_define_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleData) ProtoMessage() {}

func (x *BattleData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_define_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleData.ProtoReflect.Descriptor instead.
func (*BattleData) Descriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{2}
}

func (x *BattleData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *BattleData) GetWinLose() int64 {
	if x != nil {
		return x.WinLose
	}
	return 0
}

func (x *BattleData) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type RoundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"index"
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" bson:"index"`
	//@inject_tag: bson:"players"
	Players []*BattleData `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty" bson:"players"`
	//@inject_tag: bson:"start_time"
	StartTime int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" bson:"start_time"`
	//@inject_tag: bson:"finish_time"
	FinishTime int64 `protobuf:"varint,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty" bson:"finish_time"`
}

func (x *RoundData) Reset() {
	*x = RoundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_define_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundData) ProtoMessage() {}

func (x *RoundData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_define_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundData.ProtoReflect.Descriptor instead.
func (*RoundData) Descriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{3}
}

func (x *RoundData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RoundData) GetPlayers() []*BattleData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *RoundData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RoundData) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

// 房间状态 topic game.room.stats
type GameRoomStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间ID
	RoomId string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 游戏ID
	GameGid string `protobuf:"bytes,2,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`
	// 房间类型
	Type RoomType `protobuf:"varint,3,opt,name=type,proto3,enum=gsbase.RoomType" json:"type,omitempty"`
	// 房间创建时间
	CreateAt int64 `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 房间场次
	MatchCid string `protobuf:"bytes,5,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	// 房间号
	ShareCode string `protobuf:"bytes,6,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`
	// 平台
	PlatAid int32 `protobuf:"varint,7,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
	// 当前玩家人数
	CurPlayerNum int32 `protobuf:"varint,8,opt,name=cur_player_num,json=curPlayerNum,proto3" json:"cur_player_num,omitempty"`
	// 最大游戏人数
	MaxPlayerNum int32 `protobuf:"varint,9,opt,name=max_player_num,json=maxPlayerNum,proto3" json:"max_player_num,omitempty"`
	// 房间标签
	Labels []string `protobuf:"bytes,11,rep,name=labels,proto3" json:"labels,omitempty"`
	// 房间别名
	Aliases []string `protobuf:"bytes,12,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// 房间当前状态
	Status RoomStatus `protobuf:"varint,13,opt,name=status,proto3,enum=gsbase.RoomStatus" json:"status,omitempty"`
	// 玩家列表
	Players []*GamePlayerStats `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty"`
	// 房主
	Creator string `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	// 参数
	Properties string `protobuf:"bytes,16,opt,name=properties,proto3" json:"properties,omitempty"`
	// 更新版本
	Version int64 `protobuf:"varint,17,opt,name=version,proto3" json:"version,omitempty"`
	// 实例ID
	ServerId string `protobuf:"bytes,18,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// 房间状态数据
	Stats string `protobuf:"bytes,19,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GameRoomStats) Reset() {
	*x = GameRoomStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_define_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRoomStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRoomStats) ProtoMessage() {}

func (x *GameRoomStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_define_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRoomStats.ProtoReflect.Descriptor instead.
func (*GameRoomStats) Descriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{4}
}

func (x *GameRoomStats) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameRoomStats) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *GameRoomStats) GetType() RoomType {
	if x != nil {
		return x.Type
	}
	return RoomType_NormalRoom
}

func (x *GameRoomStats) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *GameRoomStats) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *GameRoomStats) GetShareCode() string {
	if x != nil {
		return x.ShareCode
	}
	return ""
}

func (x *GameRoomStats) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *GameRoomStats) GetCurPlayerNum() int32 {
	if x != nil {
		return x.CurPlayerNum
	}
	return 0
}

func (x *GameRoomStats) GetMaxPlayerNum() int32 {
	if x != nil {
		return x.MaxPlayerNum
	}
	return 0
}

func (x *GameRoomStats) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GameRoomStats) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *GameRoomStats) GetStatus() RoomStatus {
	if x != nil {
		return x.Status
	}
	return RoomStatus_Unknown
}

func (x *GameRoomStats) GetPlayers() []*GamePlayerStats {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameRoomStats) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *GameRoomStats) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

func (x *GameRoomStats) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GameRoomStats) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *GameRoomStats) GetStats() string {
	if x != nil {
		return x.Stats
	}
	return ""
}

type GamePlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"openid"
	Openid string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty" bson:"openid"` // 玩家ID
	//@inject_tag: bson:"metadata"
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"metadata"`
	//@inject_tag: bson:"nickname"
	Nickname string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty" bson:"nickname"`
	//  int32 type = 4;
	//@inject_tag: bson:"avatar"
	Avatar string `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty" bson:"avatar"` // 头像
	//@inject_tag: bson:"win_lose"
	//@inject_tag: bson:"status"
	Status PlayerGameStatus `protobuf:"varint,6,opt,name=status,proto3,enum=gsbase.PlayerGameStatus" json:"status,omitempty" bson:"status"` // 玩家状态
}

func (x *GamePlayerStats) Reset() {
	*x = GamePlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_define_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerStats) ProtoMessage() {}

func (x *GamePlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_define_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerStats.ProtoReflect.Descriptor instead.
func (*GamePlayerStats) Descriptor() ([]byte, []int) {
	return file_proto_define_proto_rawDescGZIP(), []int{5}
}

func (x *GamePlayerStats) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GamePlayerStats) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GamePlayerStats) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GamePlayerStats) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *GamePlayerStats) GetStatus() PlayerGameStatus {
	if x != nil {
		return x.Status
	}
	return PlayerGameStatus_Invalid
}

var File_proto_define_proto protoreflect.FileDescriptor

var file_proto_define_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x22, 0x80, 0x06, 0x0a,
	0x0a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x5f, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74,
	0x41, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb9, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69,
	0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x69,
	0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0a, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x73, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1, 0x04, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x73, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x5f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x6f,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x31, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x47,
	0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x73, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x67, 0x73, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x46, 0x0a, 0x0a,
	0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x65, 0x64, 0x10, 0x03, 0x2a, 0x39, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x62, 0x52, 0x6f, 0x6f, 0x6d, 0x10, 0x02, 0x2a,
	0x36, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x10, 0xff, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x67, 0x73, 0x62, 0x61,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_define_proto_rawDescOnce sync.Once
	file_proto_define_proto_rawDescData = file_proto_define_proto_rawDesc
)

func file_proto_define_proto_rawDescGZIP() []byte {
	file_proto_define_proto_rawDescOnce.Do(func() {
		file_proto_define_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_define_proto_rawDescData)
	})
	return file_proto_define_proto_rawDescData
}

var file_proto_define_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_define_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_define_proto_goTypes = []interface{}{
	(RoomStatus)(0),         // 0: gsbase.RoomStatus
	(RoomType)(0),           // 1: gsbase.RoomType
	(PlayerGameStatus)(0),   // 2: gsbase.PlayerGameStatus
	(DismissCode)(0),        // 3: gsbase.DismissCode
	(*GameResult)(nil),      // 4: gsbase.GameResult
	(*PlayerGameData)(nil),  // 5: gsbase.PlayerGameData
	(*BattleData)(nil),      // 6: gsbase.BattleData
	(*RoundData)(nil),       // 7: gsbase.RoundData
	(*GameRoomStats)(nil),   // 8: gsbase.GameRoomStats
	(*GamePlayerStats)(nil), // 9: gsbase.GamePlayerStats
	nil,                     // 10: gsbase.GameResult.TagsEntry
	nil,                     // 11: gsbase.PlayerGameData.TagsEntry
	nil,                     // 12: gsbase.GamePlayerStats.MetadataEntry
}
var file_proto_define_proto_depIdxs = []int32{
	0,  // 0: gsbase.GameResult.status:type_name -> gsbase.RoomStatus
	5,  // 1: gsbase.GameResult.players:type_name -> gsbase.PlayerGameData
	7,  // 2: gsbase.GameResult.rounds:type_name -> gsbase.RoundData
	10, // 3: gsbase.GameResult.tags:type_name -> gsbase.GameResult.TagsEntry
	2,  // 4: gsbase.PlayerGameData.status:type_name -> gsbase.PlayerGameStatus
	11, // 5: gsbase.PlayerGameData.tags:type_name -> gsbase.PlayerGameData.TagsEntry
	6,  // 6: gsbase.RoundData.players:type_name -> gsbase.BattleData
	1,  // 7: gsbase.GameRoomStats.type:type_name -> gsbase.RoomType
	0,  // 8: gsbase.GameRoomStats.status:type_name -> gsbase.RoomStatus
	9,  // 9: gsbase.GameRoomStats.players:type_name -> gsbase.GamePlayerStats
	12, // 10: gsbase.GamePlayerStats.metadata:type_name -> gsbase.GamePlayerStats.MetadataEntry
	2,  // 11: gsbase.GamePlayerStats.status:type_name -> gsbase.PlayerGameStatus
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_define_proto_init() }
func file_proto_define_proto_init() {
	if File_proto_define_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_define_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_define_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_define_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_define_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_define_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRoomStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_define_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_define_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_define_proto_goTypes,
		DependencyIndexes: file_proto_define_proto_depIdxs,
		EnumInfos:         file_proto_define_proto_enumTypes,
		MessageInfos:      file_proto_define_proto_msgTypes,
	}.Build()
	File_proto_define_proto = out.File
	file_proto_define_proto_rawDesc = nil
	file_proto_define_proto_goTypes = nil
	file_proto_define_proto_depIdxs = nil
}
