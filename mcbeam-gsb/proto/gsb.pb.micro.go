// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/gsb.proto

package gsbase

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GsBase service

func NewGsBaseEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GsBase service

type GsBaseService interface {
	// 加入房间
	JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...client.CallOption) (*Empty, error)
	// 离开房间
	LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...client.CallOption) (*Empty, error)
	// 心跳
	Ping(ctx context.Context, in *GsbPing, opts ...client.CallOption) (*Empty, error)
	// 聊天
	Chat(ctx context.Context, in *ChatReq, opts ...client.CallOption) (*Empty, error)
	// 申请解散房间
	ApplyDismiss(ctx context.Context, in *ApplyDismissReq, opts ...client.CallOption) (*Empty, error)
	// 回复解散请求
	ReplyDismiss(ctx context.Context, in *ReplyDismissReq, opts ...client.CallOption) (*Empty, error)
	// 踢人
	KickOut(ctx context.Context, in *KickOutReq, opts ...client.CallOption) (*Empty, error)
}

type gsBaseService struct {
	c    client.Client
	name string
}

func NewGsBaseService(name string, c client.Client) GsBaseService {
	return &gsBaseService{
		c:    c,
		name: name,
	}
}

func (c *gsBaseService) JoinRoom(ctx context.Context, in *JoinRoomReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.JoinRoom", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsBaseService) LeaveRoom(ctx context.Context, in *LeaveRoomReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.LeaveRoom", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsBaseService) Ping(ctx context.Context, in *GsbPing, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.Ping", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsBaseService) Chat(ctx context.Context, in *ChatReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.Chat", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsBaseService) ApplyDismiss(ctx context.Context, in *ApplyDismissReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.ApplyDismiss", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsBaseService) ReplyDismiss(ctx context.Context, in *ReplyDismissReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.ReplyDismiss", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsBaseService) KickOut(ctx context.Context, in *KickOutReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "GsBase.KickOut", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GsBase service

type GsBaseHandler interface {
	// 加入房间
	JoinRoom(context.Context, *JoinRoomReq, *Empty) error
	// 离开房间
	LeaveRoom(context.Context, *LeaveRoomReq, *Empty) error
	// 心跳
	Ping(context.Context, *GsbPing, *Empty) error
	// 聊天
	Chat(context.Context, *ChatReq, *Empty) error
	// 申请解散房间
	ApplyDismiss(context.Context, *ApplyDismissReq, *Empty) error
	// 回复解散请求
	ReplyDismiss(context.Context, *ReplyDismissReq, *Empty) error
	// 踢人
	KickOut(context.Context, *KickOutReq, *Empty) error
}

func RegisterGsBaseHandler(s server.Server, hdlr GsBaseHandler, opts ...server.HandlerOption) error {
	type gsBase interface {
		JoinRoom(ctx context.Context, in *JoinRoomReq, out *Empty) error
		LeaveRoom(ctx context.Context, in *LeaveRoomReq, out *Empty) error
		Ping(ctx context.Context, in *GsbPing, out *Empty) error
		Chat(ctx context.Context, in *ChatReq, out *Empty) error
		ApplyDismiss(ctx context.Context, in *ApplyDismissReq, out *Empty) error
		ReplyDismiss(ctx context.Context, in *ReplyDismissReq, out *Empty) error
		KickOut(ctx context.Context, in *KickOutReq, out *Empty) error
	}
	type GsBase struct {
		gsBase
	}
	h := &gsBaseHandler{hdlr}
	return s.Handle(s.NewHandler(&GsBase{h}, opts...))
}

type gsBaseHandler struct {
	GsBaseHandler
}

func (h *gsBaseHandler) JoinRoom(ctx context.Context, in *JoinRoomReq, out *Empty) error {
	return h.GsBaseHandler.JoinRoom(ctx, in, out)
}

func (h *gsBaseHandler) LeaveRoom(ctx context.Context, in *LeaveRoomReq, out *Empty) error {
	return h.GsBaseHandler.LeaveRoom(ctx, in, out)
}

func (h *gsBaseHandler) Ping(ctx context.Context, in *GsbPing, out *Empty) error {
	return h.GsBaseHandler.Ping(ctx, in, out)
}

func (h *gsBaseHandler) Chat(ctx context.Context, in *ChatReq, out *Empty) error {
	return h.GsBaseHandler.Chat(ctx, in, out)
}

func (h *gsBaseHandler) ApplyDismiss(ctx context.Context, in *ApplyDismissReq, out *Empty) error {
	return h.GsBaseHandler.ApplyDismiss(ctx, in, out)
}

func (h *gsBaseHandler) ReplyDismiss(ctx context.Context, in *ReplyDismissReq, out *Empty) error {
	return h.GsBaseHandler.ReplyDismiss(ctx, in, out)
}

func (h *gsBaseHandler) KickOut(ctx context.Context, in *KickOutReq, out *Empty) error {
	return h.GsBaseHandler.KickOut(ctx, in, out)
}

// Api Endpoints for GsRpc service

func NewGsRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GsRpc service

type GsRpcService interface {
	// 创建房间回调
	CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...client.CallOption) (*CreateRoomRsp, error)
	// 解散房间
	DismissRoom(ctx context.Context, in *DismissRoomReq, opts ...client.CallOption) (*DismissRoomRsp, error)
	// 检查房间是否存在
	CheckRoomStatus(ctx context.Context, in *CheckRoomStatusReq, opts ...client.CallOption) (*CheckRoomStatusRsp, error)
	//  获取房间信息
	GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...client.CallOption) (*GetRoomInfoRsp, error)
	// 踢人
	KickOut(ctx context.Context, in *KickOutReq, opts ...client.CallOption) (*KickOutRsp, error)
}

type gsRpcService struct {
	c    client.Client
	name string
}

func NewGsRpcService(name string, c client.Client) GsRpcService {
	return &gsRpcService{
		c:    c,
		name: name,
	}
}

func (c *gsRpcService) CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...client.CallOption) (*CreateRoomRsp, error) {
	req := c.c.NewRequest(c.name, "GsRpc.CreateRoom", in)
	out := new(CreateRoomRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsRpcService) DismissRoom(ctx context.Context, in *DismissRoomReq, opts ...client.CallOption) (*DismissRoomRsp, error) {
	req := c.c.NewRequest(c.name, "GsRpc.DismissRoom", in)
	out := new(DismissRoomRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsRpcService) CheckRoomStatus(ctx context.Context, in *CheckRoomStatusReq, opts ...client.CallOption) (*CheckRoomStatusRsp, error) {
	req := c.c.NewRequest(c.name, "GsRpc.CheckRoomStatus", in)
	out := new(CheckRoomStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsRpcService) GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...client.CallOption) (*GetRoomInfoRsp, error) {
	req := c.c.NewRequest(c.name, "GsRpc.GetRoomInfo", in)
	out := new(GetRoomInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gsRpcService) KickOut(ctx context.Context, in *KickOutReq, opts ...client.CallOption) (*KickOutRsp, error) {
	req := c.c.NewRequest(c.name, "GsRpc.KickOut", in)
	out := new(KickOutRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GsRpc service

type GsRpcHandler interface {
	// 创建房间回调
	CreateRoom(context.Context, *CreateRoomReq, *CreateRoomRsp) error
	// 解散房间
	DismissRoom(context.Context, *DismissRoomReq, *DismissRoomRsp) error
	// 检查房间是否存在
	CheckRoomStatus(context.Context, *CheckRoomStatusReq, *CheckRoomStatusRsp) error
	//  获取房间信息
	GetRoomInfo(context.Context, *GetRoomInfoReq, *GetRoomInfoRsp) error
	// 踢人
	KickOut(context.Context, *KickOutReq, *KickOutRsp) error
}

func RegisterGsRpcHandler(s server.Server, hdlr GsRpcHandler, opts ...server.HandlerOption) error {
	type gsRpc interface {
		CreateRoom(ctx context.Context, in *CreateRoomReq, out *CreateRoomRsp) error
		DismissRoom(ctx context.Context, in *DismissRoomReq, out *DismissRoomRsp) error
		CheckRoomStatus(ctx context.Context, in *CheckRoomStatusReq, out *CheckRoomStatusRsp) error
		GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, out *GetRoomInfoRsp) error
		KickOut(ctx context.Context, in *KickOutReq, out *KickOutRsp) error
	}
	type GsRpc struct {
		gsRpc
	}
	h := &gsRpcHandler{hdlr}
	return s.Handle(s.NewHandler(&GsRpc{h}, opts...))
}

type gsRpcHandler struct {
	GsRpcHandler
}

func (h *gsRpcHandler) CreateRoom(ctx context.Context, in *CreateRoomReq, out *CreateRoomRsp) error {
	return h.GsRpcHandler.CreateRoom(ctx, in, out)
}

func (h *gsRpcHandler) DismissRoom(ctx context.Context, in *DismissRoomReq, out *DismissRoomRsp) error {
	return h.GsRpcHandler.DismissRoom(ctx, in, out)
}

func (h *gsRpcHandler) CheckRoomStatus(ctx context.Context, in *CheckRoomStatusReq, out *CheckRoomStatusRsp) error {
	return h.GsRpcHandler.CheckRoomStatus(ctx, in, out)
}

func (h *gsRpcHandler) GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, out *GetRoomInfoRsp) error {
	return h.GsRpcHandler.GetRoomInfo(ctx, in, out)
}

func (h *gsRpcHandler) KickOut(ctx context.Context, in *KickOutReq, out *KickOutRsp) error {
	return h.GsRpcHandler.KickOut(ctx, in, out)
}
