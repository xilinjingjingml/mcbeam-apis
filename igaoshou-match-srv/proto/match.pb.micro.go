// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/match.proto

package match

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Match service

func NewMatchEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Match service

type MatchService interface {
	// 加入比赛
	JoinMatch(ctx context.Context, in *JoinMatchReq, opts ...client.CallOption) (*JoinMatchRsp, error)
	// 取消匹配
	CancelMatch(ctx context.Context, in *CancelMatchReq, opts ...client.CallOption) (*CancelMatchRsp, error)
	// 确认进入比赛
	MatchConfirm(ctx context.Context, in *MatchConfirmReq, opts ...client.CallOption) (*MatchConfirmRsp, error)
	// 立即开始（如果玩家不足，直接创建新的比赛）
	EnterMatch(ctx context.Context, in *EnterMatchReq, opts ...client.CallOption) (*EnterMatchRsp, error)
	// 上传比赛积分
	SubmitScore(ctx context.Context, in *SubmitScoreReq, opts ...client.CallOption) (*SubmitScoreRsp, error)
	// 获取比赛详细信息(配置)
	GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, opts ...client.CallOption) (*GetMatchDetailsRsp, error)
	// 获取比赛实例信息
	GetMatch(ctx context.Context, in *GetMatchReq, opts ...client.CallOption) (*GetMatchRsp, error)
	// 获取活动赛结果
	GetActivityMatch(ctx context.Context, in *GetActivityMatchReq, opts ...client.CallOption) (*GetActivityMatchRsp, error)
	// 活动赛排行
	ActivityMatchRankList(ctx context.Context, in *ActivityMatchRankListReq, opts ...client.CallOption) (*ActivityMatchRankListRsp, error)
	// 获取进行中的比赛列表
	GetInProgressList(ctx context.Context, in *GetInProgressListReq, opts ...client.CallOption) (*GetInProgressListRsp, error)
	// 获取已完成的比赛列表
	GetCompletedList(ctx context.Context, in *GetCompletedListReq, opts ...client.CallOption) (*GetCompletedListRsp, error)
	// 获取回合战绩
	GetRoundRecordList(ctx context.Context, in *GetRoundRecordListReq, opts ...client.CallOption) (*GetRoundRecordListRsp, error)
	// 领取比赛排名奖励
	GetMatchAward(ctx context.Context, in *GetMatchAwardReq, opts ...client.CallOption) (*GetMatchAwardRsp, error)
	//  获取排行
	LeagueRankList(ctx context.Context, in *RankListReq, opts ...client.CallOption) (*RankListRsp, error)
	//  获取联赛数据
	GetCurLeague(ctx context.Context, in *GetCurLeagueReq, opts ...client.CallOption) (*GetCurLeagueRsp, error)
	// 获取联赛奖励配置
	GetLeagueAwardConfig(ctx context.Context, in *GetLeagueAwardConfigReq, opts ...client.CallOption) (*GetLeagueAwardConfigRsp, error)
	// 获取联赛奖励
	GetLeagueAward(ctx context.Context, in *GetLeagueAwardReq, opts ...client.CallOption) (*GetLeagueAwardRsp, error)
	// 查询玩家战绩
	GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, opts ...client.CallOption) (*GetPlayerProfileRsp, error)
	// 获取活动赛
	GetNextActivityMatch(ctx context.Context, in *GetNextActivityMatchReq, opts ...client.CallOption) (*GetNextActivityMatchRsp, error)
	// 获取比赛分享码
	GetShareCode(ctx context.Context, in *GetShareCodeReq, opts ...client.CallOption) (*GetShareCodeRsp, error)
	// 被邀请人回复
	AcceptedInvite(ctx context.Context, in *AcceptedInviteReq, opts ...client.CallOption) (*AcceptedInviteRsp, error)
	// 获取玩家游戏数据
	GetStatisticsMetrics(ctx context.Context, in *GetStatisticsMetricsReq, opts ...client.CallOption) (*GetStatisticsMetricsRsp, error)
}

type matchService struct {
	c    client.Client
	name string
}

func NewMatchService(name string, c client.Client) MatchService {
	return &matchService{
		c:    c,
		name: name,
	}
}

func (c *matchService) JoinMatch(ctx context.Context, in *JoinMatchReq, opts ...client.CallOption) (*JoinMatchRsp, error) {
	req := c.c.NewRequest(c.name, "Match.JoinMatch", in)
	out := new(JoinMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) CancelMatch(ctx context.Context, in *CancelMatchReq, opts ...client.CallOption) (*CancelMatchRsp, error) {
	req := c.c.NewRequest(c.name, "Match.CancelMatch", in)
	out := new(CancelMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) MatchConfirm(ctx context.Context, in *MatchConfirmReq, opts ...client.CallOption) (*MatchConfirmRsp, error) {
	req := c.c.NewRequest(c.name, "Match.MatchConfirm", in)
	out := new(MatchConfirmRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) EnterMatch(ctx context.Context, in *EnterMatchReq, opts ...client.CallOption) (*EnterMatchRsp, error) {
	req := c.c.NewRequest(c.name, "Match.EnterMatch", in)
	out := new(EnterMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) SubmitScore(ctx context.Context, in *SubmitScoreReq, opts ...client.CallOption) (*SubmitScoreRsp, error) {
	req := c.c.NewRequest(c.name, "Match.SubmitScore", in)
	out := new(SubmitScoreRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, opts ...client.CallOption) (*GetMatchDetailsRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetMatchDetails", in)
	out := new(GetMatchDetailsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetMatch(ctx context.Context, in *GetMatchReq, opts ...client.CallOption) (*GetMatchRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetMatch", in)
	out := new(GetMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetActivityMatch(ctx context.Context, in *GetActivityMatchReq, opts ...client.CallOption) (*GetActivityMatchRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetActivityMatch", in)
	out := new(GetActivityMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) ActivityMatchRankList(ctx context.Context, in *ActivityMatchRankListReq, opts ...client.CallOption) (*ActivityMatchRankListRsp, error) {
	req := c.c.NewRequest(c.name, "Match.ActivityMatchRankList", in)
	out := new(ActivityMatchRankListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetInProgressList(ctx context.Context, in *GetInProgressListReq, opts ...client.CallOption) (*GetInProgressListRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetInProgressList", in)
	out := new(GetInProgressListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetCompletedList(ctx context.Context, in *GetCompletedListReq, opts ...client.CallOption) (*GetCompletedListRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetCompletedList", in)
	out := new(GetCompletedListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetRoundRecordList(ctx context.Context, in *GetRoundRecordListReq, opts ...client.CallOption) (*GetRoundRecordListRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetRoundRecordList", in)
	out := new(GetRoundRecordListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetMatchAward(ctx context.Context, in *GetMatchAwardReq, opts ...client.CallOption) (*GetMatchAwardRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetMatchAward", in)
	out := new(GetMatchAwardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) LeagueRankList(ctx context.Context, in *RankListReq, opts ...client.CallOption) (*RankListRsp, error) {
	req := c.c.NewRequest(c.name, "Match.LeagueRankList", in)
	out := new(RankListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetCurLeague(ctx context.Context, in *GetCurLeagueReq, opts ...client.CallOption) (*GetCurLeagueRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetCurLeague", in)
	out := new(GetCurLeagueRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetLeagueAwardConfig(ctx context.Context, in *GetLeagueAwardConfigReq, opts ...client.CallOption) (*GetLeagueAwardConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetLeagueAwardConfig", in)
	out := new(GetLeagueAwardConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetLeagueAward(ctx context.Context, in *GetLeagueAwardReq, opts ...client.CallOption) (*GetLeagueAwardRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetLeagueAward", in)
	out := new(GetLeagueAwardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, opts ...client.CallOption) (*GetPlayerProfileRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetPlayerProfile", in)
	out := new(GetPlayerProfileRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetNextActivityMatch(ctx context.Context, in *GetNextActivityMatchReq, opts ...client.CallOption) (*GetNextActivityMatchRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetNextActivityMatch", in)
	out := new(GetNextActivityMatchRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetShareCode(ctx context.Context, in *GetShareCodeReq, opts ...client.CallOption) (*GetShareCodeRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetShareCode", in)
	out := new(GetShareCodeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) AcceptedInvite(ctx context.Context, in *AcceptedInviteReq, opts ...client.CallOption) (*AcceptedInviteRsp, error) {
	req := c.c.NewRequest(c.name, "Match.AcceptedInvite", in)
	out := new(AcceptedInviteRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) GetStatisticsMetrics(ctx context.Context, in *GetStatisticsMetricsReq, opts ...client.CallOption) (*GetStatisticsMetricsRsp, error) {
	req := c.c.NewRequest(c.name, "Match.GetStatisticsMetrics", in)
	out := new(GetStatisticsMetricsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Match service

type MatchHandler interface {
	// 加入比赛
	JoinMatch(context.Context, *JoinMatchReq, *JoinMatchRsp) error
	// 取消匹配
	CancelMatch(context.Context, *CancelMatchReq, *CancelMatchRsp) error
	// 确认进入比赛
	MatchConfirm(context.Context, *MatchConfirmReq, *MatchConfirmRsp) error
	// 立即开始（如果玩家不足，直接创建新的比赛）
	EnterMatch(context.Context, *EnterMatchReq, *EnterMatchRsp) error
	// 上传比赛积分
	SubmitScore(context.Context, *SubmitScoreReq, *SubmitScoreRsp) error
	// 获取比赛详细信息(配置)
	GetMatchDetails(context.Context, *GetMatchDetailsReq, *GetMatchDetailsRsp) error
	// 获取比赛实例信息
	GetMatch(context.Context, *GetMatchReq, *GetMatchRsp) error
	// 获取活动赛结果
	GetActivityMatch(context.Context, *GetActivityMatchReq, *GetActivityMatchRsp) error
	// 活动赛排行
	ActivityMatchRankList(context.Context, *ActivityMatchRankListReq, *ActivityMatchRankListRsp) error
	// 获取进行中的比赛列表
	GetInProgressList(context.Context, *GetInProgressListReq, *GetInProgressListRsp) error
	// 获取已完成的比赛列表
	GetCompletedList(context.Context, *GetCompletedListReq, *GetCompletedListRsp) error
	// 获取回合战绩
	GetRoundRecordList(context.Context, *GetRoundRecordListReq, *GetRoundRecordListRsp) error
	// 领取比赛排名奖励
	GetMatchAward(context.Context, *GetMatchAwardReq, *GetMatchAwardRsp) error
	//  获取排行
	LeagueRankList(context.Context, *RankListReq, *RankListRsp) error
	//  获取联赛数据
	GetCurLeague(context.Context, *GetCurLeagueReq, *GetCurLeagueRsp) error
	// 获取联赛奖励配置
	GetLeagueAwardConfig(context.Context, *GetLeagueAwardConfigReq, *GetLeagueAwardConfigRsp) error
	// 获取联赛奖励
	GetLeagueAward(context.Context, *GetLeagueAwardReq, *GetLeagueAwardRsp) error
	// 查询玩家战绩
	GetPlayerProfile(context.Context, *GetPlayerProfileReq, *GetPlayerProfileRsp) error
	// 获取活动赛
	GetNextActivityMatch(context.Context, *GetNextActivityMatchReq, *GetNextActivityMatchRsp) error
	// 获取比赛分享码
	GetShareCode(context.Context, *GetShareCodeReq, *GetShareCodeRsp) error
	// 被邀请人回复
	AcceptedInvite(context.Context, *AcceptedInviteReq, *AcceptedInviteRsp) error
	// 获取玩家游戏数据
	GetStatisticsMetrics(context.Context, *GetStatisticsMetricsReq, *GetStatisticsMetricsRsp) error
}

func RegisterMatchHandler(s server.Server, hdlr MatchHandler, opts ...server.HandlerOption) error {
	type match interface {
		JoinMatch(ctx context.Context, in *JoinMatchReq, out *JoinMatchRsp) error
		CancelMatch(ctx context.Context, in *CancelMatchReq, out *CancelMatchRsp) error
		MatchConfirm(ctx context.Context, in *MatchConfirmReq, out *MatchConfirmRsp) error
		EnterMatch(ctx context.Context, in *EnterMatchReq, out *EnterMatchRsp) error
		SubmitScore(ctx context.Context, in *SubmitScoreReq, out *SubmitScoreRsp) error
		GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, out *GetMatchDetailsRsp) error
		GetMatch(ctx context.Context, in *GetMatchReq, out *GetMatchRsp) error
		GetActivityMatch(ctx context.Context, in *GetActivityMatchReq, out *GetActivityMatchRsp) error
		ActivityMatchRankList(ctx context.Context, in *ActivityMatchRankListReq, out *ActivityMatchRankListRsp) error
		GetInProgressList(ctx context.Context, in *GetInProgressListReq, out *GetInProgressListRsp) error
		GetCompletedList(ctx context.Context, in *GetCompletedListReq, out *GetCompletedListRsp) error
		GetRoundRecordList(ctx context.Context, in *GetRoundRecordListReq, out *GetRoundRecordListRsp) error
		GetMatchAward(ctx context.Context, in *GetMatchAwardReq, out *GetMatchAwardRsp) error
		LeagueRankList(ctx context.Context, in *RankListReq, out *RankListRsp) error
		GetCurLeague(ctx context.Context, in *GetCurLeagueReq, out *GetCurLeagueRsp) error
		GetLeagueAwardConfig(ctx context.Context, in *GetLeagueAwardConfigReq, out *GetLeagueAwardConfigRsp) error
		GetLeagueAward(ctx context.Context, in *GetLeagueAwardReq, out *GetLeagueAwardRsp) error
		GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, out *GetPlayerProfileRsp) error
		GetNextActivityMatch(ctx context.Context, in *GetNextActivityMatchReq, out *GetNextActivityMatchRsp) error
		GetShareCode(ctx context.Context, in *GetShareCodeReq, out *GetShareCodeRsp) error
		AcceptedInvite(ctx context.Context, in *AcceptedInviteReq, out *AcceptedInviteRsp) error
		GetStatisticsMetrics(ctx context.Context, in *GetStatisticsMetricsReq, out *GetStatisticsMetricsRsp) error
	}
	type Match struct {
		match
	}
	h := &matchHandler{hdlr}
	return s.Handle(s.NewHandler(&Match{h}, opts...))
}

type matchHandler struct {
	MatchHandler
}

func (h *matchHandler) JoinMatch(ctx context.Context, in *JoinMatchReq, out *JoinMatchRsp) error {
	return h.MatchHandler.JoinMatch(ctx, in, out)
}

func (h *matchHandler) CancelMatch(ctx context.Context, in *CancelMatchReq, out *CancelMatchRsp) error {
	return h.MatchHandler.CancelMatch(ctx, in, out)
}

func (h *matchHandler) MatchConfirm(ctx context.Context, in *MatchConfirmReq, out *MatchConfirmRsp) error {
	return h.MatchHandler.MatchConfirm(ctx, in, out)
}

func (h *matchHandler) EnterMatch(ctx context.Context, in *EnterMatchReq, out *EnterMatchRsp) error {
	return h.MatchHandler.EnterMatch(ctx, in, out)
}

func (h *matchHandler) SubmitScore(ctx context.Context, in *SubmitScoreReq, out *SubmitScoreRsp) error {
	return h.MatchHandler.SubmitScore(ctx, in, out)
}

func (h *matchHandler) GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, out *GetMatchDetailsRsp) error {
	return h.MatchHandler.GetMatchDetails(ctx, in, out)
}

func (h *matchHandler) GetMatch(ctx context.Context, in *GetMatchReq, out *GetMatchRsp) error {
	return h.MatchHandler.GetMatch(ctx, in, out)
}

func (h *matchHandler) GetActivityMatch(ctx context.Context, in *GetActivityMatchReq, out *GetActivityMatchRsp) error {
	return h.MatchHandler.GetActivityMatch(ctx, in, out)
}

func (h *matchHandler) ActivityMatchRankList(ctx context.Context, in *ActivityMatchRankListReq, out *ActivityMatchRankListRsp) error {
	return h.MatchHandler.ActivityMatchRankList(ctx, in, out)
}

func (h *matchHandler) GetInProgressList(ctx context.Context, in *GetInProgressListReq, out *GetInProgressListRsp) error {
	return h.MatchHandler.GetInProgressList(ctx, in, out)
}

func (h *matchHandler) GetCompletedList(ctx context.Context, in *GetCompletedListReq, out *GetCompletedListRsp) error {
	return h.MatchHandler.GetCompletedList(ctx, in, out)
}

func (h *matchHandler) GetRoundRecordList(ctx context.Context, in *GetRoundRecordListReq, out *GetRoundRecordListRsp) error {
	return h.MatchHandler.GetRoundRecordList(ctx, in, out)
}

func (h *matchHandler) GetMatchAward(ctx context.Context, in *GetMatchAwardReq, out *GetMatchAwardRsp) error {
	return h.MatchHandler.GetMatchAward(ctx, in, out)
}

func (h *matchHandler) LeagueRankList(ctx context.Context, in *RankListReq, out *RankListRsp) error {
	return h.MatchHandler.LeagueRankList(ctx, in, out)
}

func (h *matchHandler) GetCurLeague(ctx context.Context, in *GetCurLeagueReq, out *GetCurLeagueRsp) error {
	return h.MatchHandler.GetCurLeague(ctx, in, out)
}

func (h *matchHandler) GetLeagueAwardConfig(ctx context.Context, in *GetLeagueAwardConfigReq, out *GetLeagueAwardConfigRsp) error {
	return h.MatchHandler.GetLeagueAwardConfig(ctx, in, out)
}

func (h *matchHandler) GetLeagueAward(ctx context.Context, in *GetLeagueAwardReq, out *GetLeagueAwardRsp) error {
	return h.MatchHandler.GetLeagueAward(ctx, in, out)
}

func (h *matchHandler) GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, out *GetPlayerProfileRsp) error {
	return h.MatchHandler.GetPlayerProfile(ctx, in, out)
}

func (h *matchHandler) GetNextActivityMatch(ctx context.Context, in *GetNextActivityMatchReq, out *GetNextActivityMatchRsp) error {
	return h.MatchHandler.GetNextActivityMatch(ctx, in, out)
}

func (h *matchHandler) GetShareCode(ctx context.Context, in *GetShareCodeReq, out *GetShareCodeRsp) error {
	return h.MatchHandler.GetShareCode(ctx, in, out)
}

func (h *matchHandler) AcceptedInvite(ctx context.Context, in *AcceptedInviteReq, out *AcceptedInviteRsp) error {
	return h.MatchHandler.AcceptedInvite(ctx, in, out)
}

func (h *matchHandler) GetStatisticsMetrics(ctx context.Context, in *GetStatisticsMetricsReq, out *GetStatisticsMetricsRsp) error {
	return h.MatchHandler.GetStatisticsMetrics(ctx, in, out)
}

// Api Endpoints for MatchRpc service

func NewMatchRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MatchRpc service

type MatchRpcService interface {
	// 获取比赛列表
	GetMatchDetailList(ctx context.Context, in *GetMatchDetailListReq, opts ...client.CallOption) (*GetMatchDetailListRsp, error)
	// 获取玩家游戏局数
	GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, opts ...client.CallOption) (*GetPlayerProfileRsp, error)
	// 获取玩家比赛信息
	GetPlyMatchInfo(ctx context.Context, in *GetPlyMatchInfoReq, opts ...client.CallOption) (*GetPlyMatchInfoRsp, error)
	// 更新玩家比赛积分
	UpdateMatchScore(ctx context.Context, in *UpdateMatchScoreReq, opts ...client.CallOption) (*UpdateMatchScoreRsp, error)
	// 更新玩家玩家游戏结果
	UpdateGameResult(ctx context.Context, in *UpdateGameResultReq, opts ...client.CallOption) (*UpdateGameResultRsp, error)
	// 更新玩家比赛状态
	//  rpc UpdateMatchStatus(UpdateMatchStatusReq)returns (UpdateMatchStatusRsp){}
	// 查询比赛信息
	GetMatchData(ctx context.Context, in *GetMatchDataReq, opts ...client.CallOption) (*GetMatchDataRsp, error)
	// 比赛排行
	MatchRankList(ctx context.Context, in *MatchRankListReq, opts ...client.CallOption) (*MatchRankListRsp, error)
	// 更新比赛标签
	UpdateMatchLabels(ctx context.Context, in *UpdateMatchLabelsReq, opts ...client.CallOption) (*UpdateMatchLabelsRsp, error)
	// 获取比赛详细信息(配置)
	GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, opts ...client.CallOption) (*GetMatchDetailsRsp, error)
	// 获取玩家最近的游戏记录
	GetLatestRoundList(ctx context.Context, in *GetLatestRoundListReq, opts ...client.CallOption) (*GetLatestRoundListRsp, error)
}

type matchRpcService struct {
	c    client.Client
	name string
}

func NewMatchRpcService(name string, c client.Client) MatchRpcService {
	return &matchRpcService{
		c:    c,
		name: name,
	}
}

func (c *matchRpcService) GetMatchDetailList(ctx context.Context, in *GetMatchDetailListReq, opts ...client.CallOption) (*GetMatchDetailListRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.GetMatchDetailList", in)
	out := new(GetMatchDetailListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, opts ...client.CallOption) (*GetPlayerProfileRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.GetPlayerProfile", in)
	out := new(GetPlayerProfileRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) GetPlyMatchInfo(ctx context.Context, in *GetPlyMatchInfoReq, opts ...client.CallOption) (*GetPlyMatchInfoRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.GetPlyMatchInfo", in)
	out := new(GetPlyMatchInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) UpdateMatchScore(ctx context.Context, in *UpdateMatchScoreReq, opts ...client.CallOption) (*UpdateMatchScoreRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.UpdateMatchScore", in)
	out := new(UpdateMatchScoreRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) UpdateGameResult(ctx context.Context, in *UpdateGameResultReq, opts ...client.CallOption) (*UpdateGameResultRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.UpdateGameResult", in)
	out := new(UpdateGameResultRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) GetMatchData(ctx context.Context, in *GetMatchDataReq, opts ...client.CallOption) (*GetMatchDataRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.GetMatchData", in)
	out := new(GetMatchDataRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) MatchRankList(ctx context.Context, in *MatchRankListReq, opts ...client.CallOption) (*MatchRankListRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.MatchRankList", in)
	out := new(MatchRankListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) UpdateMatchLabels(ctx context.Context, in *UpdateMatchLabelsReq, opts ...client.CallOption) (*UpdateMatchLabelsRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.UpdateMatchLabels", in)
	out := new(UpdateMatchLabelsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, opts ...client.CallOption) (*GetMatchDetailsRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.GetMatchDetails", in)
	out := new(GetMatchDetailsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchRpcService) GetLatestRoundList(ctx context.Context, in *GetLatestRoundListReq, opts ...client.CallOption) (*GetLatestRoundListRsp, error) {
	req := c.c.NewRequest(c.name, "MatchRpc.GetLatestRoundList", in)
	out := new(GetLatestRoundListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MatchRpc service

type MatchRpcHandler interface {
	// 获取比赛列表
	GetMatchDetailList(context.Context, *GetMatchDetailListReq, *GetMatchDetailListRsp) error
	// 获取玩家游戏局数
	GetPlayerProfile(context.Context, *GetPlayerProfileReq, *GetPlayerProfileRsp) error
	// 获取玩家比赛信息
	GetPlyMatchInfo(context.Context, *GetPlyMatchInfoReq, *GetPlyMatchInfoRsp) error
	// 更新玩家比赛积分
	UpdateMatchScore(context.Context, *UpdateMatchScoreReq, *UpdateMatchScoreRsp) error
	// 更新玩家玩家游戏结果
	UpdateGameResult(context.Context, *UpdateGameResultReq, *UpdateGameResultRsp) error
	// 更新玩家比赛状态
	//  rpc UpdateMatchStatus(UpdateMatchStatusReq)returns (UpdateMatchStatusRsp){}
	// 查询比赛信息
	GetMatchData(context.Context, *GetMatchDataReq, *GetMatchDataRsp) error
	// 比赛排行
	MatchRankList(context.Context, *MatchRankListReq, *MatchRankListRsp) error
	// 更新比赛标签
	UpdateMatchLabels(context.Context, *UpdateMatchLabelsReq, *UpdateMatchLabelsRsp) error
	// 获取比赛详细信息(配置)
	GetMatchDetails(context.Context, *GetMatchDetailsReq, *GetMatchDetailsRsp) error
	// 获取玩家最近的游戏记录
	GetLatestRoundList(context.Context, *GetLatestRoundListReq, *GetLatestRoundListRsp) error
}

func RegisterMatchRpcHandler(s server.Server, hdlr MatchRpcHandler, opts ...server.HandlerOption) error {
	type matchRpc interface {
		GetMatchDetailList(ctx context.Context, in *GetMatchDetailListReq, out *GetMatchDetailListRsp) error
		GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, out *GetPlayerProfileRsp) error
		GetPlyMatchInfo(ctx context.Context, in *GetPlyMatchInfoReq, out *GetPlyMatchInfoRsp) error
		UpdateMatchScore(ctx context.Context, in *UpdateMatchScoreReq, out *UpdateMatchScoreRsp) error
		UpdateGameResult(ctx context.Context, in *UpdateGameResultReq, out *UpdateGameResultRsp) error
		GetMatchData(ctx context.Context, in *GetMatchDataReq, out *GetMatchDataRsp) error
		MatchRankList(ctx context.Context, in *MatchRankListReq, out *MatchRankListRsp) error
		UpdateMatchLabels(ctx context.Context, in *UpdateMatchLabelsReq, out *UpdateMatchLabelsRsp) error
		GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, out *GetMatchDetailsRsp) error
		GetLatestRoundList(ctx context.Context, in *GetLatestRoundListReq, out *GetLatestRoundListRsp) error
	}
	type MatchRpc struct {
		matchRpc
	}
	h := &matchRpcHandler{hdlr}
	return s.Handle(s.NewHandler(&MatchRpc{h}, opts...))
}

type matchRpcHandler struct {
	MatchRpcHandler
}

func (h *matchRpcHandler) GetMatchDetailList(ctx context.Context, in *GetMatchDetailListReq, out *GetMatchDetailListRsp) error {
	return h.MatchRpcHandler.GetMatchDetailList(ctx, in, out)
}

func (h *matchRpcHandler) GetPlayerProfile(ctx context.Context, in *GetPlayerProfileReq, out *GetPlayerProfileRsp) error {
	return h.MatchRpcHandler.GetPlayerProfile(ctx, in, out)
}

func (h *matchRpcHandler) GetPlyMatchInfo(ctx context.Context, in *GetPlyMatchInfoReq, out *GetPlyMatchInfoRsp) error {
	return h.MatchRpcHandler.GetPlyMatchInfo(ctx, in, out)
}

func (h *matchRpcHandler) UpdateMatchScore(ctx context.Context, in *UpdateMatchScoreReq, out *UpdateMatchScoreRsp) error {
	return h.MatchRpcHandler.UpdateMatchScore(ctx, in, out)
}

func (h *matchRpcHandler) UpdateGameResult(ctx context.Context, in *UpdateGameResultReq, out *UpdateGameResultRsp) error {
	return h.MatchRpcHandler.UpdateGameResult(ctx, in, out)
}

func (h *matchRpcHandler) GetMatchData(ctx context.Context, in *GetMatchDataReq, out *GetMatchDataRsp) error {
	return h.MatchRpcHandler.GetMatchData(ctx, in, out)
}

func (h *matchRpcHandler) MatchRankList(ctx context.Context, in *MatchRankListReq, out *MatchRankListRsp) error {
	return h.MatchRpcHandler.MatchRankList(ctx, in, out)
}

func (h *matchRpcHandler) UpdateMatchLabels(ctx context.Context, in *UpdateMatchLabelsReq, out *UpdateMatchLabelsRsp) error {
	return h.MatchRpcHandler.UpdateMatchLabels(ctx, in, out)
}

func (h *matchRpcHandler) GetMatchDetails(ctx context.Context, in *GetMatchDetailsReq, out *GetMatchDetailsRsp) error {
	return h.MatchRpcHandler.GetMatchDetails(ctx, in, out)
}

func (h *matchRpcHandler) GetLatestRoundList(ctx context.Context, in *GetLatestRoundListReq, out *GetLatestRoundListRsp) error {
	return h.MatchRpcHandler.GetLatestRoundList(ctx, in, out)
}

// Api Endpoints for Grade service

func NewGradeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Grade service

type GradeService interface {
	// 赛季信息获取
	GetCurSeason(ctx context.Context, in *GetCurSeasonReq, opts ...client.CallOption) (*GetCurSeasonRsp, error)
	// 开启新赛季
	SeasonSettle(ctx context.Context, in *SeasonSettleReq, opts ...client.CallOption) (*SeasonSettleRsp, error)
	// 获取当前比赛结算后，星级变化(段位/星级) 最新段位
	//  rpc GetChangeLog(GetChangeLogReq) returns (GetChangeLogRsp) {}
	// 段位配置
	ListConfig(ctx context.Context, in *ListConfigReq, opts ...client.CallOption) (*ListConfigRsp, error)
	// 段位奖励配置
	ListRewardConfig(ctx context.Context, in *ListRewardConfigReq, opts ...client.CallOption) (*ListRewardConfigRsp, error)
	// 获取段位奖励列表 (领取状态)
	ListRewardStatus(ctx context.Context, in *ListRewardStatusReq, opts ...client.CallOption) (*ListRewardStatusRsp, error)
	// 领取段位奖励
	GetReward(ctx context.Context, in *GetRewardReq, opts ...client.CallOption) (*GetRewardRsp, error)
	// 获取段位排行 （点赞数）
	ListRank(ctx context.Context, in *ListGradeRankReq, opts ...client.CallOption) (*ListGradeRankRsp, error)
	// 点赞(不可为自己点赞)
	Like(ctx context.Context, in *LikeGradeRankReq, opts ...client.CallOption) (*LikeGradeRankRsp, error)
	// 当前点赞记录 (赛季、日期、玩家ID列表)
	TodayLikeRecord(ctx context.Context, in *TodayLikeRecordReq, opts ...client.CallOption) (*TodayLikeRecordRsp, error)
	// 荣誉之旅 历史段位
	ListGradeRecord(ctx context.Context, in *ListGradeRecordReq, opts ...client.CallOption) (*ListGradeRecordRsp, error)
	// 获取玩家段位信息
	GetGrade(ctx context.Context, in *GetGradeReq, opts ...client.CallOption) (*GetGradeRsp, error)
	// 保星(保星卡使用)
	ProtectStar(ctx context.Context, in *ProtectStarReq, opts ...client.CallOption) (*ProtectStarRsp, error)
}

type gradeService struct {
	c    client.Client
	name string
}

func NewGradeService(name string, c client.Client) GradeService {
	return &gradeService{
		c:    c,
		name: name,
	}
}

func (c *gradeService) GetCurSeason(ctx context.Context, in *GetCurSeasonReq, opts ...client.CallOption) (*GetCurSeasonRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.GetCurSeason", in)
	out := new(GetCurSeasonRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) SeasonSettle(ctx context.Context, in *SeasonSettleReq, opts ...client.CallOption) (*SeasonSettleRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.SeasonSettle", in)
	out := new(SeasonSettleRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) ListConfig(ctx context.Context, in *ListConfigReq, opts ...client.CallOption) (*ListConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.ListConfig", in)
	out := new(ListConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) ListRewardConfig(ctx context.Context, in *ListRewardConfigReq, opts ...client.CallOption) (*ListRewardConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.ListRewardConfig", in)
	out := new(ListRewardConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) ListRewardStatus(ctx context.Context, in *ListRewardStatusReq, opts ...client.CallOption) (*ListRewardStatusRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.ListRewardStatus", in)
	out := new(ListRewardStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) GetReward(ctx context.Context, in *GetRewardReq, opts ...client.CallOption) (*GetRewardRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.GetReward", in)
	out := new(GetRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) ListRank(ctx context.Context, in *ListGradeRankReq, opts ...client.CallOption) (*ListGradeRankRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.ListRank", in)
	out := new(ListGradeRankRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) Like(ctx context.Context, in *LikeGradeRankReq, opts ...client.CallOption) (*LikeGradeRankRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.Like", in)
	out := new(LikeGradeRankRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) TodayLikeRecord(ctx context.Context, in *TodayLikeRecordReq, opts ...client.CallOption) (*TodayLikeRecordRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.TodayLikeRecord", in)
	out := new(TodayLikeRecordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) ListGradeRecord(ctx context.Context, in *ListGradeRecordReq, opts ...client.CallOption) (*ListGradeRecordRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.ListGradeRecord", in)
	out := new(ListGradeRecordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) GetGrade(ctx context.Context, in *GetGradeReq, opts ...client.CallOption) (*GetGradeRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.GetGrade", in)
	out := new(GetGradeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeService) ProtectStar(ctx context.Context, in *ProtectStarReq, opts ...client.CallOption) (*ProtectStarRsp, error) {
	req := c.c.NewRequest(c.name, "Grade.ProtectStar", in)
	out := new(ProtectStarRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grade service

type GradeHandler interface {
	// 赛季信息获取
	GetCurSeason(context.Context, *GetCurSeasonReq, *GetCurSeasonRsp) error
	// 开启新赛季
	SeasonSettle(context.Context, *SeasonSettleReq, *SeasonSettleRsp) error
	// 获取当前比赛结算后，星级变化(段位/星级) 最新段位
	//  rpc GetChangeLog(GetChangeLogReq) returns (GetChangeLogRsp) {}
	// 段位配置
	ListConfig(context.Context, *ListConfigReq, *ListConfigRsp) error
	// 段位奖励配置
	ListRewardConfig(context.Context, *ListRewardConfigReq, *ListRewardConfigRsp) error
	// 获取段位奖励列表 (领取状态)
	ListRewardStatus(context.Context, *ListRewardStatusReq, *ListRewardStatusRsp) error
	// 领取段位奖励
	GetReward(context.Context, *GetRewardReq, *GetRewardRsp) error
	// 获取段位排行 （点赞数）
	ListRank(context.Context, *ListGradeRankReq, *ListGradeRankRsp) error
	// 点赞(不可为自己点赞)
	Like(context.Context, *LikeGradeRankReq, *LikeGradeRankRsp) error
	// 当前点赞记录 (赛季、日期、玩家ID列表)
	TodayLikeRecord(context.Context, *TodayLikeRecordReq, *TodayLikeRecordRsp) error
	// 荣誉之旅 历史段位
	ListGradeRecord(context.Context, *ListGradeRecordReq, *ListGradeRecordRsp) error
	// 获取玩家段位信息
	GetGrade(context.Context, *GetGradeReq, *GetGradeRsp) error
	// 保星(保星卡使用)
	ProtectStar(context.Context, *ProtectStarReq, *ProtectStarRsp) error
}

func RegisterGradeHandler(s server.Server, hdlr GradeHandler, opts ...server.HandlerOption) error {
	type grade interface {
		GetCurSeason(ctx context.Context, in *GetCurSeasonReq, out *GetCurSeasonRsp) error
		SeasonSettle(ctx context.Context, in *SeasonSettleReq, out *SeasonSettleRsp) error
		ListConfig(ctx context.Context, in *ListConfigReq, out *ListConfigRsp) error
		ListRewardConfig(ctx context.Context, in *ListRewardConfigReq, out *ListRewardConfigRsp) error
		ListRewardStatus(ctx context.Context, in *ListRewardStatusReq, out *ListRewardStatusRsp) error
		GetReward(ctx context.Context, in *GetRewardReq, out *GetRewardRsp) error
		ListRank(ctx context.Context, in *ListGradeRankReq, out *ListGradeRankRsp) error
		Like(ctx context.Context, in *LikeGradeRankReq, out *LikeGradeRankRsp) error
		TodayLikeRecord(ctx context.Context, in *TodayLikeRecordReq, out *TodayLikeRecordRsp) error
		ListGradeRecord(ctx context.Context, in *ListGradeRecordReq, out *ListGradeRecordRsp) error
		GetGrade(ctx context.Context, in *GetGradeReq, out *GetGradeRsp) error
		ProtectStar(ctx context.Context, in *ProtectStarReq, out *ProtectStarRsp) error
	}
	type Grade struct {
		grade
	}
	h := &gradeHandler{hdlr}
	return s.Handle(s.NewHandler(&Grade{h}, opts...))
}

type gradeHandler struct {
	GradeHandler
}

func (h *gradeHandler) GetCurSeason(ctx context.Context, in *GetCurSeasonReq, out *GetCurSeasonRsp) error {
	return h.GradeHandler.GetCurSeason(ctx, in, out)
}

func (h *gradeHandler) SeasonSettle(ctx context.Context, in *SeasonSettleReq, out *SeasonSettleRsp) error {
	return h.GradeHandler.SeasonSettle(ctx, in, out)
}

func (h *gradeHandler) ListConfig(ctx context.Context, in *ListConfigReq, out *ListConfigRsp) error {
	return h.GradeHandler.ListConfig(ctx, in, out)
}

func (h *gradeHandler) ListRewardConfig(ctx context.Context, in *ListRewardConfigReq, out *ListRewardConfigRsp) error {
	return h.GradeHandler.ListRewardConfig(ctx, in, out)
}

func (h *gradeHandler) ListRewardStatus(ctx context.Context, in *ListRewardStatusReq, out *ListRewardStatusRsp) error {
	return h.GradeHandler.ListRewardStatus(ctx, in, out)
}

func (h *gradeHandler) GetReward(ctx context.Context, in *GetRewardReq, out *GetRewardRsp) error {
	return h.GradeHandler.GetReward(ctx, in, out)
}

func (h *gradeHandler) ListRank(ctx context.Context, in *ListGradeRankReq, out *ListGradeRankRsp) error {
	return h.GradeHandler.ListRank(ctx, in, out)
}

func (h *gradeHandler) Like(ctx context.Context, in *LikeGradeRankReq, out *LikeGradeRankRsp) error {
	return h.GradeHandler.Like(ctx, in, out)
}

func (h *gradeHandler) TodayLikeRecord(ctx context.Context, in *TodayLikeRecordReq, out *TodayLikeRecordRsp) error {
	return h.GradeHandler.TodayLikeRecord(ctx, in, out)
}

func (h *gradeHandler) ListGradeRecord(ctx context.Context, in *ListGradeRecordReq, out *ListGradeRecordRsp) error {
	return h.GradeHandler.ListGradeRecord(ctx, in, out)
}

func (h *gradeHandler) GetGrade(ctx context.Context, in *GetGradeReq, out *GetGradeRsp) error {
	return h.GradeHandler.GetGrade(ctx, in, out)
}

func (h *gradeHandler) ProtectStar(ctx context.Context, in *ProtectStarReq, out *ProtectStarRsp) error {
	return h.GradeHandler.ProtectStar(ctx, in, out)
}
