// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: proto/match.proto

package match

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MatchStatus int32

const (
	MatchStatus_Waiting  MatchStatus = 0 // 等待对手完成
	MatchStatus_Ready    MatchStatus = 1 // 未完成
	MatchStatus_Closed   MatchStatus = 2 // 已终止
	MatchStatus_Finished MatchStatus = 3 // 已完成
)

// Enum value maps for MatchStatus.
var (
	MatchStatus_name = map[int32]string{
		0: "Waiting",
		1: "Ready",
		2: "Closed",
		3: "Finished",
	}
	MatchStatus_value = map[string]int32{
		"Waiting":  0,
		"Ready":    1,
		"Closed":   2,
		"Finished": 3,
	}
)

func (x MatchStatus) Enum() *MatchStatus {
	p := new(MatchStatus)
	*p = x
	return p
}

func (x MatchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[0].Descriptor()
}

func (MatchStatus) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[0]
}

func (x MatchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchStatus.Descriptor instead.
func (MatchStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{0}
}

type ConfirmOp int32

const (
	ConfirmOp_Cancel    ConfirmOp = 0
	ConfirmOp_Confirmed ConfirmOp = 1
)

// Enum value maps for ConfirmOp.
var (
	ConfirmOp_name = map[int32]string{
		0: "Cancel",
		1: "Confirmed",
	}
	ConfirmOp_value = map[string]int32{
		"Cancel":    0,
		"Confirmed": 1,
	}
)

func (x ConfirmOp) Enum() *ConfirmOp {
	p := new(ConfirmOp)
	*p = x
	return p
}

func (x ConfirmOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfirmOp) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[1].Descriptor()
}

func (ConfirmOp) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[1]
}

func (x ConfirmOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfirmOp.Descriptor instead.
func (ConfirmOp) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{1}
}

//message MatchCandidatesNot {
//  string match_cid = 1; // 比赛配置ID
//  repeated string uid_list = 2; // 候选对手列表
//}
type SubmitScoreType int32

const (
	SubmitScoreType_SBT_GAME_OVER    SubmitScoreType = 0 // 游戏结束并提交成绩
	SubmitScoreType_SBT_GAME_ABORT   SubmitScoreType = 1 // 中止游戏
	SubmitScoreType_SBT_SUBMIT_SCORE SubmitScoreType = 2 // 提交分数
	SubmitScoreType_SBT_GAME_FINISH  SubmitScoreType = 3 //  结束游戏
)

// Enum value maps for SubmitScoreType.
var (
	SubmitScoreType_name = map[int32]string{
		0: "SBT_GAME_OVER",
		1: "SBT_GAME_ABORT",
		2: "SBT_SUBMIT_SCORE",
		3: "SBT_GAME_FINISH",
	}
	SubmitScoreType_value = map[string]int32{
		"SBT_GAME_OVER":    0,
		"SBT_GAME_ABORT":   1,
		"SBT_SUBMIT_SCORE": 2,
		"SBT_GAME_FINISH":  3,
	}
)

func (x SubmitScoreType) Enum() *SubmitScoreType {
	p := new(SubmitScoreType)
	*p = x
	return p
}

func (x SubmitScoreType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitScoreType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[2].Descriptor()
}

func (SubmitScoreType) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[2]
}

func (x SubmitScoreType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitScoreType.Descriptor instead.
func (SubmitScoreType) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{2}
}

type LeagueType int32

const (
	LeagueType_LeagueTypePractice     LeagueType = 0
	LeagueType_LeagueTypeProfessional LeagueType = 1
)

// Enum value maps for LeagueType.
var (
	LeagueType_name = map[int32]string{
		0: "LeagueTypePractice",
		1: "LeagueTypeProfessional",
	}
	LeagueType_value = map[string]int32{
		"LeagueTypePractice":     0,
		"LeagueTypeProfessional": 1,
	}
)

func (x LeagueType) Enum() *LeagueType {
	p := new(LeagueType)
	*p = x
	return p
}

func (x LeagueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeagueType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[3].Descriptor()
}

func (LeagueType) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[3]
}

func (x LeagueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeagueType.Descriptor instead.
func (LeagueType) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{3}
}

type MatchType int32

const (
	MatchType_MatchTypeInvalid  MatchType = 0
	MatchType_MatchTypePractice MatchType = 1 // 练习赛
	MatchType_MatchTypeVS       MatchType = 2 // 对战赛
	MatchType_MatchTypeChampion MatchType = 3 // 锦标赛
	MatchType_MatchTypeActivity MatchType = 4 // 活动赛
	MatchType_MatchTypeMutil    MatchType = 5 // 多人赛
	MatchType_MatchTypeRealTime MatchType = 6 // 实时赛
)

// Enum value maps for MatchType.
var (
	MatchType_name = map[int32]string{
		0: "MatchTypeInvalid",
		1: "MatchTypePractice",
		2: "MatchTypeVS",
		3: "MatchTypeChampion",
		4: "MatchTypeActivity",
		5: "MatchTypeMutil",
		6: "MatchTypeRealTime",
	}
	MatchType_value = map[string]int32{
		"MatchTypeInvalid":  0,
		"MatchTypePractice": 1,
		"MatchTypeVS":       2,
		"MatchTypeChampion": 3,
		"MatchTypeActivity": 4,
		"MatchTypeMutil":    5,
		"MatchTypeRealTime": 6,
	}
)

func (x MatchType) Enum() *MatchType {
	p := new(MatchType)
	*p = x
	return p
}

func (x MatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[4].Descriptor()
}

func (MatchType) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[4]
}

func (x MatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchType.Descriptor instead.
func (MatchType) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{4}
}

type Item_Type int32

const (
	Item_Platform Item_Type = 0 // 平台道具
	Item_Game     Item_Type = 1 // 游戏道具
)

// Enum value maps for Item_Type.
var (
	Item_Type_name = map[int32]string{
		0: "Platform",
		1: "Game",
	}
	Item_Type_value = map[string]int32{
		"Platform": 0,
		"Game":     1,
	}
)

func (x Item_Type) Enum() *Item_Type {
	p := new(Item_Type)
	*p = x
	return p
}

func (x Item_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Item_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[5].Descriptor()
}

func (Item_Type) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[5]
}

func (x Item_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Item_Type.Descriptor instead.
func (Item_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{63, 0}
}

type GetCurLeagueReq_Type int32

const (
	GetCurLeagueReq_PRACTICE     GetCurLeagueReq_Type = 0 // 练习赛
	GetCurLeagueReq_PROFESSIONAL GetCurLeagueReq_Type = 1 // 专业联赛
)

// Enum value maps for GetCurLeagueReq_Type.
var (
	GetCurLeagueReq_Type_name = map[int32]string{
		0: "PRACTICE",
		1: "PROFESSIONAL",
	}
	GetCurLeagueReq_Type_value = map[string]int32{
		"PRACTICE":     0,
		"PROFESSIONAL": 1,
	}
)

func (x GetCurLeagueReq_Type) Enum() *GetCurLeagueReq_Type {
	p := new(GetCurLeagueReq_Type)
	*p = x
	return p
}

func (x GetCurLeagueReq_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCurLeagueReq_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[6].Descriptor()
}

func (GetCurLeagueReq_Type) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[6]
}

func (x GetCurLeagueReq_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCurLeagueReq_Type.Descriptor instead.
func (GetCurLeagueReq_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{70, 0}
}

type AcceptedInviteNot_OpCode int32

const (
	AcceptedInviteNot_OP_REFUSE AcceptedInviteNot_OpCode = 0 // 拒绝
	AcceptedInviteNot_OP_ACCEPT AcceptedInviteNot_OpCode = 1 // 接受
)

// Enum value maps for AcceptedInviteNot_OpCode.
var (
	AcceptedInviteNot_OpCode_name = map[int32]string{
		0: "OP_REFUSE",
		1: "OP_ACCEPT",
	}
	AcceptedInviteNot_OpCode_value = map[string]int32{
		"OP_REFUSE": 0,
		"OP_ACCEPT": 1,
	}
)

func (x AcceptedInviteNot_OpCode) Enum() *AcceptedInviteNot_OpCode {
	p := new(AcceptedInviteNot_OpCode)
	*p = x
	return p
}

func (x AcceptedInviteNot_OpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptedInviteNot_OpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[7].Descriptor()
}

func (AcceptedInviteNot_OpCode) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[7]
}

func (x AcceptedInviteNot_OpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptedInviteNot_OpCode.Descriptor instead.
func (AcceptedInviteNot_OpCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{114, 0}
}

type AcceptedInviteReq_OpCode int32

const (
	AcceptedInviteReq_OP_REFUSE AcceptedInviteReq_OpCode = 0 // 拒绝
	AcceptedInviteReq_OP_ACCEPT AcceptedInviteReq_OpCode = 1 // 接受
)

// Enum value maps for AcceptedInviteReq_OpCode.
var (
	AcceptedInviteReq_OpCode_name = map[int32]string{
		0: "OP_REFUSE",
		1: "OP_ACCEPT",
	}
	AcceptedInviteReq_OpCode_value = map[string]int32{
		"OP_REFUSE": 0,
		"OP_ACCEPT": 1,
	}
)

func (x AcceptedInviteReq_OpCode) Enum() *AcceptedInviteReq_OpCode {
	p := new(AcceptedInviteReq_OpCode)
	*p = x
	return p
}

func (x AcceptedInviteReq_OpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcceptedInviteReq_OpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_match_proto_enumTypes[8].Descriptor()
}

func (AcceptedInviteReq_OpCode) Type() protoreflect.EnumType {
	return &file_proto_match_proto_enumTypes[8]
}

func (x AcceptedInviteReq_OpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcceptedInviteReq_OpCode.Descriptor instead.
func (AcceptedInviteReq_OpCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{115, 0}
}

// 赛季信息
type GetCurSeasonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
}

func (x *GetCurSeasonReq) Reset() {
	*x = GetCurSeasonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurSeasonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurSeasonReq) ProtoMessage() {}

func (x *GetCurSeasonReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurSeasonReq.ProtoReflect.Descriptor instead.
func (*GetCurSeasonReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{0}
}

func (x *GetCurSeasonReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

// 获取段位信息(当前赛季)
type GetCurSeasonRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurSeasonId string        `protobuf:"bytes,1,opt,name=cur_season_id,json=curSeasonId,proto3" json:"cur_season_id,omitempty"` // 赛季标识
	BeginTime   int64         `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`        // 赛季开始时间
	StopTime    int64         `protobuf:"varint,3,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`           // 赛季结束时间
	Grade       *GradeData    `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"`                                  // 段位信息
	Rank        int32         `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`                                   // 当前排名
	RankMax     int32         `protobuf:"varint,6,opt,name=rank_max,json=rankMax,proto3" json:"rank_max,omitempty"`              // 总排名   (总排名 - 当前排名 ) / 总排名
	LastSettle  *SeasonSettle `protobuf:"bytes,10,opt,name=last_settle,json=lastSettle,proto3" json:"last_settle,omitempty"`     // 上一赛赛季结算信息. 如果玩家无未结算的，则为空
	Err         string        `protobuf:"bytes,11,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetCurSeasonRsp) Reset() {
	*x = GetCurSeasonRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurSeasonRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurSeasonRsp) ProtoMessage() {}

func (x *GetCurSeasonRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurSeasonRsp.ProtoReflect.Descriptor instead.
func (*GetCurSeasonRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{1}
}

func (x *GetCurSeasonRsp) GetCurSeasonId() string {
	if x != nil {
		return x.CurSeasonId
	}
	return ""
}

func (x *GetCurSeasonRsp) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *GetCurSeasonRsp) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *GetCurSeasonRsp) GetGrade() *GradeData {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *GetCurSeasonRsp) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetCurSeasonRsp) GetRankMax() int32 {
	if x != nil {
		return x.RankMax
	}
	return 0
}

func (x *GetCurSeasonRsp) GetLastSettle() *SeasonSettle {
	if x != nil {
		return x.LastSettle
	}
	return nil
}

func (x *GetCurSeasonRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type SeasonSettle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId  string     `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`     // 赛季标识
	Grade     *GradeData `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`                           // 段位信息
	AwardList []*Item    `protobuf:"bytes,6,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`  // 赛季奖励
	StartTime int64      `protobuf:"varint,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始时间
	StopTime  int64      `protobuf:"varint,8,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`    // 结束时间
}

func (x *SeasonSettle) Reset() {
	*x = SeasonSettle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonSettle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonSettle) ProtoMessage() {}

func (x *SeasonSettle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonSettle.ProtoReflect.Descriptor instead.
func (*SeasonSettle) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{2}
}

func (x *SeasonSettle) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *SeasonSettle) GetGrade() *GradeData {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *SeasonSettle) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

func (x *SeasonSettle) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *SeasonSettle) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

type GetChangeLogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *GetChangeLogReq) Reset() {
	*x = GetChangeLogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangeLogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangeLogReq) ProtoMessage() {}

func (x *GetChangeLogReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangeLogReq.ProtoReflect.Descriptor instead.
func (*GetChangeLogReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{3}
}

func (x *GetChangeLogReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

// 星级变化(段位/星级) 最新段位
type GetChangeLogRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before    *GradeData `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`                        // 变化前段位
	After     *GradeData `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`                          // 变化前段位
	AwardList []*Item    `protobuf:"bytes,3,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"` // 段位奖励
	Err       string     `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetChangeLogRsp) Reset() {
	*x = GetChangeLogRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangeLogRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangeLogRsp) ProtoMessage() {}

func (x *GetChangeLogRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangeLogRsp.ProtoReflect.Descriptor instead.
func (*GetChangeLogRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{4}
}

func (x *GetChangeLogRsp) GetBefore() *GradeData {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *GetChangeLogRsp) GetAfter() *GradeData {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *GetChangeLogRsp) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

func (x *GetChangeLogRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ListConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConfigReq) Reset() {
	*x = ListConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigReq) ProtoMessage() {}

func (x *ListConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigReq.ProtoReflect.Descriptor instead.
func (*ListConfigReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{5}
}

// 段位配置
type GradeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major   int32  `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`                    // 大段位
	Minor   int32  `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`                    // 小段位
	MaxStar int32  `protobuf:"varint,3,opt,name=max_star,json=maxStar,proto3" json:"max_star,omitempty"` // 当前小段位最大星数
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                       // 段位名称
	Icon    string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`                       // 段位icon
	Level   int32  `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`                    // 段位等级，从1开始连续
}

func (x *GradeConfig) Reset() {
	*x = GradeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeConfig) ProtoMessage() {}

func (x *GradeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeConfig.ProtoReflect.Descriptor instead.
func (*GradeConfig) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{6}
}

func (x *GradeConfig) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *GradeConfig) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *GradeConfig) GetMaxStar() int32 {
	if x != nil {
		return x.MaxStar
	}
	return 0
}

func (x *GradeConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GradeConfig) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GradeConfig) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ListConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err    string         `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Grades []*GradeConfig `protobuf:"bytes,2,rep,name=grades,proto3" json:"grades,omitempty"`
}

func (x *ListConfigRsp) Reset() {
	*x = ListConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigRsp) ProtoMessage() {}

func (x *ListConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigRsp.ProtoReflect.Descriptor instead.
func (*ListConfigRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{7}
}

func (x *ListConfigRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ListConfigRsp) GetGrades() []*GradeConfig {
	if x != nil {
		return x.Grades
	}
	return nil
}

type ListRewardConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRewardConfigReq) Reset() {
	*x = ListRewardConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardConfigReq) ProtoMessage() {}

func (x *ListRewardConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardConfigReq.ProtoReflect.Descriptor instead.
func (*ListRewardConfigReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{8}
}

type ListRewardConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string                           `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	AwardList []*ListRewardConfigRsp_AwardInfo `protobuf:"bytes,2,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"` // 奖励列表
}

func (x *ListRewardConfigRsp) Reset() {
	*x = ListRewardConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardConfigRsp) ProtoMessage() {}

func (x *ListRewardConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardConfigRsp.ProtoReflect.Descriptor instead.
func (*ListRewardConfigRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{9}
}

func (x *ListRewardConfigRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ListRewardConfigRsp) GetAwardList() []*ListRewardConfigRsp_AwardInfo {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type ListRewardStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRewardStatusReq) Reset() {
	*x = ListRewardStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardStatusReq) ProtoMessage() {}

func (x *ListRewardStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardStatusReq.ProtoReflect.Descriptor instead.
func (*ListRewardStatusReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{10}
}

type ListRewardStatusRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string                             `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	StatusList []*ListRewardStatusRsp_AwardStatus `protobuf:"bytes,2,rep,name=status_list,json=statusList,proto3" json:"status_list,omitempty"`
}

func (x *ListRewardStatusRsp) Reset() {
	*x = ListRewardStatusRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardStatusRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardStatusRsp) ProtoMessage() {}

func (x *ListRewardStatusRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardStatusRsp.ProtoReflect.Descriptor instead.
func (*ListRewardStatusRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{11}
}

func (x *ListRewardStatusRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ListRewardStatusRsp) GetStatusList() []*ListRewardStatusRsp_AwardStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

type GetRewardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardId int32 `protobuf:"varint,1,opt,name=award_id,json=awardId,proto3" json:"award_id,omitempty"`
}

func (x *GetRewardReq) Reset() {
	*x = GetRewardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardReq) ProtoMessage() {}

func (x *GetRewardReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardReq.ProtoReflect.Descriptor instead.
func (*GetRewardReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{12}
}

func (x *GetRewardReq) GetAwardId() int32 {
	if x != nil {
		return x.AwardId
	}
	return 0
}

type GetRewardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string  `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	AwardList []*Item `protobuf:"bytes,2,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"` // 奖励列表
}

func (x *GetRewardRsp) Reset() {
	*x = GetRewardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardRsp) ProtoMessage() {}

func (x *GetRewardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardRsp.ProtoReflect.Descriptor instead.
func (*GetRewardRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{13}
}

func (x *GetRewardRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetRewardRsp) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type ListGradeRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId string `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	Start    int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"` // 开始名次
	End      int32  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`     // 结束名次
}

func (x *ListGradeRankReq) Reset() {
	*x = ListGradeRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGradeRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGradeRankReq) ProtoMessage() {}

func (x *ListGradeRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGradeRankReq.ProtoReflect.Descriptor instead.
func (*ListGradeRankReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{14}
}

func (x *ListGradeRankReq) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *ListGradeRankReq) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ListGradeRankReq) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type GradeRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      int32      `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Grade     *GradeData `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
	LikeStar  int32      `protobuf:"varint,5,opt,name=like_star,json=likeStar,proto3" json:"like_star,omitempty"` // 点赞次数
	Openid    string     `protobuf:"bytes,6,opt,name=openid,proto3" json:"openid,omitempty"`
	Nickname  string     `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`
	HeadImage string     `protobuf:"bytes,8,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`
	Props     []*Item    `protobuf:"bytes,9,rep,name=props,proto3" json:"props,omitempty"` // 玩家展示道具
}

func (x *GradeRank) Reset() {
	*x = GradeRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeRank) ProtoMessage() {}

func (x *GradeRank) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeRank.ProtoReflect.Descriptor instead.
func (*GradeRank) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{15}
}

func (x *GradeRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GradeRank) GetGrade() *GradeData {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *GradeRank) GetLikeStar() int32 {
	if x != nil {
		return x.LikeStar
	}
	return 0
}

func (x *GradeRank) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GradeRank) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *GradeRank) GetHeadImage() string {
	if x != nil {
		return x.HeadImage
	}
	return ""
}

func (x *GradeRank) GetProps() []*Item {
	if x != nil {
		return x.Props
	}
	return nil
}

type ListGradeRankRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err      string       `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	SeasonId string       `protobuf:"bytes,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	MyRank   *GradeRank   `protobuf:"bytes,3,opt,name=my_rank,json=myRank,proto3" json:"my_rank,omitempty"`
	List     []*GradeRank `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ListGradeRankRsp) Reset() {
	*x = ListGradeRankRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGradeRankRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGradeRankRsp) ProtoMessage() {}

func (x *ListGradeRankRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGradeRankRsp.ProtoReflect.Descriptor instead.
func (*ListGradeRankRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{16}
}

func (x *ListGradeRankRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ListGradeRankRsp) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *ListGradeRankRsp) GetMyRank() *GradeRank {
	if x != nil {
		return x.MyRank
	}
	return nil
}

func (x *ListGradeRankRsp) GetList() []*GradeRank {
	if x != nil {
		return x.List
	}
	return nil
}

type LikeGradeRankReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId string `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	Openid   string `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
}

func (x *LikeGradeRankReq) Reset() {
	*x = LikeGradeRankReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeGradeRankReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeGradeRankReq) ProtoMessage() {}

func (x *LikeGradeRankReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeGradeRankReq.ProtoReflect.Descriptor instead.
func (*LikeGradeRankReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{17}
}

func (x *LikeGradeRankReq) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *LikeGradeRankReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

type LikeGradeRankRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	SurplusNum int32  `protobuf:"varint,2,opt,name=surplus_num,json=surplusNum,proto3" json:"surplus_num,omitempty"` // 剩余点赞次数
}

func (x *LikeGradeRankRsp) Reset() {
	*x = LikeGradeRankRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeGradeRankRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeGradeRankRsp) ProtoMessage() {}

func (x *LikeGradeRankRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeGradeRankRsp.ProtoReflect.Descriptor instead.
func (*LikeGradeRankRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{18}
}

func (x *LikeGradeRankRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *LikeGradeRankRsp) GetSurplusNum() int32 {
	if x != nil {
		return x.SurplusNum
	}
	return 0
}

type TodayLikeRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TodayLikeRecordReq) Reset() {
	*x = TodayLikeRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodayLikeRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodayLikeRecordReq) ProtoMessage() {}

func (x *TodayLikeRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodayLikeRecordReq.ProtoReflect.Descriptor instead.
func (*TodayLikeRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{19}
}

type TodayLikeRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err          string                       `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	LikeTimes    int32                        `protobuf:"varint,2,opt,name=like_times,json=likeTimes,proto3" json:"like_times,omitempty"`            // 已点次数
	MaxLikeTimes int32                        `protobuf:"varint,3,opt,name=max_like_times,json=maxLikeTimes,proto3" json:"max_like_times,omitempty"` // 最大点赞次数
	Records      []*TodayLikeRecordRsp_Record `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty"`                                  // 点赞记录
}

func (x *TodayLikeRecordRsp) Reset() {
	*x = TodayLikeRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodayLikeRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodayLikeRecordRsp) ProtoMessage() {}

func (x *TodayLikeRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodayLikeRecordRsp.ProtoReflect.Descriptor instead.
func (*TodayLikeRecordRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{20}
}

func (x *TodayLikeRecordRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *TodayLikeRecordRsp) GetLikeTimes() int32 {
	if x != nil {
		return x.LikeTimes
	}
	return 0
}

func (x *TodayLikeRecordRsp) GetMaxLikeTimes() int32 {
	if x != nil {
		return x.MaxLikeTimes
	}
	return 0
}

func (x *TodayLikeRecordRsp) GetRecords() []*TodayLikeRecordRsp_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type SeasonSettleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SeasonSettleReq) Reset() {
	*x = SeasonSettleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonSettleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonSettleReq) ProtoMessage() {}

func (x *SeasonSettleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonSettleReq.ProtoReflect.Descriptor instead.
func (*SeasonSettleReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{21}
}

type SeasonSettleRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string  `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	AwardList []*Item `protobuf:"bytes,6,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"` // 赛季奖励
}

func (x *SeasonSettleRsp) Reset() {
	*x = SeasonSettleRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeasonSettleRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonSettleRsp) ProtoMessage() {}

func (x *SeasonSettleRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonSettleRsp.ProtoReflect.Descriptor instead.
func (*SeasonSettleRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{22}
}

func (x *SeasonSettleRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SeasonSettleRsp) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

// 段位信息
type GetGradeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId string `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	Openid   string `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
}

func (x *GetGradeReq) Reset() {
	*x = GetGradeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGradeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGradeReq) ProtoMessage() {}

func (x *GetGradeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGradeReq.ProtoReflect.Descriptor instead.
func (*GetGradeReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{23}
}

func (x *GetGradeReq) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *GetGradeReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

type GradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major int32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor int32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
	Star  int32 `protobuf:"varint,3,opt,name=star,proto3" json:"star,omitempty"`
}

func (x *GradeData) Reset() {
	*x = GradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeData) ProtoMessage() {}

func (x *GradeData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeData.ProtoReflect.Descriptor instead.
func (*GradeData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{24}
}

func (x *GradeData) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *GradeData) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *GradeData) GetStar() int32 {
	if x != nil {
		return x.Star
	}
	return 0
}

//(最终段位/最高段位 总局数 胜率 最高连胜 开始结束日期) 当前赛季标识
type GetGradeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId        string     `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	StartTime       int64      `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                       // 开始时间
	StopTime        int64      `protobuf:"varint,3,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`                          // 结束时间
	Grade           *GradeData `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"`                                                 //最终段位
	MaxGrade        *GradeData `protobuf:"bytes,5,opt,name=max_grade,json=maxGrade,proto3" json:"max_grade,omitempty"`                           // 最高段位
	TotalCnt        int32      `protobuf:"varint,6,opt,name=total_cnt,json=totalCnt,proto3" json:"total_cnt,omitempty"`                          //总局数
	WinCnt          int32      `protobuf:"varint,7,opt,name=win_cnt,json=winCnt,proto3" json:"win_cnt,omitempty"`                                // 比赛胜利次数
	MaxWinStreakCnt int32      `protobuf:"varint,8,opt,name=max_win_streak_cnt,json=maxWinStreakCnt,proto3" json:"max_win_streak_cnt,omitempty"` // 最高连胜
	Err             string     `protobuf:"bytes,9,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetGradeRsp) Reset() {
	*x = GetGradeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGradeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGradeRsp) ProtoMessage() {}

func (x *GetGradeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGradeRsp.ProtoReflect.Descriptor instead.
func (*GetGradeRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{25}
}

func (x *GetGradeRsp) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *GetGradeRsp) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *GetGradeRsp) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *GetGradeRsp) GetGrade() *GradeData {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *GetGradeRsp) GetMaxGrade() *GradeData {
	if x != nil {
		return x.MaxGrade
	}
	return nil
}

func (x *GetGradeRsp) GetTotalCnt() int32 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

func (x *GetGradeRsp) GetWinCnt() int32 {
	if x != nil {
		return x.WinCnt
	}
	return 0
}

func (x *GetGradeRsp) GetMaxWinStreakCnt() int32 {
	if x != nil {
		return x.MaxWinStreakCnt
	}
	return 0
}

func (x *GetGradeRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ListGradeRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"` // 起始页
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`     // 每页次数
}

func (x *ListGradeRecordReq) Reset() {
	*x = ListGradeRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGradeRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGradeRecordReq) ProtoMessage() {}

func (x *ListGradeRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGradeRecordReq.ProtoReflect.Descriptor instead.
func (*ListGradeRecordReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{26}
}

func (x *ListGradeRecordReq) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ListGradeRecordReq) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ListGradeRecordRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err     string                       `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Records []*ListGradeRecordRsp_Record `protobuf:"bytes,2,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *ListGradeRecordRsp) Reset() {
	*x = ListGradeRecordRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGradeRecordRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGradeRecordRsp) ProtoMessage() {}

func (x *ListGradeRecordRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGradeRecordRsp.ProtoReflect.Descriptor instead.
func (*ListGradeRecordRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{27}
}

func (x *ListGradeRecordRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ListGradeRecordRsp) GetRecords() []*ListGradeRecordRsp_Record {
	if x != nil {
		return x.Records
	}
	return nil
}

type ProtectStarReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProtectStarReq) Reset() {
	*x = ProtectStarReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectStarReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectStarReq) ProtoMessage() {}

func (x *ProtectStarReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectStarReq.ProtoReflect.Descriptor instead.
func (*ProtectStarReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{28}
}

type ProtectStarRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   string     `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Grade *GradeData `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"` // 最新段位信息
}

func (x *ProtectStarRsp) Reset() {
	*x = ProtectStarRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectStarRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectStarRsp) ProtoMessage() {}

func (x *ProtectStarRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectStarRsp.ProtoReflect.Descriptor instead.
func (*ProtectStarRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{29}
}

func (x *ProtectStarRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ProtectStarRsp) GetGrade() *GradeData {
	if x != nil {
		return x.Grade
	}
	return nil
}

type GetMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *GetMatchReq) Reset() {
	*x = GetMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchReq) ProtoMessage() {}

func (x *GetMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchReq.ProtoReflect.Descriptor instead.
func (*GetMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{30}
}

func (x *GetMatchReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type GetMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err          string                `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	MatchType    int32                 `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	Status       int32                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // 当前比赛状态 0进行中 1已完成
	Rounds       map[string]*RoundData `protobuf:"bytes,4,rep,name=rounds,proto3" json:"rounds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stages       []*StageData          `protobuf:"bytes,5,rep,name=stages,proto3" json:"stages,omitempty"`
	PlyStatus    int32                 `protobuf:"varint,6,opt,name=ply_status,json=plyStatus,proto3" json:"ply_status,omitempty"`
	CurrentRound string                `protobuf:"bytes,7,opt,name=current_round,json=currentRound,proto3" json:"current_round,omitempty"`
	CurrentStage int32                 `protobuf:"varint,8,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"`
	Labels       []string              `protobuf:"bytes,9,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetMatchRsp) Reset() {
	*x = GetMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchRsp) ProtoMessage() {}

func (x *GetMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchRsp.ProtoReflect.Descriptor instead.
func (*GetMatchRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{31}
}

func (x *GetMatchRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetMatchRsp) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *GetMatchRsp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetMatchRsp) GetRounds() map[string]*RoundData {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *GetMatchRsp) GetStages() []*StageData {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *GetMatchRsp) GetPlyStatus() int32 {
	if x != nil {
		return x.PlyStatus
	}
	return 0
}

func (x *GetMatchRsp) GetCurrentRound() string {
	if x != nil {
		return x.CurrentRound
	}
	return ""
}

func (x *GetMatchRsp) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *GetMatchRsp) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type BattleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid        string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Score         int64  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Status        int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                    // 玩家状态 0正在游戏 1已完成 2已终止
	UpdateTime    int64  `protobuf:"varint,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`          // 数据变更时间
	RebattleScore int64  `protobuf:"varint,5,opt,name=rebattle_score,json=rebattleScore,proto3" json:"rebattle_score,omitempty"` // 平局时分数
	Rank          int32  `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`                                        // 排名
}

func (x *BattleInfo) Reset() {
	*x = BattleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleInfo) ProtoMessage() {}

func (x *BattleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleInfo.ProtoReflect.Descriptor instead.
func (*BattleInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{32}
}

func (x *BattleInfo) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *BattleInfo) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BattleInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BattleInfo) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *BattleInfo) GetRebattleScore() int64 {
	if x != nil {
		return x.RebattleScore
	}
	return 0
}

func (x *BattleInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type RoundData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId    string        `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Vs         []*BattleInfo `protobuf:"bytes,2,rep,name=vs,proto3" json:"vs,omitempty"`
	Winner     string        `protobuf:"bytes,3,opt,name=winner,proto3" json:"winner,omitempty"`
	ExpireAt   int64         `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"` // 终止时间
	GamingTime int64         `protobuf:"varint,5,opt,name=gaming_time,json=gamingTime,proto3" json:"gaming_time,omitempty"`
	RoomInfo   *RoomInfo     `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`  // 比赛房间
	RandSeed   int64         `protobuf:"varint,7,opt,name=rand_seed,json=randSeed,proto3" json:"rand_seed,omitempty"` // 随机种子
	Metadata   string        `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RoundData) Reset() {
	*x = RoundData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundData) ProtoMessage() {}

func (x *RoundData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundData.ProtoReflect.Descriptor instead.
func (*RoundData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{33}
}

func (x *RoundData) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *RoundData) GetVs() []*BattleInfo {
	if x != nil {
		return x.Vs
	}
	return nil
}

func (x *RoundData) GetWinner() string {
	if x != nil {
		return x.Winner
	}
	return ""
}

func (x *RoundData) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *RoundData) GetGamingTime() int64 {
	if x != nil {
		return x.GamingTime
	}
	return 0
}

func (x *RoundData) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *RoundData) GetRandSeed() int64 {
	if x != nil {
		return x.RandSeed
	}
	return 0
}

func (x *RoundData) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type StageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	RoundList []string `protobuf:"bytes,2,rep,name=round_list,json=roundList,proto3" json:"round_list,omitempty"`
}

func (x *StageData) Reset() {
	*x = StageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageData) ProtoMessage() {}

func (x *StageData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageData.ProtoReflect.Descriptor instead.
func (*StageData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{34}
}

func (x *StageData) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *StageData) GetRoundList() []string {
	if x != nil {
		return x.RoundList
	}
	return nil
}

type GetMatchAwardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *GetMatchAwardReq) Reset() {
	*x = GetMatchAwardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchAwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchAwardReq) ProtoMessage() {}

func (x *GetMatchAwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchAwardReq.ProtoReflect.Descriptor instead.
func (*GetMatchAwardReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{35}
}

func (x *GetMatchAwardReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type GetMatchAwardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string          `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Awards     map[int32]int64 `protobuf:"bytes,2,rep,name=awards,proto3" json:"awards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 奖励列表
	StatusCode int32           `protobuf:"varint,3,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`                                                                // 错误码
}

func (x *GetMatchAwardRsp) Reset() {
	*x = GetMatchAwardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchAwardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchAwardRsp) ProtoMessage() {}

func (x *GetMatchAwardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchAwardRsp.ProtoReflect.Descriptor instead.
func (*GetMatchAwardRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{36}
}

func (x *GetMatchAwardRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetMatchAwardRsp) GetAwards() map[int32]int64 {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *GetMatchAwardRsp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type GetInProgressListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetInProgressListReq) Reset() {
	*x = GetInProgressListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInProgressListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInProgressListReq) ProtoMessage() {}

func (x *GetInProgressListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInProgressListReq.ProtoReflect.Descriptor instead.
func (*GetInProgressListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{37}
}

type BattleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid        string  `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Score         int64   `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Status        int32   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Rank          int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                                        // 当前排名
	Win           bool    `protobuf:"varint,5,opt,name=win,proto3" json:"win,omitempty"`                                          //胜利、失败
	HeadImage     string  `protobuf:"bytes,6,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`              // 头像
	Nickname      string  `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`                                 // 昵称
	AreaInfo      string  `protobuf:"bytes,8,opt,name=area_info,json=areaInfo,proto3" json:"area_info,omitempty"`                 // 区域位置
	RebattleScore int64   `protobuf:"varint,9,opt,name=rebattle_score,json=rebattleScore,proto3" json:"rebattle_score,omitempty"` // 平局时分数
	Props         []*Item `protobuf:"bytes,10,rep,name=props,proto3" json:"props,omitempty"`                                      // 展示道具
}

func (x *BattleItem) Reset() {
	*x = BattleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattleItem) ProtoMessage() {}

func (x *BattleItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattleItem.ProtoReflect.Descriptor instead.
func (*BattleItem) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{38}
}

func (x *BattleItem) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *BattleItem) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BattleItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BattleItem) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *BattleItem) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *BattleItem) GetHeadImage() string {
	if x != nil {
		return x.HeadImage
	}
	return ""
}

func (x *BattleItem) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BattleItem) GetAreaInfo() string {
	if x != nil {
		return x.AreaInfo
	}
	return ""
}

func (x *BattleItem) GetRebattleScore() int64 {
	if x != nil {
		return x.RebattleScore
	}
	return 0
}

func (x *BattleItem) GetProps() []*Item {
	if x != nil {
		return x.Props
	}
	return nil
}

type BattingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoundId      string            `protobuf:"bytes,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	MatchCid     string            `protobuf:"bytes,2,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	MatchId      string            `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Type         int32             `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"` // 比赛类型
	CreateAt     int64             `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	ExpireAt     int64             `protobuf:"varint,6,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	RoundStatus  int32             `protobuf:"varint,7,opt,name=round_status,json=roundStatus,proto3" json:"round_status,omitempty"`
	MatchStatus  int32             `protobuf:"varint,8,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`
	Players      []*BattleItem     `protobuf:"bytes,9,rep,name=players,proto3" json:"players,omitempty"`
	TotalStage   int32             `protobuf:"varint,10,opt,name=total_stage,json=totalStage,proto3" json:"total_stage,omitempty"`
	CurrentStage int32             `protobuf:"varint,11,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"`
	PlyStatus    int32             `protobuf:"varint,12,opt,name=ply_status,json=plyStatus,proto3" json:"ply_status,omitempty"`
	FinishTime   int64             `protobuf:"varint,13,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"` // 完成比赛时间
	Metadata     map[string]string `protobuf:"bytes,14,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels       []string          `protobuf:"bytes,15,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *BattingInfo) Reset() {
	*x = BattingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BattingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattingInfo) ProtoMessage() {}

func (x *BattingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattingInfo.ProtoReflect.Descriptor instead.
func (*BattingInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{39}
}

func (x *BattingInfo) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *BattingInfo) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *BattingInfo) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *BattingInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BattingInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *BattingInfo) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *BattingInfo) GetRoundStatus() int32 {
	if x != nil {
		return x.RoundStatus
	}
	return 0
}

func (x *BattingInfo) GetMatchStatus() int32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *BattingInfo) GetPlayers() []*BattleItem {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *BattingInfo) GetTotalStage() int32 {
	if x != nil {
		return x.TotalStage
	}
	return 0
}

func (x *BattingInfo) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *BattingInfo) GetPlyStatus() int32 {
	if x != nil {
		return x.PlyStatus
	}
	return 0
}

func (x *BattingInfo) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

func (x *BattingInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *BattingInfo) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetInProgressListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   string         `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*BattingInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetInProgressListRsp) Reset() {
	*x = GetInProgressListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInProgressListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInProgressListRsp) ProtoMessage() {}

func (x *GetInProgressListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInProgressListRsp.ProtoReflect.Descriptor instead.
func (*GetInProgressListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{40}
}

func (x *GetInProgressListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetInProgressListRsp) GetItems() []*BattingInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetCompletedListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCompletedListReq) Reset() {
	*x = GetCompletedListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletedListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletedListReq) ProtoMessage() {}

func (x *GetCompletedListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletedListReq.ProtoReflect.Descriptor instead.
func (*GetCompletedListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{41}
}

type GetCompletedListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   string         `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*BattingInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetCompletedListRsp) Reset() {
	*x = GetCompletedListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompletedListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompletedListRsp) ProtoMessage() {}

func (x *GetCompletedListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompletedListRsp.ProtoReflect.Descriptor instead.
func (*GetCompletedListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{42}
}

func (x *GetCompletedListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetCompletedListRsp) GetItems() []*BattingInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type GetRoundRecordListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"` // 比赛标签
	Page  int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`  // 页码
	Num   int32  `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`    // 页数量
}

func (x *GetRoundRecordListReq) Reset() {
	*x = GetRoundRecordListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundRecordListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundRecordListReq) ProtoMessage() {}

func (x *GetRoundRecordListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundRecordListReq.ProtoReflect.Descriptor instead.
func (*GetRoundRecordListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{43}
}

func (x *GetRoundRecordListReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GetRoundRecordListReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetRoundRecordListReq) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type GetRoundRecordListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err   string         `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Items []*BattingInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetRoundRecordListRsp) Reset() {
	*x = GetRoundRecordListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoundRecordListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoundRecordListRsp) ProtoMessage() {}

func (x *GetRoundRecordListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoundRecordListRsp.ProtoReflect.Descriptor instead.
func (*GetRoundRecordListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{44}
}

func (x *GetRoundRecordListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetRoundRecordListRsp) GetItems() []*BattingInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type JoinMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid  string            `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`                                                                         // 比赛配置ID 同 match_list 二选一
	MatchList []string          `protobuf:"bytes,2,rep,name=match_list,json=matchList,proto3" json:"match_list,omitempty"`                                                                      // 比赛匹配列表  同 match_cid二选一
	Metadata  map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 匹配参数
}

func (x *JoinMatchReq) Reset() {
	*x = JoinMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMatchReq) ProtoMessage() {}

func (x *JoinMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMatchReq.ProtoReflect.Descriptor instead.
func (*JoinMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{45}
}

func (x *JoinMatchReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *JoinMatchReq) GetMatchList() []string {
	if x != nil {
		return x.MatchList
	}
	return nil
}

func (x *JoinMatchReq) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type JoinMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Opponents []string `protobuf:"bytes,2,rep,name=opponents,proto3" json:"opponents,omitempty"`               // 可能的对手列表
	MatchCid  string   `protobuf:"bytes,3,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"` // 当前比赛ID
	MatchId   string   `protobuf:"bytes,4,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`    // 比赛ID
}

func (x *JoinMatchRsp) Reset() {
	*x = JoinMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMatchRsp) ProtoMessage() {}

func (x *JoinMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMatchRsp.ProtoReflect.Descriptor instead.
func (*JoinMatchRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{46}
}

func (x *JoinMatchRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *JoinMatchRsp) GetOpponents() []string {
	if x != nil {
		return x.Opponents
	}
	return nil
}

func (x *JoinMatchRsp) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *JoinMatchRsp) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

//
type JoinMatchNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid     string         `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`             // 比赛配置ID
	MatchId      string         `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                // 比赛ID
	RoundId      string         `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                // 回合 match
	RandSeed     int64          `protobuf:"varint,4,opt,name=rand_seed,json=randSeed,proto3" json:"rand_seed,omitempty"`            // 随机种子
	OpponentUid  string         `protobuf:"bytes,5,opt,name=opponent_uid,json=opponentUid,proto3" json:"opponent_uid,omitempty"`    // 对手ID 废弃
	RoomInfo     *RoomInfo      `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`             // 比赛房间
	OpponentList []*PlayerBrief `protobuf:"bytes,7,rep,name=opponent_list,json=opponentList,proto3" json:"opponent_list,omitempty"` // 对手列表
}

func (x *JoinMatchNot) Reset() {
	*x = JoinMatchNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinMatchNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMatchNot) ProtoMessage() {}

func (x *JoinMatchNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMatchNot.ProtoReflect.Descriptor instead.
func (*JoinMatchNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{47}
}

func (x *JoinMatchNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *JoinMatchNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *JoinMatchNot) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *JoinMatchNot) GetRandSeed() int64 {
	if x != nil {
		return x.RandSeed
	}
	return 0
}

func (x *JoinMatchNot) GetOpponentUid() string {
	if x != nil {
		return x.OpponentUid
	}
	return ""
}

func (x *JoinMatchNot) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *JoinMatchNot) GetOpponentList() []*PlayerBrief {
	if x != nil {
		return x.OpponentList
	}
	return nil
}

// 匹配状态通知
type MatchingStatusNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`                               // 是否出错
	MatchCid  string `protobuf:"bytes,2,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`     // 游戏场次
	MatchId   string `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`        // 比赛ID
	StartTime int64  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始匹配时间
}

func (x *MatchingStatusNot) Reset() {
	*x = MatchingStatusNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingStatusNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingStatusNot) ProtoMessage() {}

func (x *MatchingStatusNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingStatusNot.ProtoReflect.Descriptor instead.
func (*MatchingStatusNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{48}
}

func (x *MatchingStatusNot) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *MatchingStatusNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchingStatusNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchingStatusNot) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// 匹配确认通知
type ConfirmationRequestNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid     string         `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	MatchId      string         `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	OpponentList []*PlayerBrief `protobuf:"bytes,3,rep,name=opponent_list,json=opponentList,proto3" json:"opponent_list,omitempty"` // 对手列表
}

func (x *ConfirmationRequestNot) Reset() {
	*x = ConfirmationRequestNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmationRequestNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmationRequestNot) ProtoMessage() {}

func (x *ConfirmationRequestNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmationRequestNot.ProtoReflect.Descriptor instead.
func (*ConfirmationRequestNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{49}
}

func (x *ConfirmationRequestNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *ConfirmationRequestNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *ConfirmationRequestNot) GetOpponentList() []*PlayerBrief {
	if x != nil {
		return x.OpponentList
	}
	return nil
}

// 比赛确认
type MatchConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@gotags: bson:"match_cid"
	MatchCid  string    `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty" bson:"match_cid"`
	MatchId   string    `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Confirmed ConfirmOp `protobuf:"varint,3,opt,name=confirmed,proto3,enum=proto.match.ConfirmOp" json:"confirmed,omitempty"` // 0取消 1确认
}

func (x *MatchConfirmReq) Reset() {
	*x = MatchConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchConfirmReq) ProtoMessage() {}

func (x *MatchConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchConfirmReq.ProtoReflect.Descriptor instead.
func (*MatchConfirmReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{50}
}

func (x *MatchConfirmReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchConfirmReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchConfirmReq) GetConfirmed() ConfirmOp {
	if x != nil {
		return x.Confirmed
	}
	return ConfirmOp_Cancel
}

type MatchConfirmRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err      string   `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	MatchCid string   `protobuf:"bytes,2,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"` // 回传match_cid
	PlyList  []string `protobuf:"bytes,3,rep,name=ply_list,json=plyList,proto3" json:"ply_list,omitempty"`    // 已经确认玩家列表
}

func (x *MatchConfirmRsp) Reset() {
	*x = MatchConfirmRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchConfirmRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchConfirmRsp) ProtoMessage() {}

func (x *MatchConfirmRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchConfirmRsp.ProtoReflect.Descriptor instead.
func (*MatchConfirmRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{51}
}

func (x *MatchConfirmRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *MatchConfirmRsp) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchConfirmRsp) GetPlyList() []string {
	if x != nil {
		return x.PlyList
	}
	return nil
}

type MatchConfirmNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid     string         `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	MatchId      string         `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Openid       string         `protobuf:"bytes,3,opt,name=openid,proto3" json:"openid,omitempty"` // 当前确认的玩家
	Op           ConfirmOp      `protobuf:"varint,4,opt,name=op,proto3,enum=proto.match.ConfirmOp" json:"op,omitempty"`
	OpponentList []*PlayerBrief `protobuf:"bytes,5,rep,name=opponent_list,json=opponentList,proto3" json:"opponent_list,omitempty"` // 对手列表
}

func (x *MatchConfirmNot) Reset() {
	*x = MatchConfirmNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchConfirmNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchConfirmNot) ProtoMessage() {}

func (x *MatchConfirmNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchConfirmNot.ProtoReflect.Descriptor instead.
func (*MatchConfirmNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{52}
}

func (x *MatchConfirmNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchConfirmNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchConfirmNot) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchConfirmNot) GetOp() ConfirmOp {
	if x != nil {
		return x.Op
	}
	return ConfirmOp_Cancel
}

func (x *MatchConfirmNot) GetOpponentList() []*PlayerBrief {
	if x != nil {
		return x.OpponentList
	}
	return nil
}

type RoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ServerId string `protobuf:"bytes,2,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	GameGid  string `protobuf:"bytes,3,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateRoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{53}
}

func (x *RoomInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *RoomInfo) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *RoomInfo) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *RoomInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type PlayerBrief struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid    string  `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Headimage string  `protobuf:"bytes,2,opt,name=headimage,proto3" json:"headimage,omitempty"`
	AreaInfo  string  `protobuf:"bytes,3,opt,name=area_info,json=areaInfo,proto3" json:"area_info,omitempty"`
	Nickname  string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Props     []*Item `protobuf:"bytes,5,rep,name=props,proto3" json:"props,omitempty"`
	GameGid   string  `protobuf:"bytes,6,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`
	PlatAid   int32   `protobuf:"varint,7,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
}

func (x *PlayerBrief) Reset() {
	*x = PlayerBrief{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBrief) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBrief) ProtoMessage() {}

func (x *PlayerBrief) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBrief.ProtoReflect.Descriptor instead.
func (*PlayerBrief) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{54}
}

func (x *PlayerBrief) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *PlayerBrief) GetHeadimage() string {
	if x != nil {
		return x.Headimage
	}
	return ""
}

func (x *PlayerBrief) GetAreaInfo() string {
	if x != nil {
		return x.AreaInfo
	}
	return ""
}

func (x *PlayerBrief) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerBrief) GetProps() []*Item {
	if x != nil {
		return x.Props
	}
	return nil
}

func (x *PlayerBrief) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *PlayerBrief) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

type EnterMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MatchCid string `protobuf:"bytes,2,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
}

func (x *EnterMatchReq) Reset() {
	*x = EnterMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMatchReq) ProtoMessage() {}

func (x *EnterMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMatchReq.ProtoReflect.Descriptor instead.
func (*EnterMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{55}
}

func (x *EnterMatchReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *EnterMatchReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

type RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid     string         `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`             // 比赛配置ID
	MatchId      string         `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`                // 比赛ID
	RoundId      string         `protobuf:"bytes,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                // 回合 match
	RandSeed     int64          `protobuf:"varint,4,opt,name=rand_seed,json=randSeed,proto3" json:"rand_seed,omitempty"`            // 随机种子
	OpponentUid  string         `protobuf:"bytes,5,opt,name=opponent_uid,json=opponentUid,proto3" json:"opponent_uid,omitempty"`    // 对手ID  废弃
	RoomInfo     *RoomInfo      `protobuf:"bytes,6,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`             // 比赛房间
	OpponentList []*PlayerBrief `protobuf:"bytes,7,rep,name=opponent_list,json=opponentList,proto3" json:"opponent_list,omitempty"` // 对手列表
}

func (x *RoundInfo) Reset() {
	*x = RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundInfo) ProtoMessage() {}

func (x *RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundInfo.ProtoReflect.Descriptor instead.
func (*RoundInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{56}
}

func (x *RoundInfo) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *RoundInfo) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *RoundInfo) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *RoundInfo) GetRandSeed() int64 {
	if x != nil {
		return x.RandSeed
	}
	return 0
}

func (x *RoundInfo) GetOpponentUid() string {
	if x != nil {
		return x.OpponentUid
	}
	return ""
}

func (x *RoundInfo) GetRoomInfo() *RoomInfo {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

func (x *RoundInfo) GetOpponentList() []*PlayerBrief {
	if x != nil {
		return x.OpponentList
	}
	return nil
}

type EnterMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	//  string match_id = 2;
	Round *RoundInfo `protobuf:"bytes,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *EnterMatchRsp) Reset() {
	*x = EnterMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnterMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnterMatchRsp) ProtoMessage() {}

func (x *EnterMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnterMatchRsp.ProtoReflect.Descriptor instead.
func (*EnterMatchRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{57}
}

func (x *EnterMatchRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *EnterMatchRsp) GetRound() *RoundInfo {
	if x != nil {
		return x.Round
	}
	return nil
}

type SubmitScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string          `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Score   int64           `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Type    SubmitScoreType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.match.SubmitScoreType" json:"type,omitempty"`
}

func (x *SubmitScoreReq) Reset() {
	*x = SubmitScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScoreReq) ProtoMessage() {}

func (x *SubmitScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScoreReq.ProtoReflect.Descriptor instead.
func (*SubmitScoreReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{58}
}

func (x *SubmitScoreReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *SubmitScoreReq) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubmitScoreReq) GetType() SubmitScoreType {
	if x != nil {
		return x.Type
	}
	return SubmitScoreType_SBT_GAME_OVER
}

type SubmitScoreRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	MatchId    string `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *SubmitScoreRsp) Reset() {
	*x = SubmitScoreRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitScoreRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScoreRsp) ProtoMessage() {}

func (x *SubmitScoreRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScoreRsp.ProtoReflect.Descriptor instead.
func (*SubmitScoreRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{59}
}

func (x *SubmitScoreRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *SubmitScoreRsp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *SubmitScoreRsp) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type CancelMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid string `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
}

func (x *CancelMatchReq) Reset() {
	*x = CancelMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMatchReq) ProtoMessage() {}

func (x *CancelMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMatchReq.ProtoReflect.Descriptor instead.
func (*CancelMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{60}
}

func (x *CancelMatchReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

type CancelMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CancelMatchRsp) Reset() {
	*x = CancelMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelMatchRsp) ProtoMessage() {}

func (x *CancelMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelMatchRsp.ProtoReflect.Descriptor instead.
func (*CancelMatchRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{61}
}

func (x *CancelMatchRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type GetMatchDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid string `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
}

func (x *GetMatchDetailsReq) Reset() {
	*x = GetMatchDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDetailsReq) ProtoMessage() {}

func (x *GetMatchDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDetailsReq.ProtoReflect.Descriptor instead.
func (*GetMatchDetailsReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{62}
}

func (x *GetMatchDetailsReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 道具ID
	Num      int64     `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`                              // 道具数量
	Type     Item_Type `protobuf:"varint,3,opt,name=type,proto3,enum=proto.match.Item_Type" json:"type,omitempty"` // 0平台道具 1游戏道具
	ExpireAt int64     `protobuf:"varint,4,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`    // 过期时间
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{63}
}

func (x *Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Item) GetType() Item_Type {
	if x != nil {
		return x.Type
	}
	return Item_Platform
}

func (x *Item) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

type GetMatchDetailsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string       `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Type      int32        `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Name      string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string       `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Rule      string       `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule,omitempty"`
	EntryFee  []*Item      `protobuf:"bytes,6,rep,name=entry_fee,json=entryFee,proto3" json:"entry_fee,omitempty"`
	AwardList []*AwardConf `protobuf:"bytes,7,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`
	Labels    []string     `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *GetMatchDetailsRsp) Reset() {
	*x = GetMatchDetailsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDetailsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDetailsRsp) ProtoMessage() {}

func (x *GetMatchDetailsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDetailsRsp.ProtoReflect.Descriptor instead.
func (*GetMatchDetailsRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{64}
}

func (x *GetMatchDetailsRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetMatchDetailsRsp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetMatchDetailsRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMatchDetailsRsp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GetMatchDetailsRsp) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *GetMatchDetailsRsp) GetEntryFee() []*Item {
	if x != nil {
		return x.EntryFee
	}
	return nil
}

func (x *GetMatchDetailsRsp) GetAwardList() []*AwardConf {
	if x != nil {
		return x.AwardList
	}
	return nil
}

func (x *GetMatchDetailsRsp) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetMatchDetailListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId  string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlatAid int32  `protobuf:"varint,2,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
}

func (x *GetMatchDetailListReq) Reset() {
	*x = GetMatchDetailListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDetailListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDetailListReq) ProtoMessage() {}

func (x *GetMatchDetailListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDetailListReq.ProtoReflect.Descriptor instead.
func (*GetMatchDetailListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{65}
}

func (x *GetMatchDetailListReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GetMatchDetailListReq) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

type GetMatchDetailListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetMatchDetailListRsp) Reset() {
	*x = GetMatchDetailListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDetailListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDetailListRsp) ProtoMessage() {}

func (x *GetMatchDetailListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDetailListRsp.ProtoReflect.Descriptor instead.
func (*GetMatchDetailListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{66}
}

func (x *GetMatchDetailListRsp) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type RankListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId string `protobuf:"bytes,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"` // 联赛Id
	Start    int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`                      // 开始名次
	End      int32  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`                          // 结束名次
}

func (x *RankListReq) Reset() {
	*x = RankListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankListReq) ProtoMessage() {}

func (x *RankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankListReq.ProtoReflect.Descriptor instead.
func (*RankListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{67}
}

func (x *RankListReq) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

func (x *RankListReq) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RankListReq) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type RankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      int64   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Openid    string  `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	MedalNum  int64   `protobuf:"varint,3,opt,name=medal_num,json=medalNum,proto3" json:"medal_num,omitempty"`   // 奖章数量
	Nickname  string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`                    // 昵称
	HeadImage string  `protobuf:"bytes,5,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"` // 头像
	AreaInfo  string  `protobuf:"bytes,6,opt,name=area_info,json=areaInfo,proto3" json:"area_info,omitempty"`    // 区域信息
	Props     []*Item `protobuf:"bytes,7,rep,name=props,proto3" json:"props,omitempty"`                          // 玩家展示道具
}

func (x *RankData) Reset() {
	*x = RankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankData) ProtoMessage() {}

func (x *RankData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankData.ProtoReflect.Descriptor instead.
func (*RankData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{68}
}

func (x *RankData) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *RankData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *RankData) GetMedalNum() int64 {
	if x != nil {
		return x.MedalNum
	}
	return 0
}

func (x *RankData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RankData) GetHeadImage() string {
	if x != nil {
		return x.HeadImage
	}
	return ""
}

func (x *RankData) GetAreaInfo() string {
	if x != nil {
		return x.AreaInfo
	}
	return ""
}

func (x *RankData) GetProps() []*Item {
	if x != nil {
		return x.Props
	}
	return nil
}

type RankListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err      string      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	RankList []*RankData `protobuf:"bytes,2,rep,name=rank_list,json=rankList,proto3" json:"rank_list,omitempty"`
}

func (x *RankListRsp) Reset() {
	*x = RankListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankListRsp) ProtoMessage() {}

func (x *RankListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankListRsp.ProtoReflect.Descriptor instead.
func (*RankListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{69}
}

func (x *RankListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *RankListRsp) GetRankList() []*RankData {
	if x != nil {
		return x.RankList
	}
	return nil
}

type GetCurLeagueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueType int32 `protobuf:"varint,1,opt,name=league_type,json=leagueType,proto3" json:"league_type,omitempty"`
}

func (x *GetCurLeagueReq) Reset() {
	*x = GetCurLeagueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurLeagueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurLeagueReq) ProtoMessage() {}

func (x *GetCurLeagueReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurLeagueReq.ProtoReflect.Descriptor instead.
func (*GetCurLeagueReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{70}
}

func (x *GetCurLeagueReq) GetLeagueType() int32 {
	if x != nil {
		return x.LeagueType
	}
	return 0
}

type LeagueAward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId  string  `protobuf:"bytes,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Rank      int64   `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	AwardList []*Item `protobuf:"bytes,3,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`
	MedalNum  int64   `protobuf:"varint,4,opt,name=medal_num,json=medalNum,proto3" json:"medal_num,omitempty"`
	EndTime   int64   `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *LeagueAward) Reset() {
	*x = LeagueAward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeagueAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeagueAward) ProtoMessage() {}

func (x *LeagueAward) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeagueAward.ProtoReflect.Descriptor instead.
func (*LeagueAward) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{71}
}

func (x *LeagueAward) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

func (x *LeagueAward) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *LeagueAward) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

func (x *LeagueAward) GetMedalNum() int64 {
	if x != nil {
		return x.MedalNum
	}
	return 0
}

func (x *LeagueAward) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type GetCurLeagueRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err             string       `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	LeagueId        string       `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	EndTime         int64        `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                          // 联赛结束时间
	Rank            int64        `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                                               // 当前排名
	MedalNum        int64        `protobuf:"varint,5,opt,name=medal_num,json=medalNum,proto3" json:"medal_num,omitempty"`                       // 当前奖章数量
	TotalBonus      []*Item      `protobuf:"bytes,6,rep,name=total_bonus,json=totalBonus,proto3" json:"total_bonus,omitempty"`                  // 总奖池
	LastLeagueAward *LeagueAward `protobuf:"bytes,7,opt,name=last_league_award,json=lastLeagueAward,proto3" json:"last_league_award,omitempty"` // 上赛季奖励，奖励领取之后，字段为空
}

func (x *GetCurLeagueRsp) Reset() {
	*x = GetCurLeagueRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurLeagueRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurLeagueRsp) ProtoMessage() {}

func (x *GetCurLeagueRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurLeagueRsp.ProtoReflect.Descriptor instead.
func (*GetCurLeagueRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{72}
}

func (x *GetCurLeagueRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetCurLeagueRsp) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

func (x *GetCurLeagueRsp) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetCurLeagueRsp) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetCurLeagueRsp) GetMedalNum() int64 {
	if x != nil {
		return x.MedalNum
	}
	return 0
}

func (x *GetCurLeagueRsp) GetTotalBonus() []*Item {
	if x != nil {
		return x.TotalBonus
	}
	return nil
}

func (x *GetCurLeagueRsp) GetLastLeagueAward() *LeagueAward {
	if x != nil {
		return x.LastLeagueAward
	}
	return nil
}

type GetLeagueAwardConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId string `protobuf:"bytes,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
}

func (x *GetLeagueAwardConfigReq) Reset() {
	*x = GetLeagueAwardConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueAwardConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueAwardConfigReq) ProtoMessage() {}

func (x *GetLeagueAwardConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueAwardConfigReq.ProtoReflect.Descriptor instead.
func (*GetLeagueAwardConfigReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{73}
}

func (x *GetLeagueAwardConfigReq) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

type GetLeagueAwardConfigRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string                           `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	AwardList []*GetLeagueAwardConfigRsp_Award `protobuf:"bytes,2,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`
}

func (x *GetLeagueAwardConfigRsp) Reset() {
	*x = GetLeagueAwardConfigRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueAwardConfigRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueAwardConfigRsp) ProtoMessage() {}

func (x *GetLeagueAwardConfigRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueAwardConfigRsp.ProtoReflect.Descriptor instead.
func (*GetLeagueAwardConfigRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{74}
}

func (x *GetLeagueAwardConfigRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetLeagueAwardConfigRsp) GetAwardList() []*GetLeagueAwardConfigRsp_Award {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type GetLeagueAwardReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId string `protobuf:"bytes,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
}

func (x *GetLeagueAwardReq) Reset() {
	*x = GetLeagueAwardReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueAwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueAwardReq) ProtoMessage() {}

func (x *GetLeagueAwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueAwardReq.ProtoReflect.Descriptor instead.
func (*GetLeagueAwardReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{75}
}

func (x *GetLeagueAwardReq) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

type GetLeagueAwardRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetLeagueAwardRsp) Reset() {
	*x = GetLeagueAwardRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueAwardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueAwardRsp) ProtoMessage() {}

func (x *GetLeagueAwardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueAwardRsp.ProtoReflect.Descriptor instead.
func (*GetLeagueAwardRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{76}
}

func (x *GetLeagueAwardRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type GetPlayerProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	GameId string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *GetPlayerProfileReq) Reset() {
	*x = GetPlayerProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerProfileReq) ProtoMessage() {}

func (x *GetPlayerProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerProfileReq.ProtoReflect.Descriptor instead.
func (*GetPlayerProfileReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{77}
}

func (x *GetPlayerProfileReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetPlayerProfileReq) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type GetPlayerProfileRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                 string                      `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TotalGameCount      int32                       `protobuf:"varint,2,opt,name=total_game_count,json=totalGameCount,proto3" json:"total_game_count,omitempty"`                  // 总游戏次数
	ChampionGameCount   int32                       `protobuf:"varint,3,opt,name=champion_game_count,json=championGameCount,proto3" json:"champion_game_count,omitempty"`         // 获得冠军总次数
	MaxContinueWinCount int32                       `protobuf:"varint,4,opt,name=max_continue_win_count,json=maxContinueWinCount,proto3" json:"max_continue_win_count,omitempty"` // 最大连胜次数
	LatestWinLost       []bool                      `protobuf:"varint,5,rep,packed,name=latest_win_lost,json=latestWinLost,proto3" json:"latest_win_lost,omitempty"`              // 最近游戏结果
	PlatGameCount       int32                       `protobuf:"varint,6,opt,name=plat_game_count,json=platGameCount,proto3" json:"plat_game_count,omitempty"`                     // 平台游戏总局数
	RoundCount          int32                       `protobuf:"varint,7,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`                                // 回合局数
	ContinueWinCount    int32                       `protobuf:"varint,8,opt,name=continue_win_count,json=continueWinCount,proto3" json:"continue_win_count,omitempty"`            // 当前连胜
	BestRecord          *GetPlayerProfileRsp_Record `protobuf:"bytes,9,opt,name=best_record,json=bestRecord,proto3" json:"best_record,omitempty"`                                 // 最佳记录
}

func (x *GetPlayerProfileRsp) Reset() {
	*x = GetPlayerProfileRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerProfileRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerProfileRsp) ProtoMessage() {}

func (x *GetPlayerProfileRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerProfileRsp.ProtoReflect.Descriptor instead.
func (*GetPlayerProfileRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{78}
}

func (x *GetPlayerProfileRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetPlayerProfileRsp) GetTotalGameCount() int32 {
	if x != nil {
		return x.TotalGameCount
	}
	return 0
}

func (x *GetPlayerProfileRsp) GetChampionGameCount() int32 {
	if x != nil {
		return x.ChampionGameCount
	}
	return 0
}

func (x *GetPlayerProfileRsp) GetMaxContinueWinCount() int32 {
	if x != nil {
		return x.MaxContinueWinCount
	}
	return 0
}

func (x *GetPlayerProfileRsp) GetLatestWinLost() []bool {
	if x != nil {
		return x.LatestWinLost
	}
	return nil
}

func (x *GetPlayerProfileRsp) GetPlatGameCount() int32 {
	if x != nil {
		return x.PlatGameCount
	}
	return 0
}

func (x *GetPlayerProfileRsp) GetRoundCount() int32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *GetPlayerProfileRsp) GetContinueWinCount() int32 {
	if x != nil {
		return x.ContinueWinCount
	}
	return 0
}

func (x *GetPlayerProfileRsp) GetBestRecord() *GetPlayerProfileRsp_Record {
	if x != nil {
		return x.BestRecord
	}
	return nil
}

type GetPlayerMatchGameContReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid  string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	GameGid string `protobuf:"bytes,2,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`
}

func (x *GetPlayerMatchGameContReq) Reset() {
	*x = GetPlayerMatchGameContReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerMatchGameContReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerMatchGameContReq) ProtoMessage() {}

func (x *GetPlayerMatchGameContReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerMatchGameContReq.ProtoReflect.Descriptor instead.
func (*GetPlayerMatchGameContReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{79}
}

func (x *GetPlayerMatchGameContReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetPlayerMatchGameContReq) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

type GetPlayerMatchGameContRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err                 string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TotalGameCount      int32  `protobuf:"varint,2,opt,name=total_game_count,json=totalGameCount,proto3" json:"total_game_count,omitempty"`                  // 总游戏次数
	ChampionGameCount   int32  `protobuf:"varint,3,opt,name=champion_game_count,json=championGameCount,proto3" json:"champion_game_count,omitempty"`         // 获得冠军总次数
	MaxContinueWinCount int32  `protobuf:"varint,4,opt,name=max_continue_win_count,json=maxContinueWinCount,proto3" json:"max_continue_win_count,omitempty"` // 最大连胜次数
	LatestWinLost       []bool `protobuf:"varint,5,rep,packed,name=latest_win_lost,json=latestWinLost,proto3" json:"latest_win_lost,omitempty"`              // 最近游戏结果
}

func (x *GetPlayerMatchGameContRsp) Reset() {
	*x = GetPlayerMatchGameContRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerMatchGameContRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerMatchGameContRsp) ProtoMessage() {}

func (x *GetPlayerMatchGameContRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerMatchGameContRsp.ProtoReflect.Descriptor instead.
func (*GetPlayerMatchGameContRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{80}
}

func (x *GetPlayerMatchGameContRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetPlayerMatchGameContRsp) GetTotalGameCount() int32 {
	if x != nil {
		return x.TotalGameCount
	}
	return 0
}

func (x *GetPlayerMatchGameContRsp) GetChampionGameCount() int32 {
	if x != nil {
		return x.ChampionGameCount
	}
	return 0
}

func (x *GetPlayerMatchGameContRsp) GetMaxContinueWinCount() int32 {
	if x != nil {
		return x.MaxContinueWinCount
	}
	return 0
}

func (x *GetPlayerMatchGameContRsp) GetLatestWinLost() []bool {
	if x != nil {
		return x.LatestWinLost
	}
	return nil
}

type MatchResultNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId       string                     `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlatAid      int32                      `protobuf:"varint,2,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
	MatchId      string                     `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MatchCid     string                     `protobuf:"bytes,4,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	MatchType    MatchType                  `protobuf:"varint,5,opt,name=match_type,json=matchType,proto3,enum=proto.match.MatchType" json:"match_type,omitempty"`     // 比赛类型
	LeagueType   LeagueType                 `protobuf:"varint,6,opt,name=league_type,json=leagueType,proto3,enum=proto.match.LeagueType" json:"league_type,omitempty"` // 联赛类型
	EntryFeeType int32                      `protobuf:"varint,7,opt,name=entry_fee_type,json=entryFeeType,proto3" json:"entry_fee_type,omitempty"`                     // 报名费类型
	MaxPlayerNum int32                      `protobuf:"varint,8,opt,name=max_player_num,json=maxPlayerNum,proto3" json:"max_player_num,omitempty"`                     // 参数人数
	TotalStage   int32                      `protobuf:"varint,9,opt,name=total_stage,json=totalStage,proto3" json:"total_stage,omitempty"`                             // 比赛共有几个阶段
	CreateTime   int64                      `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                            // 比赛创建时间
	CompleteTime int64                      `protobuf:"varint,11,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`                      // 比赛完成时间
	Players      []*MatchResultNot_RankData `protobuf:"bytes,12,rep,name=players,proto3" json:"players,omitempty"`
	Labels       string                     `protobuf:"bytes,13,opt,name=labels,proto3" json:"labels,omitempty"` // 比赛标签
}

func (x *MatchResultNot) Reset() {
	*x = MatchResultNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResultNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultNot) ProtoMessage() {}

func (x *MatchResultNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultNot.ProtoReflect.Descriptor instead.
func (*MatchResultNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{81}
}

func (x *MatchResultNot) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MatchResultNot) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *MatchResultNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchResultNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchResultNot) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MatchTypeInvalid
}

func (x *MatchResultNot) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_LeagueTypePractice
}

func (x *MatchResultNot) GetEntryFeeType() int32 {
	if x != nil {
		return x.EntryFeeType
	}
	return 0
}

func (x *MatchResultNot) GetMaxPlayerNum() int32 {
	if x != nil {
		return x.MaxPlayerNum
	}
	return 0
}

func (x *MatchResultNot) GetTotalStage() int32 {
	if x != nil {
		return x.TotalStage
	}
	return 0
}

func (x *MatchResultNot) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MatchResultNot) GetCompleteTime() int64 {
	if x != nil {
		return x.CompleteTime
	}
	return 0
}

func (x *MatchResultNot) GetPlayers() []*MatchResultNot_RankData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchResultNot) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

type MatchSubmitScoreNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId       string     `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlatAid      int32      `protobuf:"varint,2,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
	MatchId      string     `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MatchCid     string     `protobuf:"bytes,4,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	MatchType    MatchType  `protobuf:"varint,5,opt,name=match_type,json=matchType,proto3,enum=proto.match.MatchType" json:"match_type,omitempty"`     // 比赛类型
	LeagueType   LeagueType `protobuf:"varint,6,opt,name=league_type,json=leagueType,proto3,enum=proto.match.LeagueType" json:"league_type,omitempty"` // 联赛类型
	EntryFee     []*Item    `protobuf:"bytes,7,rep,name=entry_fee,json=entryFee,proto3" json:"entry_fee,omitempty"`                                    // 报名费
	MaxPlayerNum int32      `protobuf:"varint,8,opt,name=max_player_num,json=maxPlayerNum,proto3" json:"max_player_num,omitempty"`                     // 参数人数
	TotalStage   int32      `protobuf:"varint,9,opt,name=total_stage,json=totalStage,proto3" json:"total_stage,omitempty"`                             // 比赛共有几个阶段
	CreateTime   int64      `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                            // 比赛创建时间
	UpdateTime   int64      `protobuf:"varint,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                            // 操作时间
	Openid       string     `protobuf:"bytes,12,opt,name=openid,proto3" json:"openid,omitempty"`
	Score        int64      `protobuf:"varint,13,opt,name=score,proto3" json:"score,omitempty"`
	CurrentStage int32      `protobuf:"varint,14,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"` // 当前阶段，从0开始
	Labels       string     `protobuf:"bytes,15,opt,name=labels,proto3" json:"labels,omitempty"`                                  // 比赛标签
}

func (x *MatchSubmitScoreNot) Reset() {
	*x = MatchSubmitScoreNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSubmitScoreNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSubmitScoreNot) ProtoMessage() {}

func (x *MatchSubmitScoreNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSubmitScoreNot.ProtoReflect.Descriptor instead.
func (*MatchSubmitScoreNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{82}
}

func (x *MatchSubmitScoreNot) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MatchSubmitScoreNot) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchSubmitScoreNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchSubmitScoreNot) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MatchTypeInvalid
}

func (x *MatchSubmitScoreNot) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_LeagueTypePractice
}

func (x *MatchSubmitScoreNot) GetEntryFee() []*Item {
	if x != nil {
		return x.EntryFee
	}
	return nil
}

func (x *MatchSubmitScoreNot) GetMaxPlayerNum() int32 {
	if x != nil {
		return x.MaxPlayerNum
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetTotalStage() int32 {
	if x != nil {
		return x.TotalStage
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchSubmitScoreNot) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *MatchSubmitScoreNot) GetLabels() string {
	if x != nil {
		return x.Labels
	}
	return ""
}

type GetPlyMatchInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Openid  string `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
}

func (x *GetPlyMatchInfoReq) Reset() {
	*x = GetPlyMatchInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlyMatchInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlyMatchInfoReq) ProtoMessage() {}

func (x *GetPlyMatchInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlyMatchInfoReq.ProtoReflect.Descriptor instead.
func (*GetPlyMatchInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{83}
}

func (x *GetPlyMatchInfoReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetPlyMatchInfoReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

type GetPlyMatchInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId       string     `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	PlatAid      int32      `protobuf:"varint,2,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
	MatchId      string     `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	MatchCid     string     `protobuf:"bytes,4,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	MatchType    MatchType  `protobuf:"varint,5,opt,name=match_type,json=matchType,proto3,enum=proto.match.MatchType" json:"match_type,omitempty"`     // 比赛类型
	LeagueType   LeagueType `protobuf:"varint,6,opt,name=league_type,json=leagueType,proto3,enum=proto.match.LeagueType" json:"league_type,omitempty"` // 联赛类型
	EntryFee     []*Item    `protobuf:"bytes,7,rep,name=entry_fee,json=entryFee,proto3" json:"entry_fee,omitempty"`                                    // 报名费
	MaxPlayerNum int32      `protobuf:"varint,8,opt,name=max_player_num,json=maxPlayerNum,proto3" json:"max_player_num,omitempty"`                     // 参数人数
	TotalStage   int32      `protobuf:"varint,9,opt,name=total_stage,json=totalStage,proto3" json:"total_stage,omitempty"`                             // 比赛共有几个阶段
	CreateTime   int64      `protobuf:"varint,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`                            // 比赛创建时间
	CompleteTime int64      `protobuf:"varint,11,opt,name=complete_time,json=completeTime,proto3" json:"complete_time,omitempty"`                      // 比赛完成时间
	Openid       string     `protobuf:"bytes,12,opt,name=openid,proto3" json:"openid,omitempty"`
	Rank         int64      `protobuf:"varint,13,opt,name=rank,proto3" json:"rank,omitempty"`
	JoinTime     int64      `protobuf:"varint,14,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`       // 玩家加入比赛时间
	MatchCount   int32      `protobuf:"varint,15,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"` // 比赛加入次数，部分比赛，玩家淘汰后还可以再次加入
	AwardList    []*Item    `protobuf:"bytes,16,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`     // 获得的奖励
}

func (x *GetPlyMatchInfoRsp) Reset() {
	*x = GetPlyMatchInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlyMatchInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlyMatchInfoRsp) ProtoMessage() {}

func (x *GetPlyMatchInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlyMatchInfoRsp.ProtoReflect.Descriptor instead.
func (*GetPlyMatchInfoRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{84}
}

func (x *GetPlyMatchInfoRsp) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GetPlyMatchInfoRsp) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetPlyMatchInfoRsp) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *GetPlyMatchInfoRsp) GetMatchType() MatchType {
	if x != nil {
		return x.MatchType
	}
	return MatchType_MatchTypeInvalid
}

func (x *GetPlyMatchInfoRsp) GetLeagueType() LeagueType {
	if x != nil {
		return x.LeagueType
	}
	return LeagueType_LeagueTypePractice
}

func (x *GetPlyMatchInfoRsp) GetEntryFee() []*Item {
	if x != nil {
		return x.EntryFee
	}
	return nil
}

func (x *GetPlyMatchInfoRsp) GetMaxPlayerNum() int32 {
	if x != nil {
		return x.MaxPlayerNum
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetTotalStage() int32 {
	if x != nil {
		return x.TotalStage
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetCompleteTime() int64 {
	if x != nil {
		return x.CompleteTime
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetPlyMatchInfoRsp) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *GetPlyMatchInfoRsp) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type PlayerMatchScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid string          `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Type   SubmitScoreType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.match.SubmitScoreType" json:"type,omitempty"`
	Score  int64           `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	//  string round_id = 4; // 废弃
	Tags   map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 记录到日志
	Labels []string          `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`                                                                                     // 玩家给记录加标签
}

func (x *PlayerMatchScore) Reset() {
	*x = PlayerMatchScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchScore) ProtoMessage() {}

func (x *PlayerMatchScore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchScore.ProtoReflect.Descriptor instead.
func (*PlayerMatchScore) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{85}
}

func (x *PlayerMatchScore) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *PlayerMatchScore) GetType() SubmitScoreType {
	if x != nil {
		return x.Type
	}
	return SubmitScoreType_SBT_GAME_OVER
}

func (x *PlayerMatchScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PlayerMatchScore) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PlayerMatchScore) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateMatchScoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string              `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Scores  []*PlayerMatchScore `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	// repeated string labels = 3;
	Winners []string          `protobuf:"bytes,4,rep,name=winners,proto3" json:"winners,omitempty"` // 胜利玩家列表
	Tags    map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMatchScoreReq) Reset() {
	*x = UpdateMatchScoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchScoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchScoreReq) ProtoMessage() {}

func (x *UpdateMatchScoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchScoreReq.ProtoReflect.Descriptor instead.
func (*UpdateMatchScoreReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateMatchScoreReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *UpdateMatchScoreReq) GetScores() []*PlayerMatchScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *UpdateMatchScoreReq) GetWinners() []string {
	if x != nil {
		return x.Winners
	}
	return nil
}

func (x *UpdateMatchScoreReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateMatchScoreRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *UpdateMatchScoreRsp) Reset() {
	*x = UpdateMatchScoreRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchScoreRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchScoreRsp) ProtoMessage() {}

func (x *UpdateMatchScoreRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchScoreRsp.ProtoReflect.Descriptor instead.
func (*UpdateMatchScoreRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateMatchScoreRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type UpdateGameResultReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid  string          `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Type    SubmitScoreType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.match.SubmitScoreType" json:"type,omitempty"`
	Score   int64           `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	MatchId string          `protobuf:"bytes,4,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	//  string round_id = 5;
	Tags   map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 记录到日志
	Labels []string          `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`                                                                                     // 玩家给记录加标签
}

func (x *UpdateGameResultReq) Reset() {
	*x = UpdateGameResultReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameResultReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameResultReq) ProtoMessage() {}

func (x *UpdateGameResultReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameResultReq.ProtoReflect.Descriptor instead.
func (*UpdateGameResultReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateGameResultReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *UpdateGameResultReq) GetType() SubmitScoreType {
	if x != nil {
		return x.Type
	}
	return SubmitScoreType_SBT_GAME_OVER
}

func (x *UpdateGameResultReq) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UpdateGameResultReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *UpdateGameResultReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateGameResultReq) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type UpdateGameResultRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *UpdateGameResultRsp) Reset() {
	*x = UpdateGameResultRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGameResultRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGameResultRsp) ProtoMessage() {}

func (x *UpdateGameResultRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGameResultRsp.ProtoReflect.Descriptor instead.
func (*UpdateGameResultRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateGameResultRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid    string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`                     // 玩家ID
	Uuid      string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`                         // 玩家平台ID
	Nickname  string `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`                 // 玩家昵称
	Headimage string `protobuf:"bytes,4,opt,name=headimage,proto3" json:"headimage,omitempty"`               // 头像
	AreaInfo  string `protobuf:"bytes,5,opt,name=area_info,json=areaInfo,proto3" json:"area_info,omitempty"` // 区域信息
	RegTime   int64  `protobuf:"varint,6,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`   // 注册时间
	GameGid   string `protobuf:"bytes,7,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`    // 游戏ID
	Pn        string `protobuf:"bytes,8,opt,name=pn,proto3" json:"pn,omitempty"`                             // pn
	PlatAid   int32  `protobuf:"varint,9,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`   // 平台ID
	Flag      int32  `protobuf:"varint,10,opt,name=flag,proto3" json:"flag,omitempty"`                       // 玩家类型
}

func (x *UserData) Reset() {
	*x = UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserData) ProtoMessage() {}

func (x *UserData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserData.ProtoReflect.Descriptor instead.
func (*UserData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{90}
}

func (x *UserData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *UserData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UserData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserData) GetHeadimage() string {
	if x != nil {
		return x.Headimage
	}
	return ""
}

func (x *UserData) GetAreaInfo() string {
	if x != nil {
		return x.AreaInfo
	}
	return ""
}

func (x *UserData) GetRegTime() int64 {
	if x != nil {
		return x.RegTime
	}
	return 0
}

func (x *UserData) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *UserData) GetPn() string {
	if x != nil {
		return x.Pn
	}
	return ""
}

func (x *UserData) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *UserData) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type GetActivityMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *GetActivityMatchReq) Reset() {
	*x = GetActivityMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityMatchReq) ProtoMessage() {}

func (x *GetActivityMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityMatchReq.ProtoReflect.Descriptor instead.
func (*GetActivityMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{91}
}

func (x *GetActivityMatchReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type GetActivityMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid     string `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	LastScore    int64  `protobuf:"varint,2,opt,name=last_score,json=lastScore,proto3" json:"last_score,omitempty"`            // 最近一次得分
	Status       int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                   // 玩家状态
	MatchStatus  int32  `protobuf:"varint,4,opt,name=match_status,json=matchStatus,proto3" json:"match_status,omitempty"`      // 比赛状态
	JoinTimes    int32  `protobuf:"varint,5,opt,name=join_times,json=joinTimes,proto3" json:"join_times,omitempty"`            // 参赛次数
	MaxJoinTimes int32  `protobuf:"varint,6,opt,name=max_join_times,json=maxJoinTimes,proto3" json:"max_join_times,omitempty"` // 允许最大参赛次数
	TopScore     int64  `protobuf:"varint,7,opt,name=top_score,json=topScore,proto3" json:"top_score,omitempty"`               // 当前最高得分
	BeginTime    int64  `protobuf:"varint,8,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`            // 开始时间
	StopTime     int64  `protobuf:"varint,9,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`               // 结束时间
	Err          string `protobuf:"bytes,10,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *GetActivityMatchRsp) Reset() {
	*x = GetActivityMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityMatchRsp) ProtoMessage() {}

func (x *GetActivityMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityMatchRsp.ProtoReflect.Descriptor instead.
func (*GetActivityMatchRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{92}
}

func (x *GetActivityMatchRsp) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *GetActivityMatchRsp) GetLastScore() int64 {
	if x != nil {
		return x.LastScore
	}
	return 0
}

func (x *GetActivityMatchRsp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetActivityMatchRsp) GetMatchStatus() int32 {
	if x != nil {
		return x.MatchStatus
	}
	return 0
}

func (x *GetActivityMatchRsp) GetJoinTimes() int32 {
	if x != nil {
		return x.JoinTimes
	}
	return 0
}

func (x *GetActivityMatchRsp) GetMaxJoinTimes() int32 {
	if x != nil {
		return x.MaxJoinTimes
	}
	return 0
}

func (x *GetActivityMatchRsp) GetTopScore() int64 {
	if x != nil {
		return x.TopScore
	}
	return 0
}

func (x *GetActivityMatchRsp) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *GetActivityMatchRsp) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *GetActivityMatchRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type ActivityMatchRankListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"` // 比赛ID
	Start   int32  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`                   // 开始名次
	End     int32  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`                       // 结束名次
}

func (x *ActivityMatchRankListReq) Reset() {
	*x = ActivityMatchRankListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMatchRankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMatchRankListReq) ProtoMessage() {}

func (x *ActivityMatchRankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMatchRankListReq.ProtoReflect.Descriptor instead.
func (*ActivityMatchRankListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{93}
}

func (x *ActivityMatchRankListReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *ActivityMatchRankListReq) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ActivityMatchRankListReq) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type ActivityMatchRankListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string                               `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	StatusCode int32                                `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	MyRank     *ActivityMatchRankListRsp_RankData   `protobuf:"bytes,3,opt,name=my_rank,json=myRank,proto3" json:"my_rank,omitempty"`
	RankList   []*ActivityMatchRankListRsp_RankData `protobuf:"bytes,4,rep,name=rank_list,json=rankList,proto3" json:"rank_list,omitempty"`
}

func (x *ActivityMatchRankListRsp) Reset() {
	*x = ActivityMatchRankListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMatchRankListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMatchRankListRsp) ProtoMessage() {}

func (x *ActivityMatchRankListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMatchRankListRsp.ProtoReflect.Descriptor instead.
func (*ActivityMatchRankListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{94}
}

func (x *ActivityMatchRankListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *ActivityMatchRankListRsp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ActivityMatchRankListRsp) GetMyRank() *ActivityMatchRankListRsp_RankData {
	if x != nil {
		return x.MyRank
	}
	return nil
}

func (x *ActivityMatchRankListRsp) GetRankList() []*ActivityMatchRankListRsp_RankData {
	if x != nil {
		return x.RankList
	}
	return nil
}

type GetNextActivityMatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid string `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
}

func (x *GetNextActivityMatchReq) Reset() {
	*x = GetNextActivityMatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextActivityMatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextActivityMatchReq) ProtoMessage() {}

func (x *GetNextActivityMatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextActivityMatchReq.ProtoReflect.Descriptor instead.
func (*GetNextActivityMatchReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{95}
}

func (x *GetNextActivityMatchReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

type GetNextActivityMatchRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	StatusCode int32  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	MatchId    string `protobuf:"bytes,3,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	BeginTime  int64  `protobuf:"varint,4,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime    int64  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetNextActivityMatchRsp) Reset() {
	*x = GetNextActivityMatchRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextActivityMatchRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextActivityMatchRsp) ProtoMessage() {}

func (x *GetNextActivityMatchRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextActivityMatchRsp.ProtoReflect.Descriptor instead.
func (*GetNextActivityMatchRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{96}
}

func (x *GetNextActivityMatchRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetNextActivityMatchRsp) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GetNextActivityMatchRsp) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetNextActivityMatchRsp) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *GetNextActivityMatchRsp) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// 匹配中的玩家
type MatchingPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid   string                              `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	TypeList map[string]*MatchingPlayer_Matching `protobuf:"bytes,2,rep,name=type_list,json=typeList,proto3" json:"type_list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MatchingPlayer) Reset() {
	*x = MatchingPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingPlayer) ProtoMessage() {}

func (x *MatchingPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingPlayer.ProtoReflect.Descriptor instead.
func (*MatchingPlayer) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{97}
}

func (x *MatchingPlayer) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchingPlayer) GetTypeList() map[string]*MatchingPlayer_Matching {
	if x != nil {
		return x.TypeList
	}
	return nil
}

// 未完成比赛列表
type UnderwayMatchingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId        string   `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	ValidJoinTimes int32    `protobuf:"varint,2,opt,name=valid_join_times,json=validJoinTimes,proto3" json:"valid_join_times,omitempty"` // 有效玩家参与次数（一个玩家可以参赛多次，需要占用比赛名额）
	MasterPoints   int64    `protobuf:"varint,3,opt,name=master_points,json=masterPoints,proto3" json:"master_points,omitempty"`         // 大师分
	OpenidList     []string `protobuf:"bytes,4,rep,name=openid_list,json=openidList,proto3" json:"openid_list,omitempty"`                // 当前玩家比赛场中的玩家
}

func (x *UnderwayMatchingData) Reset() {
	*x = UnderwayMatchingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderwayMatchingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderwayMatchingData) ProtoMessage() {}

func (x *UnderwayMatchingData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderwayMatchingData.ProtoReflect.Descriptor instead.
func (*UnderwayMatchingData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{98}
}

func (x *UnderwayMatchingData) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *UnderwayMatchingData) GetValidJoinTimes() int32 {
	if x != nil {
		return x.ValidJoinTimes
	}
	return 0
}

func (x *UnderwayMatchingData) GetMasterPoints() int64 {
	if x != nil {
		return x.MasterPoints
	}
	return 0
}

func (x *UnderwayMatchingData) GetOpenidList() []string {
	if x != nil {
		return x.OpenidList
	}
	return nil
}

// topic: match.status.refresh
type RefreshMatchStatusNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *RefreshMatchStatusNot) Reset() {
	*x = RefreshMatchStatusNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshMatchStatusNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMatchStatusNot) ProtoMessage() {}

func (x *RefreshMatchStatusNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMatchStatusNot.ProtoReflect.Descriptor instead.
func (*RefreshMatchStatusNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{99}
}

func (x *RefreshMatchStatusNot) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type GetMatchDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *GetMatchDataReq) Reset() {
	*x = GetMatchDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDataReq) ProtoMessage() {}

func (x *GetMatchDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDataReq.ProtoReflect.Descriptor instead.
func (*GetMatchDataReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{100}
}

func (x *GetMatchDataReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type MatchPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid       string  `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`                                  // 玩家ID
	Status       int32   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                 // 玩家参赛状态
	JoinTime     int64   `protobuf:"varint,3,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`             // 加入比赛时间
	Rank         int32   `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`                                     // 当前排名
	CurrentStage int32   `protobuf:"varint,5,opt,name=current_stage,json=currentStage,proto3" json:"current_stage,omitempty"` // 当前回合
	PlyFlag      int32   `protobuf:"varint,6,opt,name=ply_flag,json=plyFlag,proto3" json:"ply_flag,omitempty"`                // 玩家类型: 0玩家 1:机器人
	AwardList    []*Item `protobuf:"bytes,7,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`           // 奖励列表
	LastRoundId  string  `protobuf:"bytes,8,opt,name=last_round_id,json=lastRoundId,proto3" json:"last_round_id,omitempty"`   // 最后一回合ID
}

func (x *MatchPlayer) Reset() {
	*x = MatchPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPlayer) ProtoMessage() {}

func (x *MatchPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPlayer.ProtoReflect.Descriptor instead.
func (*MatchPlayer) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{101}
}

func (x *MatchPlayer) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchPlayer) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MatchPlayer) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *MatchPlayer) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MatchPlayer) GetCurrentStage() int32 {
	if x != nil {
		return x.CurrentStage
	}
	return 0
}

func (x *MatchPlayer) GetPlyFlag() int32 {
	if x != nil {
		return x.PlyFlag
	}
	return 0
}

func (x *MatchPlayer) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

func (x *MatchPlayer) GetLastRoundId() string {
	if x != nil {
		return x.LastRoundId
	}
	return ""
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType int32                 `protobuf:"varint,2,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"` // 比赛类型®
	Status    int32                 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                        // 当前比赛状态 0进行中 1已完成
	PlatAid   int32                 `protobuf:"varint,5,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`       // 平台
	CreateAt  int64                 `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`    // 比赛创建时间
	ExpireAt  int64                 `protobuf:"varint,7,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`    // 比赛结束时间
	Rounds    map[string]*RoundData `protobuf:"bytes,8,rep,name=rounds,proto3" json:"rounds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Stages    []*StageData          `protobuf:"bytes,9,rep,name=stages,proto3" json:"stages,omitempty"`                            // 阶段
	MatchCid  string                `protobuf:"bytes,10,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`       // 比赛类型
	GameGid   string                `protobuf:"bytes,11,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`          // 游戏ID
	EntryFee  []*Item               `protobuf:"bytes,12,rep,name=entry_fee,json=entryFee,proto3" json:"entry_fee,omitempty"`       // 报名费
	Awards    []*MatchInfo_Award    `protobuf:"bytes,13,rep,name=awards,proto3" json:"awards,omitempty"`                           // 奖励列表
	Players   []*MatchPlayer        `protobuf:"bytes,14,rep,name=players,proto3" json:"players,omitempty"`                         // 参与玩家列表
	MaxPlyNum int32                 `protobuf:"varint,15,opt,name=max_ply_num,json=maxPlyNum,proto3" json:"max_ply_num,omitempty"` // 最大参与人数
	MinPlyNum int32                 `protobuf:"varint,16,opt,name=min_ply_num,json=minPlyNum,proto3" json:"min_ply_num,omitempty"` // 最少参与人数
	PlayerNum int32                 `protobuf:"varint,17,opt,name=player_num,json=playerNum,proto3" json:"player_num,omitempty"`   // 参赛人数
	Metadata  string                `protobuf:"bytes,18,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{102}
}

func (x *MatchInfo) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *MatchInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MatchInfo) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *MatchInfo) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *MatchInfo) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

func (x *MatchInfo) GetRounds() map[string]*RoundData {
	if x != nil {
		return x.Rounds
	}
	return nil
}

func (x *MatchInfo) GetStages() []*StageData {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *MatchInfo) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchInfo) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *MatchInfo) GetEntryFee() []*Item {
	if x != nil {
		return x.EntryFee
	}
	return nil
}

func (x *MatchInfo) GetAwards() []*MatchInfo_Award {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *MatchInfo) GetPlayers() []*MatchPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchInfo) GetMaxPlyNum() int32 {
	if x != nil {
		return x.MaxPlyNum
	}
	return 0
}

func (x *MatchInfo) GetMinPlyNum() int32 {
	if x != nil {
		return x.MinPlyNum
	}
	return 0
}

func (x *MatchInfo) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *MatchInfo) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type GetMatchDataRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err  string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMatchDataRsp) Reset() {
	*x = GetMatchDataRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDataRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDataRsp) ProtoMessage() {}

func (x *GetMatchDataRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDataRsp.ProtoReflect.Descriptor instead.
func (*GetMatchDataRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{103}
}

func (x *GetMatchDataRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetMatchDataRsp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type MatchRankListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *MatchRankListReq) Reset() {
	*x = MatchRankListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRankListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRankListReq) ProtoMessage() {}

func (x *MatchRankListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRankListReq.ProtoReflect.Descriptor instead.
func (*MatchRankListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{104}
}

func (x *MatchRankListReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type MatchRankListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err  string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MatchRankListRsp) Reset() {
	*x = MatchRankListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRankListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRankListRsp) ProtoMessage() {}

func (x *MatchRankListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRankListRsp.ProtoReflect.Descriptor instead.
func (*MatchRankListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{105}
}

func (x *MatchRankListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *MatchRankListRsp) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type AwardConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range *AwardConf_RankRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Items []*Item              `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AwardConf) Reset() {
	*x = AwardConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardConf) ProtoMessage() {}

func (x *AwardConf) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardConf.ProtoReflect.Descriptor instead.
func (*AwardConf) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{106}
}

func (x *AwardConf) GetRange() *AwardConf_RankRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *AwardConf) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type MatchPlayerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid        string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	GameId        string `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	CurMatchId    string `protobuf:"bytes,3,opt,name=cur_match_id,json=curMatchId,proto3" json:"cur_match_id,omitempty"`
	CurMatchCid   string `protobuf:"bytes,4,opt,name=cur_match_cid,json=curMatchCid,proto3" json:"cur_match_cid,omitempty"`
	LastMatchTime int64  `protobuf:"varint,5,opt,name=last_match_time,json=lastMatchTime,proto3" json:"last_match_time,omitempty"`
}

func (x *MatchPlayerStatus) Reset() {
	*x = MatchPlayerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPlayerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPlayerStatus) ProtoMessage() {}

func (x *MatchPlayerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPlayerStatus.ProtoReflect.Descriptor instead.
func (*MatchPlayerStatus) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{107}
}

func (x *MatchPlayerStatus) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchPlayerStatus) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MatchPlayerStatus) GetCurMatchId() string {
	if x != nil {
		return x.CurMatchId
	}
	return ""
}

func (x *MatchPlayerStatus) GetCurMatchCid() string {
	if x != nil {
		return x.CurMatchCid
	}
	return ""
}

func (x *MatchPlayerStatus) GetLastMatchTime() int64 {
	if x != nil {
		return x.LastMatchTime
	}
	return 0
}

// 玩家匹配需要用的信息
type MatchingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid          string       `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`                                              // 玩家ID
	GameId          string       `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`                                // 游戏ID
	MatchCid        string       `protobuf:"bytes,3,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`                          // 比赛场次
	JoinTime        int64        `protobuf:"varint,4,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`                         // 开始匹配时间
	MasterPoints    int64        `protobuf:"varint,5,opt,name=master_points,json=masterPoints,proto3" json:"master_points,omitempty"`             // 当前大师分
	GameCount       int32        `protobuf:"varint,6,opt,name=game_count,json=gameCount,proto3" json:"game_count,omitempty"`                      // 比赛次数（已结算）
	RoundCount      int32        `protobuf:"varint,7,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`                   // 游戏局数
	LatestWinRate   float32      `protobuf:"fixed32,8,opt,name=latest_win_rate,json=latestWinRate,proto3" json:"latest_win_rate,omitempty"`       // 最近10局胜率
	Ctrl            int32        `protobuf:"varint,9,opt,name=ctrl,proto3" json:"ctrl,omitempty"`                                                 // 输赢控制
	WinLost         int32        `protobuf:"varint,10,opt,name=win_lost,json=winLost,proto3" json:"win_lost,omitempty"`                           // 输赢控制
	Newbie          int32        `protobuf:"varint,11,opt,name=newbie,proto3" json:"newbie,omitempty"`                                            // 新人标记
	Level           int32        `protobuf:"varint,12,opt,name=level,proto3" json:"level,omitempty"`                                              // 游戏等级
	PlatLevel       int32        `protobuf:"varint,13,opt,name=plat_level,json=platLevel,proto3" json:"plat_level,omitempty"`                     // 平台等级
	Exp             int32        `protobuf:"varint,14,opt,name=exp,proto3" json:"exp,omitempty"`                                                  // 游戏经验
	PlatExp         int32        `protobuf:"varint,15,opt,name=plat_exp,json=platExp,proto3" json:"plat_exp,omitempty"`                           // 平台经验
	RegTime         int64        `protobuf:"varint,16,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`                           // 游戏账号注册时间
	RealMasterPoint int64        `protobuf:"varint,17,opt,name=real_master_point,json=realMasterPoint,proto3" json:"real_master_point,omitempty"` // 实际大师分
	Pn              string       `protobuf:"bytes,18,opt,name=pn,proto3" json:"pn,omitempty"`
	PlatAid         int32        `protobuf:"varint,19,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
	MatchType       int32        `protobuf:"varint,20,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	ConfirmId       string       `protobuf:"bytes,21,opt,name=confirm_id,json=confirmId,proto3" json:"confirm_id,omitempty"` // 比赛ID
	ConfirmTime     int64        `protobuf:"varint,22,opt,name=confirm_time,json=confirmTime,proto3" json:"confirm_time,omitempty"`
	MatchCode       int32        `protobuf:"varint,23,opt,name=matchCode,proto3" json:"matchCode,omitempty"`
	MatchConfig     *MatchConfig `protobuf:"bytes,24,opt,name=match_config,json=matchConfig,proto3" json:"match_config,omitempty"`
	MatchingQueue   string       `protobuf:"bytes,25,opt,name=matching_queue,json=matchingQueue,proto3" json:"matching_queue,omitempty"` // 当前匹配队列
}

func (x *MatchingData) Reset() {
	*x = MatchingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingData) ProtoMessage() {}

func (x *MatchingData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingData.ProtoReflect.Descriptor instead.
func (*MatchingData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{108}
}

func (x *MatchingData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchingData) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *MatchingData) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchingData) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *MatchingData) GetMasterPoints() int64 {
	if x != nil {
		return x.MasterPoints
	}
	return 0
}

func (x *MatchingData) GetGameCount() int32 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *MatchingData) GetRoundCount() int32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *MatchingData) GetLatestWinRate() float32 {
	if x != nil {
		return x.LatestWinRate
	}
	return 0
}

func (x *MatchingData) GetCtrl() int32 {
	if x != nil {
		return x.Ctrl
	}
	return 0
}

func (x *MatchingData) GetWinLost() int32 {
	if x != nil {
		return x.WinLost
	}
	return 0
}

func (x *MatchingData) GetNewbie() int32 {
	if x != nil {
		return x.Newbie
	}
	return 0
}

func (x *MatchingData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MatchingData) GetPlatLevel() int32 {
	if x != nil {
		return x.PlatLevel
	}
	return 0
}

func (x *MatchingData) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *MatchingData) GetPlatExp() int32 {
	if x != nil {
		return x.PlatExp
	}
	return 0
}

func (x *MatchingData) GetRegTime() int64 {
	if x != nil {
		return x.RegTime
	}
	return 0
}

func (x *MatchingData) GetRealMasterPoint() int64 {
	if x != nil {
		return x.RealMasterPoint
	}
	return 0
}

func (x *MatchingData) GetPn() string {
	if x != nil {
		return x.Pn
	}
	return ""
}

func (x *MatchingData) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *MatchingData) GetMatchType() int32 {
	if x != nil {
		return x.MatchType
	}
	return 0
}

func (x *MatchingData) GetConfirmId() string {
	if x != nil {
		return x.ConfirmId
	}
	return ""
}

func (x *MatchingData) GetConfirmTime() int64 {
	if x != nil {
		return x.ConfirmTime
	}
	return 0
}

func (x *MatchingData) GetMatchCode() int32 {
	if x != nil {
		return x.MatchCode
	}
	return 0
}

func (x *MatchingData) GetMatchConfig() *MatchConfig {
	if x != nil {
		return x.MatchConfig
	}
	return nil
}

func (x *MatchingData) GetMatchingQueue() string {
	if x != nil {
		return x.MatchingQueue
	}
	return ""
}

type GameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid         string  `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	GameCount      int32   `protobuf:"varint,2,opt,name=game_count,json=gameCount,proto3" json:"game_count,omitempty"`
	PlatGameCount  int32   `protobuf:"varint,3,opt,name=plat_game_count,json=platGameCount,proto3" json:"plat_game_count,omitempty"`
	RoundCount     int32   `protobuf:"varint,4,opt,name=round_count,json=roundCount,proto3" json:"round_count,omitempty"`
	PlatRoundCount int32   `protobuf:"varint,5,opt,name=plat_round_count,json=platRoundCount,proto3" json:"plat_round_count,omitempty"`
	WinCount       int32   `protobuf:"varint,6,opt,name=win_count,json=winCount,proto3" json:"win_count,omitempty"`
	PlatWinCount   int32   `protobuf:"varint,7,opt,name=plat_win_count,json=platWinCount,proto3" json:"plat_win_count,omitempty"`
	MasterPoints   int64   `protobuf:"varint,8,opt,name=master_points,json=masterPoints,proto3" json:"master_points,omitempty"`
	Last10Rounds   []int32 `protobuf:"varint,11,rep,packed,name=last10_rounds,json=last10Rounds,proto3" json:"last10_rounds,omitempty"` // 最近10局
	Last10WinRate  float32 `protobuf:"fixed32,12,opt,name=last10_win_rate,json=last10WinRate,proto3" json:"last10_win_rate,omitempty"`  // 最近10局胜率
	GameId         string  `protobuf:"bytes,13,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *GameResult) Reset() {
	*x = GameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResult) ProtoMessage() {}

func (x *GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResult.ProtoReflect.Descriptor instead.
func (*GameResult) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{109}
}

func (x *GameResult) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GameResult) GetGameCount() int32 {
	if x != nil {
		return x.GameCount
	}
	return 0
}

func (x *GameResult) GetPlatGameCount() int32 {
	if x != nil {
		return x.PlatGameCount
	}
	return 0
}

func (x *GameResult) GetRoundCount() int32 {
	if x != nil {
		return x.RoundCount
	}
	return 0
}

func (x *GameResult) GetPlatRoundCount() int32 {
	if x != nil {
		return x.PlatRoundCount
	}
	return 0
}

func (x *GameResult) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

func (x *GameResult) GetPlatWinCount() int32 {
	if x != nil {
		return x.PlatWinCount
	}
	return 0
}

func (x *GameResult) GetMasterPoints() int64 {
	if x != nil {
		return x.MasterPoints
	}
	return 0
}

func (x *GameResult) GetLast10Rounds() []int32 {
	if x != nil {
		return x.Last10Rounds
	}
	return nil
}

func (x *GameResult) GetLast10WinRate() float32 {
	if x != nil {
		return x.Last10WinRate
	}
	return 0
}

func (x *GameResult) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type BasePlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid    string  `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Uuid      string  `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Pn        string  `protobuf:"bytes,3,opt,name=pn,proto3" json:"pn,omitempty"`
	HeadImage string  `protobuf:"bytes,4,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"`
	AreaInfo  string  `protobuf:"bytes,5,opt,name=area_info,json=areaInfo,proto3" json:"area_info,omitempty"`
	Nickname  string  `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RegTime   int64   `protobuf:"varint,7,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`
	PlatAid   int32   `protobuf:"varint,8,opt,name=plat_aid,json=platAid,proto3" json:"plat_aid,omitempty"`
	Flag      int32   `protobuf:"varint,9,opt,name=flag,proto3" json:"flag,omitempty"`
	GameId    string  `protobuf:"bytes,10,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Sex       int32   `protobuf:"varint,11,opt,name=sex,proto3" json:"sex,omitempty"`
	Props     []*Item `protobuf:"bytes,12,rep,name=props,proto3" json:"props,omitempty"`
}

func (x *BasePlayerInfo) Reset() {
	*x = BasePlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasePlayerInfo) ProtoMessage() {}

func (x *BasePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasePlayerInfo.ProtoReflect.Descriptor instead.
func (*BasePlayerInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{110}
}

func (x *BasePlayerInfo) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *BasePlayerInfo) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BasePlayerInfo) GetPn() string {
	if x != nil {
		return x.Pn
	}
	return ""
}

func (x *BasePlayerInfo) GetHeadImage() string {
	if x != nil {
		return x.HeadImage
	}
	return ""
}

func (x *BasePlayerInfo) GetAreaInfo() string {
	if x != nil {
		return x.AreaInfo
	}
	return ""
}

func (x *BasePlayerInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *BasePlayerInfo) GetRegTime() int64 {
	if x != nil {
		return x.RegTime
	}
	return 0
}

func (x *BasePlayerInfo) GetPlatAid() int32 {
	if x != nil {
		return x.PlatAid
	}
	return 0
}

func (x *BasePlayerInfo) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *BasePlayerInfo) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *BasePlayerInfo) GetSex() int32 {
	if x != nil {
		return x.Sex
	}
	return 0
}

func (x *BasePlayerInfo) GetProps() []*Item {
	if x != nil {
		return x.Props
	}
	return nil
}

type GetShareCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid   string   `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	NotifyList []string `protobuf:"bytes,2,rep,name=notify_list,json=notifyList,proto3" json:"notify_list,omitempty"` // 通知玩家列表
}

func (x *GetShareCodeReq) Reset() {
	*x = GetShareCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareCodeReq) ProtoMessage() {}

func (x *GetShareCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareCodeReq.ProtoReflect.Descriptor instead.
func (*GetShareCodeReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{111}
}

func (x *GetShareCodeReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *GetShareCodeReq) GetNotifyList() []string {
	if x != nil {
		return x.NotifyList
	}
	return nil
}

type GetShareCodeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`                               // 错误
	ShardCode int32  `protobuf:"varint,2,opt,name=shard_code,json=shardCode,proto3" json:"shard_code,omitempty"` // 邀请码
	ExpireAt  int64  `protobuf:"varint,3,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`    // 过期时间
}

func (x *GetShareCodeRsp) Reset() {
	*x = GetShareCodeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareCodeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareCodeRsp) ProtoMessage() {}

func (x *GetShareCodeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareCodeRsp.ProtoReflect.Descriptor instead.
func (*GetShareCodeRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{112}
}

func (x *GetShareCodeRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetShareCodeRsp) GetShardCode() int32 {
	if x != nil {
		return x.ShardCode
	}
	return 0
}

func (x *GetShareCodeRsp) GetExpireAt() int64 {
	if x != nil {
		return x.ExpireAt
	}
	return 0
}

// 邀请比赛消息
type MatchInviteNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid  string         `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`     // 场次ID
	ShareCode int32          `protobuf:"varint,2,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"` // 邀请码
	Inviter   string         `protobuf:"bytes,3,opt,name=inviter,proto3" json:"inviter,omitempty"`                       // 邀请人
	OppList   []*PlayerBrief `protobuf:"bytes,4,rep,name=opp_list,json=oppList,proto3" json:"opp_list,omitempty"`        // 对手列表
}

func (x *MatchInviteNot) Reset() {
	*x = MatchInviteNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInviteNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInviteNot) ProtoMessage() {}

func (x *MatchInviteNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInviteNot.ProtoReflect.Descriptor instead.
func (*MatchInviteNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{113}
}

func (x *MatchInviteNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *MatchInviteNot) GetShareCode() int32 {
	if x != nil {
		return x.ShareCode
	}
	return 0
}

func (x *MatchInviteNot) GetInviter() string {
	if x != nil {
		return x.Inviter
	}
	return ""
}

func (x *MatchInviteNot) GetOppList() []*PlayerBrief {
	if x != nil {
		return x.OppList
	}
	return nil
}

// 对方接受了邀请通知
type AcceptedInviteNot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid  string                   `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`                            // 场次ID
	ShareCode int32                    `protobuf:"varint,2,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`                        // 邀请码
	Inviter   string                   `protobuf:"bytes,3,opt,name=inviter,proto3" json:"inviter,omitempty"`                                              // 邀请人
	OppList   []string                 `protobuf:"bytes,4,rep,name=opp_list,json=oppList,proto3" json:"opp_list,omitempty"`                               // 对手列表
	Invitee   string                   `protobuf:"bytes,5,opt,name=invitee,proto3" json:"invitee,omitempty"`                                              // 被邀请人
	Accepted  AcceptedInviteNot_OpCode `protobuf:"varint,6,opt,name=accepted,proto3,enum=proto.match.AcceptedInviteNot_OpCode" json:"accepted,omitempty"` // 接受/拒绝通知
}

func (x *AcceptedInviteNot) Reset() {
	*x = AcceptedInviteNot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedInviteNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedInviteNot) ProtoMessage() {}

func (x *AcceptedInviteNot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedInviteNot.ProtoReflect.Descriptor instead.
func (*AcceptedInviteNot) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{114}
}

func (x *AcceptedInviteNot) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *AcceptedInviteNot) GetShareCode() int32 {
	if x != nil {
		return x.ShareCode
	}
	return 0
}

func (x *AcceptedInviteNot) GetInviter() string {
	if x != nil {
		return x.Inviter
	}
	return ""
}

func (x *AcceptedInviteNot) GetOppList() []string {
	if x != nil {
		return x.OppList
	}
	return nil
}

func (x *AcceptedInviteNot) GetInvitee() string {
	if x != nil {
		return x.Invitee
	}
	return ""
}

func (x *AcceptedInviteNot) GetAccepted() AcceptedInviteNot_OpCode {
	if x != nil {
		return x.Accepted
	}
	return AcceptedInviteNot_OP_REFUSE
}

type AcceptedInviteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchCid  string                   `protobuf:"bytes,1,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`                            // 场次ID
	ShareCode int32                    `protobuf:"varint,2,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`                        // 邀请码
	Accepted  AcceptedInviteReq_OpCode `protobuf:"varint,6,opt,name=accepted,proto3,enum=proto.match.AcceptedInviteReq_OpCode" json:"accepted,omitempty"` // 接受/拒绝通知
}

func (x *AcceptedInviteReq) Reset() {
	*x = AcceptedInviteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedInviteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedInviteReq) ProtoMessage() {}

func (x *AcceptedInviteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedInviteReq.ProtoReflect.Descriptor instead.
func (*AcceptedInviteReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{115}
}

func (x *AcceptedInviteReq) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *AcceptedInviteReq) GetShareCode() int32 {
	if x != nil {
		return x.ShareCode
	}
	return 0
}

func (x *AcceptedInviteReq) GetAccepted() AcceptedInviteReq_OpCode {
	if x != nil {
		return x.Accepted
	}
	return AcceptedInviteReq_OP_REFUSE
}

type AcceptedInviteRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	MatchCid  string `protobuf:"bytes,2,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`     // 场次ID
	ShareCode int32  `protobuf:"varint,3,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"` // 邀请码
}

func (x *AcceptedInviteRsp) Reset() {
	*x = AcceptedInviteRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptedInviteRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptedInviteRsp) ProtoMessage() {}

func (x *AcceptedInviteRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptedInviteRsp.ProtoReflect.Descriptor instead.
func (*AcceptedInviteRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{116}
}

func (x *AcceptedInviteRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *AcceptedInviteRsp) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *AcceptedInviteRsp) GetShareCode() int32 {
	if x != nil {
		return x.ShareCode
	}
	return 0
}

type UpdateMatchLabelsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    string   `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	AddList    []string `protobuf:"bytes,2,rep,name=add_list,json=addList,proto3" json:"add_list,omitempty"`          // 新增标签列表
	RemoveList []string `protobuf:"bytes,3,rep,name=remove_list,json=removeList,proto3" json:"remove_list,omitempty"` // 移除标签列表
	PlayerList []string `protobuf:"bytes,4,rep,name=player_list,json=playerList,proto3" json:"player_list,omitempty"` // 添加玩家，如果不设置此参数，则直接对所有参与到本场比赛的玩家都会生效
}

func (x *UpdateMatchLabelsReq) Reset() {
	*x = UpdateMatchLabelsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchLabelsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchLabelsReq) ProtoMessage() {}

func (x *UpdateMatchLabelsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchLabelsReq.ProtoReflect.Descriptor instead.
func (*UpdateMatchLabelsReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{117}
}

func (x *UpdateMatchLabelsReq) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *UpdateMatchLabelsReq) GetAddList() []string {
	if x != nil {
		return x.AddList
	}
	return nil
}

func (x *UpdateMatchLabelsReq) GetRemoveList() []string {
	if x != nil {
		return x.RemoveList
	}
	return nil
}

func (x *UpdateMatchLabelsReq) GetPlayerList() []string {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type UpdateMatchLabelsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *UpdateMatchLabelsRsp) Reset() {
	*x = UpdateMatchLabelsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMatchLabelsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMatchLabelsRsp) ProtoMessage() {}

func (x *UpdateMatchLabelsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMatchLabelsRsp.ProtoReflect.Descriptor instead.
func (*UpdateMatchLabelsRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{118}
}

func (x *UpdateMatchLabelsRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

// 机器人配置
type RobotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"use_robot"
	UseRobot bool `protobuf:"varint,1,opt,name=use_robot,json=useRobot,proto3" json:"use_robot,omitempty" bson:"use_robot"`
	//@inject_tag: bson:"join_wait_sec"
	JoinWaitSec int32 `protobuf:"varint,2,opt,name=join_wait_sec,json=joinWaitSec,proto3" json:"join_wait_sec,omitempty" bson:"join_wait_sec"`
	//@inject_tag: bson:"deviation"
	Deviation int32 `protobuf:"varint,3,opt,name=deviation,proto3" json:"deviation,omitempty" bson:"deviation"`
	//@inject_tag: bson:"need_robot_num"
	NeedRobotNum int32 `protobuf:"varint,4,opt,name=need_robot_num,json=needRobotNum,proto3" json:"need_robot_num,omitempty" bson:"need_robot_num"`
}

func (x *RobotConfig) Reset() {
	*x = RobotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotConfig) ProtoMessage() {}

func (x *RobotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotConfig.ProtoReflect.Descriptor instead.
func (*RobotConfig) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{119}
}

func (x *RobotConfig) GetUseRobot() bool {
	if x != nil {
		return x.UseRobot
	}
	return false
}

func (x *RobotConfig) GetJoinWaitSec() int32 {
	if x != nil {
		return x.JoinWaitSec
	}
	return 0
}

func (x *RobotConfig) GetDeviation() int32 {
	if x != nil {
		return x.Deviation
	}
	return 0
}

func (x *RobotConfig) GetNeedRobotNum() int32 {
	if x != nil {
		return x.NeedRobotNum
	}
	return 0
}

type MatchConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//@inject_tag: bson:"robot_config"
	RobotConfig *RobotConfig `protobuf:"bytes,1,opt,name=robot_config,json=robotConfig,proto3" json:"robot_config,omitempty" bson:"robot_config"` // 匹配控制
	//@inject_tag: bson:"metadata"
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"metadata"`
}

func (x *MatchConfig) Reset() {
	*x = MatchConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchConfig) ProtoMessage() {}

func (x *MatchConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchConfig.ProtoReflect.Descriptor instead.
func (*MatchConfig) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{120}
}

func (x *MatchConfig) GetRobotConfig() *RobotConfig {
	if x != nil {
		return x.RobotConfig
	}
	return nil
}

func (x *MatchConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetStatisticsMetricsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid  string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	GameGid string `protobuf:"bytes,2,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`
	Label   string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"` // 默认为所有游戏, 可以指定标签
}

func (x *GetStatisticsMetricsReq) Reset() {
	*x = GetStatisticsMetricsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticsMetricsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticsMetricsReq) ProtoMessage() {}

func (x *GetStatisticsMetricsReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticsMetricsReq.ProtoReflect.Descriptor instead.
func (*GetStatisticsMetricsReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{121}
}

func (x *GetStatisticsMetricsReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetStatisticsMetricsReq) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

func (x *GetStatisticsMetricsReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type GetStatisticsMetricsRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err        string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	TotalCount int32  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总局数
	WinCount   int32  `protobuf:"varint,3,opt,name=win_count,json=winCount,proto3" json:"win_count,omitempty"`       // 胜利局数
}

func (x *GetStatisticsMetricsRsp) Reset() {
	*x = GetStatisticsMetricsRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatisticsMetricsRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatisticsMetricsRsp) ProtoMessage() {}

func (x *GetStatisticsMetricsRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatisticsMetricsRsp.ProtoReflect.Descriptor instead.
func (*GetStatisticsMetricsRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{122}
}

func (x *GetStatisticsMetricsRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetStatisticsMetricsRsp) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetStatisticsMetricsRsp) GetWinCount() int32 {
	if x != nil {
		return x.WinCount
	}
	return 0
}

type GetLatestRoundListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics string `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Openid  string `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	GameGid string `protobuf:"bytes,3,opt,name=game_gid,json=gameGid,proto3" json:"game_gid,omitempty"`
}

func (x *GetLatestRoundListReq) Reset() {
	*x = GetLatestRoundListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRoundListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRoundListReq) ProtoMessage() {}

func (x *GetLatestRoundListReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRoundListReq.ProtoReflect.Descriptor instead.
func (*GetLatestRoundListReq) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{123}
}

func (x *GetLatestRoundListReq) GetMetrics() string {
	if x != nil {
		return x.Metrics
	}
	return ""
}

func (x *GetLatestRoundListReq) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *GetLatestRoundListReq) GetGameGid() string {
	if x != nil {
		return x.GameGid
	}
	return ""
}

type GetLatestRoundListRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err       string                             `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
	RoundList []*GetLatestRoundListRsp_RoundInfo `protobuf:"bytes,2,rep,name=round_list,json=roundList,proto3" json:"round_list,omitempty"`
}

func (x *GetLatestRoundListRsp) Reset() {
	*x = GetLatestRoundListRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRoundListRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRoundListRsp) ProtoMessage() {}

func (x *GetLatestRoundListRsp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRoundListRsp.ProtoReflect.Descriptor instead.
func (*GetLatestRoundListRsp) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{124}
}

func (x *GetLatestRoundListRsp) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *GetLatestRoundListRsp) GetRoundList() []*GetLatestRoundListRsp_RoundInfo {
	if x != nil {
		return x.RoundList
	}
	return nil
}

type ListRewardConfigRsp_AwardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardId   int32   `protobuf:"varint,1,opt,name=award_id,json=awardId,proto3" json:"award_id,omitempty"`
	Major     int32   `protobuf:"varint,2,opt,name=major,proto3" json:"major,omitempty"`
	Minor     int32   `protobuf:"varint,3,opt,name=minor,proto3" json:"minor,omitempty"`
	AwardList []*Item `protobuf:"bytes,4,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`
}

func (x *ListRewardConfigRsp_AwardInfo) Reset() {
	*x = ListRewardConfigRsp_AwardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardConfigRsp_AwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardConfigRsp_AwardInfo) ProtoMessage() {}

func (x *ListRewardConfigRsp_AwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardConfigRsp_AwardInfo.ProtoReflect.Descriptor instead.
func (*ListRewardConfigRsp_AwardInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListRewardConfigRsp_AwardInfo) GetAwardId() int32 {
	if x != nil {
		return x.AwardId
	}
	return 0
}

func (x *ListRewardConfigRsp_AwardInfo) GetMajor() int32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *ListRewardConfigRsp_AwardInfo) GetMinor() int32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

func (x *ListRewardConfigRsp_AwardInfo) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type ListRewardStatusRsp_AwardStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwardId int32 `protobuf:"varint,1,opt,name=award_id,json=awardId,proto3" json:"award_id,omitempty"`
	Status  int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` // 0条件不满足 1未领取 2已领取
}

func (x *ListRewardStatusRsp_AwardStatus) Reset() {
	*x = ListRewardStatusRsp_AwardStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardStatusRsp_AwardStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardStatusRsp_AwardStatus) ProtoMessage() {}

func (x *ListRewardStatusRsp_AwardStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardStatusRsp_AwardStatus.ProtoReflect.Descriptor instead.
func (*ListRewardStatusRsp_AwardStatus) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListRewardStatusRsp_AwardStatus) GetAwardId() int32 {
	if x != nil {
		return x.AwardId
	}
	return 0
}

func (x *ListRewardStatusRsp_AwardStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TodayLikeRecordRsp_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid    string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`        // 被点赞玩家ID
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 点赞时间
}

func (x *TodayLikeRecordRsp_Record) Reset() {
	*x = TodayLikeRecordRsp_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TodayLikeRecordRsp_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodayLikeRecordRsp_Record) ProtoMessage() {}

func (x *TodayLikeRecordRsp_Record) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodayLikeRecordRsp_Record.ProtoReflect.Descriptor instead.
func (*TodayLikeRecordRsp_Record) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TodayLikeRecordRsp_Record) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *TodayLikeRecordRsp_Record) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ListGradeRecordRsp_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeasonId        string     `protobuf:"bytes,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	StartTime       int64      `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                       // 开始时间
	StopTime        int64      `protobuf:"varint,3,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`                          // 结束时间
	Grade           *GradeData `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"`                                                 //最终段位
	MaxGrade        *GradeData `protobuf:"bytes,5,opt,name=max_grade,json=maxGrade,proto3" json:"max_grade,omitempty"`                           // 最高段位
	TotalCnt        int32      `protobuf:"varint,6,opt,name=total_cnt,json=totalCnt,proto3" json:"total_cnt,omitempty"`                          //总局数
	WinCnt          int32      `protobuf:"varint,7,opt,name=win_cnt,json=winCnt,proto3" json:"win_cnt,omitempty"`                                // 比赛胜利次数
	MaxWinStreakCnt int32      `protobuf:"varint,8,opt,name=max_win_streak_cnt,json=maxWinStreakCnt,proto3" json:"max_win_streak_cnt,omitempty"` // 最高连胜
}

func (x *ListGradeRecordRsp_Record) Reset() {
	*x = ListGradeRecordRsp_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGradeRecordRsp_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGradeRecordRsp_Record) ProtoMessage() {}

func (x *ListGradeRecordRsp_Record) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGradeRecordRsp_Record.ProtoReflect.Descriptor instead.
func (*ListGradeRecordRsp_Record) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ListGradeRecordRsp_Record) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *ListGradeRecordRsp_Record) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *ListGradeRecordRsp_Record) GetStopTime() int64 {
	if x != nil {
		return x.StopTime
	}
	return 0
}

func (x *ListGradeRecordRsp_Record) GetGrade() *GradeData {
	if x != nil {
		return x.Grade
	}
	return nil
}

func (x *ListGradeRecordRsp_Record) GetMaxGrade() *GradeData {
	if x != nil {
		return x.MaxGrade
	}
	return nil
}

func (x *ListGradeRecordRsp_Record) GetTotalCnt() int32 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

func (x *ListGradeRecordRsp_Record) GetWinCnt() int32 {
	if x != nil {
		return x.WinCnt
	}
	return 0
}

func (x *ListGradeRecordRsp_Record) GetMaxWinStreakCnt() int32 {
	if x != nil {
		return x.MaxWinStreakCnt
	}
	return 0
}

type GetLeagueAwardConfigRsp_Award struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start    int32   `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End      int32   `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	ItemList []*Item `protobuf:"bytes,3,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *GetLeagueAwardConfigRsp_Award) Reset() {
	*x = GetLeagueAwardConfigRsp_Award{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeagueAwardConfigRsp_Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeagueAwardConfigRsp_Award) ProtoMessage() {}

func (x *GetLeagueAwardConfigRsp_Award) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeagueAwardConfigRsp_Award.ProtoReflect.Descriptor instead.
func (*GetLeagueAwardConfigRsp_Award) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{74, 0}
}

func (x *GetLeagueAwardConfigRsp_Award) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GetLeagueAwardConfigRsp_Award) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *GetLeagueAwardConfigRsp_Award) GetItemList() []*Item {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type GetPlayerProfileRsp_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxScore int64  `protobuf:"varint,1,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	MatchId  string `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *GetPlayerProfileRsp_Record) Reset() {
	*x = GetPlayerProfileRsp_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerProfileRsp_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerProfileRsp_Record) ProtoMessage() {}

func (x *GetPlayerProfileRsp_Record) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerProfileRsp_Record.ProtoReflect.Descriptor instead.
func (*GetPlayerProfileRsp_Record) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{78, 0}
}

func (x *GetPlayerProfileRsp_Record) GetMaxScore() int64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *GetPlayerProfileRsp_Record) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

type MatchResultNot_RankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openid     string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Rank       int64  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	JoinTime   int64  `protobuf:"varint,3,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`       // 玩家加入比赛时间
	MatchCount int32  `protobuf:"varint,4,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"` // 比赛加入次数，部分比赛，玩家淘汰后还可以再次加入
}

func (x *MatchResultNot_RankData) Reset() {
	*x = MatchResultNot_RankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResultNot_RankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultNot_RankData) ProtoMessage() {}

func (x *MatchResultNot_RankData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultNot_RankData.ProtoReflect.Descriptor instead.
func (*MatchResultNot_RankData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{81, 0}
}

func (x *MatchResultNot_RankData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *MatchResultNot_RankData) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MatchResultNot_RankData) GetJoinTime() int64 {
	if x != nil {
		return x.JoinTime
	}
	return 0
}

func (x *MatchResultNot_RankData) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

type ActivityMatchRankListRsp_RankData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank      int64   `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Openid    string  `protobuf:"bytes,2,opt,name=openid,proto3" json:"openid,omitempty"`
	Score     int64   `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`                         // 得分
	Nickname  string  `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`                    // 昵称
	HeadImage string  `protobuf:"bytes,5,opt,name=head_image,json=headImage,proto3" json:"head_image,omitempty"` // 头像
	AreaInfo  string  `protobuf:"bytes,6,opt,name=area_info,json=areaInfo,proto3" json:"area_info,omitempty"`    // 区域信息
	Props     []*Item `protobuf:"bytes,7,rep,name=props,proto3" json:"props,omitempty"`                          // 玩家展示道具
}

func (x *ActivityMatchRankListRsp_RankData) Reset() {
	*x = ActivityMatchRankListRsp_RankData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityMatchRankListRsp_RankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityMatchRankListRsp_RankData) ProtoMessage() {}

func (x *ActivityMatchRankListRsp_RankData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityMatchRankListRsp_RankData.ProtoReflect.Descriptor instead.
func (*ActivityMatchRankListRsp_RankData) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{94, 0}
}

func (x *ActivityMatchRankListRsp_RankData) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *ActivityMatchRankListRsp_RankData) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *ActivityMatchRankListRsp_RankData) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *ActivityMatchRankListRsp_RankData) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ActivityMatchRankListRsp_RankData) GetHeadImage() string {
	if x != nil {
		return x.HeadImage
	}
	return ""
}

func (x *ActivityMatchRankListRsp_RankData) GetAreaInfo() string {
	if x != nil {
		return x.AreaInfo
	}
	return ""
}

func (x *ActivityMatchRankListRsp_RankData) GetProps() []*Item {
	if x != nil {
		return x.Props
	}
	return nil
}

type MatchingPlayer_Matching struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchList []string `protobuf:"bytes,1,rep,name=match_list,json=matchList,proto3" json:"match_list,omitempty"`
}

func (x *MatchingPlayer_Matching) Reset() {
	*x = MatchingPlayer_Matching{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingPlayer_Matching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingPlayer_Matching) ProtoMessage() {}

func (x *MatchingPlayer_Matching) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingPlayer_Matching.ProtoReflect.Descriptor instead.
func (*MatchingPlayer_Matching) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{97, 0}
}

func (x *MatchingPlayer_Matching) GetMatchList() []string {
	if x != nil {
		return x.MatchList
	}
	return nil
}

type MatchInfo_Award struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankBegin int32   `protobuf:"varint,1,opt,name=rank_begin,json=rankBegin,proto3" json:"rank_begin,omitempty"` // 起始名次
	RankEnd   int32   `protobuf:"varint,2,opt,name=rank_end,json=rankEnd,proto3" json:"rank_end,omitempty"`       // 结束名次
	AwardList []*Item `protobuf:"bytes,3,rep,name=award_list,json=awardList,proto3" json:"award_list,omitempty"`  // 获得的奖励
}

func (x *MatchInfo_Award) Reset() {
	*x = MatchInfo_Award{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo_Award) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo_Award) ProtoMessage() {}

func (x *MatchInfo_Award) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo_Award.ProtoReflect.Descriptor instead.
func (*MatchInfo_Award) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{102, 0}
}

func (x *MatchInfo_Award) GetRankBegin() int32 {
	if x != nil {
		return x.RankBegin
	}
	return 0
}

func (x *MatchInfo_Award) GetRankEnd() int32 {
	if x != nil {
		return x.RankEnd
	}
	return 0
}

func (x *MatchInfo_Award) GetAwardList() []*Item {
	if x != nil {
		return x.AwardList
	}
	return nil
}

type AwardConf_RankRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *AwardConf_RankRange) Reset() {
	*x = AwardConf_RankRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardConf_RankRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardConf_RankRange) ProtoMessage() {}

func (x *AwardConf_RankRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardConf_RankRange.ProtoReflect.Descriptor instead.
func (*AwardConf_RankRange) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{106, 0}
}

func (x *AwardConf_RankRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *AwardConf_RankRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

type GetLatestRoundListRsp_RoundInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	RoundId    string `protobuf:"bytes,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	MatchCid   string `protobuf:"bytes,3,opt,name=match_cid,json=matchCid,proto3" json:"match_cid,omitempty"`
	FinishTime int64  `protobuf:"varint,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
}

func (x *GetLatestRoundListRsp_RoundInfo) Reset() {
	*x = GetLatestRoundListRsp_RoundInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_match_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestRoundListRsp_RoundInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestRoundListRsp_RoundInfo) ProtoMessage() {}

func (x *GetLatestRoundListRsp_RoundInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_match_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestRoundListRsp_RoundInfo.ProtoReflect.Descriptor instead.
func (*GetLatestRoundListRsp_RoundInfo) Descriptor() ([]byte, []int) {
	return file_proto_match_proto_rawDescGZIP(), []int{124, 0}
}

func (x *GetLatestRoundListRsp_RoundInfo) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetLatestRoundListRsp_RoundInfo) GetRoundId() string {
	if x != nil {
		return x.RoundId
	}
	return ""
}

func (x *GetLatestRoundListRsp_RoundInfo) GetMatchCid() string {
	if x != nil {
		return x.MatchCid
	}
	return ""
}

func (x *GetLatestRoundListRsp_RoundInfo) GetFinishTime() int64 {
	if x != nil {
		return x.FinishTime
	}
	return 0
}

var File_proto_match_proto protoreflect.FileDescriptor

var file_proto_match_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x4d, 0x61, 0x78, 0x12, 0x3a, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x0a, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xc7, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x53,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x30, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x22, 0xf9, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x84, 0x01, 0x0a, 0x09, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x22, 0xb8, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x4d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x40, 0x0a, 0x0b, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x29, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x22, 0xe6, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x69, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x07, 0x6d, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x06, 0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x10, 0x4c, 0x69,
	0x6b, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x10, 0x4c, 0x69, 0x6b, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x72,
	0x70, 0x6c, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x22, 0xed, 0x01, 0x0a, 0x12, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x1a, 0x3e, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x22, 0x55, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0x4b,
	0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0xbe, 0x02, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x5f,
	0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x57, 0x69,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x3c, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x92, 0x03, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0xa7, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x6e,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x43,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6b, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6e, 0x74, 0x22,
	0x10, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x22, 0x50, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x98, 0x03,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70,
	0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x76, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x40,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x2d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0xc3, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xa0, 0x02,
	0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73,
	0x22, 0xc6, 0x04, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x76, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x0c, 0x4a,
	0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x7c, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8f, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x52, 0x0c, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x7f, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x70, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x22, 0x5b, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0xc8, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x4e, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x0d, 0x6f,
	0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x0c, 0x6f, 0x70,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x77, 0x0a, 0x08, 0x52, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69,
	0x64, 0x22, 0x47, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x09, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x72, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3d, 0x0a, 0x0d, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x52, 0x0c, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f,
	0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x2c, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0x73, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x1e,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x10, 0x01, 0x22, 0xf5,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x5f, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74,
	0x41, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65,
	0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22,
	0x53, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x12, 0x32, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x22, 0xa8, 0x01, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x22, 0x36, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x73, 0x70, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x5f, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22,
	0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0xe1, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x62,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x40, 0x0a, 0x06, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x74, 0x22, 0xee, 0x04, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69,
	0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x4e, 0x6f, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x74, 0x0a,
	0x08, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x96, 0x04, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x47, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x22, 0xca, 0x04, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x27, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xa1, 0x02, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x27, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x30, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22,
	0xbc, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x5d,
	0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb3, 0x03,
	0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a,
	0x07, 0x6d, 0x79, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x6d, 0x79, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0xcd, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x70, 0x72,
	0x6f, 0x70, 0x73, 0x22, 0x36, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xfe, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x29, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x61, 0x0a,
	0x0d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa1, 0x01, 0x0a, 0x14, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6c, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x6c, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x98, 0x06,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6c, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x50,
	0x6c, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x50,
	0x6c, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x73, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x61, 0x6e, 0x6b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x45, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x51, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2d, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0x38, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x33, 0x0a, 0x09, 0x52, 0x61, 0x6e,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xb2,
	0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x84, 0x06, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x77,
	0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x74, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x74, 0x72, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x77, 0x62, 0x69, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x65, 0x77,
	0x62, 0x69, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x74, 0x45, 0x78, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x61,
	0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x70, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x84, 0x03, 0x0a, 0x0a, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x57, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x31, 0x30, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x31, 0x30, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x31, 0x30, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x31,
	0x30, 0x57, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0xc2, 0x02, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x65, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x5f, 0x61, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x74, 0x41, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c,
	0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x27, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x07, 0x6f,
	0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x10, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x22,
	0x61, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x92, 0x01,
	0x0a, 0x0b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e,
	0x75, 0x6d, 0x22, 0xcb, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x47, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x64, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x67, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x47, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x7f,
	0x0a, 0x09, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x2a,
	0x3f, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03,
	0x2a, 0x26, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x70, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x63, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x42, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x42, 0x54, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x42, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x42, 0x54, 0x5f,
	0x47, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0x03, 0x2a, 0x40, 0x0a,
	0x0a, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63,
	0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x2a,
	0xa2, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x56, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x75, 0x74, 0x69, 0x6c, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x10, 0x06, 0x32, 0xd4, 0x0e, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43,
	0x0a, 0x09, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x67, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x32, 0x82, 0x07, 0x0a, 0x08,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x70, 0x63, 0x12, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x73, 0x70, 0x22, 0x00,
	0x32, 0xb3, 0x07, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_match_proto_rawDescOnce sync.Once
	file_proto_match_proto_rawDescData = file_proto_match_proto_rawDesc
)

func file_proto_match_proto_rawDescGZIP() []byte {
	file_proto_match_proto_rawDescOnce.Do(func() {
		file_proto_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_match_proto_rawDescData)
	})
	return file_proto_match_proto_rawDescData
}

var file_proto_match_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_proto_match_proto_msgTypes = make([]protoimpl.MessageInfo, 147)
var file_proto_match_proto_goTypes = []interface{}{
	(MatchStatus)(0),                          // 0: proto.match.MatchStatus
	(ConfirmOp)(0),                            // 1: proto.match.ConfirmOp
	(SubmitScoreType)(0),                      // 2: proto.match.SubmitScoreType
	(LeagueType)(0),                           // 3: proto.match.LeagueType
	(MatchType)(0),                            // 4: proto.match.MatchType
	(Item_Type)(0),                            // 5: proto.match.Item.Type
	(GetCurLeagueReq_Type)(0),                 // 6: proto.match.GetCurLeagueReq.Type
	(AcceptedInviteNot_OpCode)(0),             // 7: proto.match.AcceptedInviteNot.OpCode
	(AcceptedInviteReq_OpCode)(0),             // 8: proto.match.AcceptedInviteReq.OpCode
	(*GetCurSeasonReq)(nil),                   // 9: proto.match.GetCurSeasonReq
	(*GetCurSeasonRsp)(nil),                   // 10: proto.match.GetCurSeasonRsp
	(*SeasonSettle)(nil),                      // 11: proto.match.SeasonSettle
	(*GetChangeLogReq)(nil),                   // 12: proto.match.GetChangeLogReq
	(*GetChangeLogRsp)(nil),                   // 13: proto.match.GetChangeLogRsp
	(*ListConfigReq)(nil),                     // 14: proto.match.ListConfigReq
	(*GradeConfig)(nil),                       // 15: proto.match.GradeConfig
	(*ListConfigRsp)(nil),                     // 16: proto.match.ListConfigRsp
	(*ListRewardConfigReq)(nil),               // 17: proto.match.ListRewardConfigReq
	(*ListRewardConfigRsp)(nil),               // 18: proto.match.ListRewardConfigRsp
	(*ListRewardStatusReq)(nil),               // 19: proto.match.ListRewardStatusReq
	(*ListRewardStatusRsp)(nil),               // 20: proto.match.ListRewardStatusRsp
	(*GetRewardReq)(nil),                      // 21: proto.match.GetRewardReq
	(*GetRewardRsp)(nil),                      // 22: proto.match.GetRewardRsp
	(*ListGradeRankReq)(nil),                  // 23: proto.match.ListGradeRankReq
	(*GradeRank)(nil),                         // 24: proto.match.GradeRank
	(*ListGradeRankRsp)(nil),                  // 25: proto.match.ListGradeRankRsp
	(*LikeGradeRankReq)(nil),                  // 26: proto.match.LikeGradeRankReq
	(*LikeGradeRankRsp)(nil),                  // 27: proto.match.LikeGradeRankRsp
	(*TodayLikeRecordReq)(nil),                // 28: proto.match.TodayLikeRecordReq
	(*TodayLikeRecordRsp)(nil),                // 29: proto.match.TodayLikeRecordRsp
	(*SeasonSettleReq)(nil),                   // 30: proto.match.SeasonSettleReq
	(*SeasonSettleRsp)(nil),                   // 31: proto.match.SeasonSettleRsp
	(*GetGradeReq)(nil),                       // 32: proto.match.GetGradeReq
	(*GradeData)(nil),                         // 33: proto.match.GradeData
	(*GetGradeRsp)(nil),                       // 34: proto.match.GetGradeRsp
	(*ListGradeRecordReq)(nil),                // 35: proto.match.ListGradeRecordReq
	(*ListGradeRecordRsp)(nil),                // 36: proto.match.ListGradeRecordRsp
	(*ProtectStarReq)(nil),                    // 37: proto.match.ProtectStarReq
	(*ProtectStarRsp)(nil),                    // 38: proto.match.ProtectStarRsp
	(*GetMatchReq)(nil),                       // 39: proto.match.GetMatchReq
	(*GetMatchRsp)(nil),                       // 40: proto.match.GetMatchRsp
	(*BattleInfo)(nil),                        // 41: proto.match.BattleInfo
	(*RoundData)(nil),                         // 42: proto.match.RoundData
	(*StageData)(nil),                         // 43: proto.match.StageData
	(*GetMatchAwardReq)(nil),                  // 44: proto.match.GetMatchAwardReq
	(*GetMatchAwardRsp)(nil),                  // 45: proto.match.GetMatchAwardRsp
	(*GetInProgressListReq)(nil),              // 46: proto.match.GetInProgressListReq
	(*BattleItem)(nil),                        // 47: proto.match.BattleItem
	(*BattingInfo)(nil),                       // 48: proto.match.BattingInfo
	(*GetInProgressListRsp)(nil),              // 49: proto.match.GetInProgressListRsp
	(*GetCompletedListReq)(nil),               // 50: proto.match.GetCompletedListReq
	(*GetCompletedListRsp)(nil),               // 51: proto.match.GetCompletedListRsp
	(*GetRoundRecordListReq)(nil),             // 52: proto.match.GetRoundRecordListReq
	(*GetRoundRecordListRsp)(nil),             // 53: proto.match.GetRoundRecordListRsp
	(*JoinMatchReq)(nil),                      // 54: proto.match.JoinMatchReq
	(*JoinMatchRsp)(nil),                      // 55: proto.match.JoinMatchRsp
	(*JoinMatchNot)(nil),                      // 56: proto.match.JoinMatchNot
	(*MatchingStatusNot)(nil),                 // 57: proto.match.MatchingStatusNot
	(*ConfirmationRequestNot)(nil),            // 58: proto.match.ConfirmationRequestNot
	(*MatchConfirmReq)(nil),                   // 59: proto.match.MatchConfirmReq
	(*MatchConfirmRsp)(nil),                   // 60: proto.match.MatchConfirmRsp
	(*MatchConfirmNot)(nil),                   // 61: proto.match.MatchConfirmNot
	(*RoomInfo)(nil),                          // 62: proto.match.PrivateRoomInfo
	(*PlayerBrief)(nil),                       // 63: proto.match.PlayerBrief
	(*EnterMatchReq)(nil),                     // 64: proto.match.EnterMatchReq
	(*RoundInfo)(nil),                         // 65: proto.match.RoundInfo
	(*EnterMatchRsp)(nil),                     // 66: proto.match.EnterMatchRsp
	(*SubmitScoreReq)(nil),                    // 67: proto.match.SubmitScoreReq
	(*SubmitScoreRsp)(nil),                    // 68: proto.match.SubmitScoreRsp
	(*CancelMatchReq)(nil),                    // 69: proto.match.CancelMatchReq
	(*CancelMatchRsp)(nil),                    // 70: proto.match.CancelMatchRsp
	(*GetMatchDetailsReq)(nil),                // 71: proto.match.GetMatchDetailsReq
	(*Item)(nil),                              // 72: proto.match.Item
	(*GetMatchDetailsRsp)(nil),                // 73: proto.match.GetMatchDetailsRsp
	(*GetMatchDetailListReq)(nil),             // 74: proto.match.GetMatchDetailListReq
	(*GetMatchDetailListRsp)(nil),             // 75: proto.match.GetMatchDetailListRsp
	(*RankListReq)(nil),                       // 76: proto.match.RankListReq
	(*RankData)(nil),                          // 77: proto.match.RankData
	(*RankListRsp)(nil),                       // 78: proto.match.RankListRsp
	(*GetCurLeagueReq)(nil),                   // 79: proto.match.GetCurLeagueReq
	(*LeagueAward)(nil),                       // 80: proto.match.LeagueAward
	(*GetCurLeagueRsp)(nil),                   // 81: proto.match.GetCurLeagueRsp
	(*GetLeagueAwardConfigReq)(nil),           // 82: proto.match.GetLeagueAwardConfigReq
	(*GetLeagueAwardConfigRsp)(nil),           // 83: proto.match.GetLeagueAwardConfigRsp
	(*GetLeagueAwardReq)(nil),                 // 84: proto.match.GetLeagueAwardReq
	(*GetLeagueAwardRsp)(nil),                 // 85: proto.match.GetLeagueAwardRsp
	(*GetPlayerProfileReq)(nil),               // 86: proto.match.GetPlayerProfileReq
	(*GetPlayerProfileRsp)(nil),               // 87: proto.match.GetPlayerProfileRsp
	(*GetPlayerMatchGameContReq)(nil),         // 88: proto.match.GetPlayerMatchGameContReq
	(*GetPlayerMatchGameContRsp)(nil),         // 89: proto.match.GetPlayerMatchGameContRsp
	(*MatchResultNot)(nil),                    // 90: proto.match.MatchResultNot
	(*MatchSubmitScoreNot)(nil),               // 91: proto.match.MatchSubmitScoreNot
	(*GetPlyMatchInfoReq)(nil),                // 92: proto.match.GetPlyMatchInfoReq
	(*GetPlyMatchInfoRsp)(nil),                // 93: proto.match.GetPlyMatchInfoRsp
	(*PlayerMatchScore)(nil),                  // 94: proto.match.PlayerMatchScore
	(*UpdateMatchScoreReq)(nil),               // 95: proto.match.UpdateMatchScoreReq
	(*UpdateMatchScoreRsp)(nil),               // 96: proto.match.UpdateMatchScoreRsp
	(*UpdateGameResultReq)(nil),               // 97: proto.match.UpdateGameResultReq
	(*UpdateGameResultRsp)(nil),               // 98: proto.match.UpdateGameResultRsp
	(*UserData)(nil),                          // 99: proto.match.UserData
	(*GetActivityMatchReq)(nil),               // 100: proto.match.GetActivityMatchReq
	(*GetActivityMatchRsp)(nil),               // 101: proto.match.GetActivityMatchRsp
	(*ActivityMatchRankListReq)(nil),          // 102: proto.match.ActivityMatchRankListReq
	(*ActivityMatchRankListRsp)(nil),          // 103: proto.match.ActivityMatchRankListRsp
	(*GetNextActivityMatchReq)(nil),           // 104: proto.match.GetNextActivityMatchReq
	(*GetNextActivityMatchRsp)(nil),           // 105: proto.match.GetNextActivityMatchRsp
	(*MatchingPlayer)(nil),                    // 106: proto.match.MatchingPlayer
	(*UnderwayMatchingData)(nil),              // 107: proto.match.UnderwayMatchingData
	(*RefreshMatchStatusNot)(nil),             // 108: proto.match.RefreshMatchStatusNot
	(*GetMatchDataReq)(nil),                   // 109: proto.match.GetMatchDataReq
	(*MatchPlayer)(nil),                       // 110: proto.match.MatchPlayer
	(*MatchInfo)(nil),                         // 111: proto.match.MatchInfo
	(*GetMatchDataRsp)(nil),                   // 112: proto.match.GetMatchDataRsp
	(*MatchRankListReq)(nil),                  // 113: proto.match.MatchRankListReq
	(*MatchRankListRsp)(nil),                  // 114: proto.match.MatchRankListRsp
	(*AwardConf)(nil),                         // 115: proto.match.AwardConf
	(*MatchPlayerStatus)(nil),                 // 116: proto.match.MatchPlayerStatus
	(*MatchingData)(nil),                      // 117: proto.match.MatchingData
	(*GameResult)(nil),                        // 118: proto.match.GameResult
	(*BasePlayerInfo)(nil),                    // 119: proto.match.BasePlayerInfo
	(*GetShareCodeReq)(nil),                   // 120: proto.match.GetShareCodeReq
	(*GetShareCodeRsp)(nil),                   // 121: proto.match.GetShareCodeRsp
	(*MatchInviteNot)(nil),                    // 122: proto.match.MatchInviteNot
	(*AcceptedInviteNot)(nil),                 // 123: proto.match.AcceptedInviteNot
	(*AcceptedInviteReq)(nil),                 // 124: proto.match.AcceptedInviteReq
	(*AcceptedInviteRsp)(nil),                 // 125: proto.match.AcceptedInviteRsp
	(*UpdateMatchLabelsReq)(nil),              // 126: proto.match.UpdateMatchLabelsReq
	(*UpdateMatchLabelsRsp)(nil),              // 127: proto.match.UpdateMatchLabelsRsp
	(*RobotConfig)(nil),                       // 128: proto.match.RobotConfig
	(*MatchConfig)(nil),                       // 129: proto.match.MatchConfig
	(*GetStatisticsMetricsReq)(nil),           // 130: proto.match.GetStatisticsMetricsReq
	(*GetStatisticsMetricsRsp)(nil),           // 131: proto.match.GetStatisticsMetricsRsp
	(*GetLatestRoundListReq)(nil),             // 132: proto.match.GetLatestRoundListReq
	(*GetLatestRoundListRsp)(nil),             // 133: proto.match.GetLatestRoundListRsp
	(*ListRewardConfigRsp_AwardInfo)(nil),     // 134: proto.match.ListRewardConfigRsp.AwardInfo
	(*ListRewardStatusRsp_AwardStatus)(nil),   // 135: proto.match.ListRewardStatusRsp.AwardStatus
	(*TodayLikeRecordRsp_Record)(nil),         // 136: proto.match.TodayLikeRecordRsp.Record
	(*ListGradeRecordRsp_Record)(nil),         // 137: proto.match.ListGradeRecordRsp.Record
	nil,                                       // 138: proto.match.GetMatchRsp.RoundsEntry
	nil,                                       // 139: proto.match.GetMatchAwardRsp.AwardsEntry
	nil,                                       // 140: proto.match.BattingInfo.MetadataEntry
	nil,                                       // 141: proto.match.JoinMatchReq.MetadataEntry
	(*GetLeagueAwardConfigRsp_Award)(nil),     // 142: proto.match.GetLeagueAwardConfigRsp.Award
	(*GetPlayerProfileRsp_Record)(nil),        // 143: proto.match.GetPlayerProfileRsp.Record
	(*MatchResultNot_RankData)(nil),           // 144: proto.match.MatchResultNot.RankData
	nil,                                       // 145: proto.match.PlayerMatchScore.TagsEntry
	nil,                                       // 146: proto.match.UpdateMatchScoreReq.TagsEntry
	nil,                                       // 147: proto.match.UpdateGameResultReq.TagsEntry
	(*ActivityMatchRankListRsp_RankData)(nil), // 148: proto.match.ActivityMatchRankListRsp.RankData
	(*MatchingPlayer_Matching)(nil),           // 149: proto.match.MatchingPlayer.Matching
	nil,                                       // 150: proto.match.MatchingPlayer.TypeListEntry
	(*MatchInfo_Award)(nil),                   // 151: proto.match.MatchInfo.Award
	nil,                                       // 152: proto.match.MatchInfo.RoundsEntry
	(*AwardConf_RankRange)(nil),               // 153: proto.match.AwardConf.RankRange
	nil,                                       // 154: proto.match.MatchConfig.MetadataEntry
	(*GetLatestRoundListRsp_RoundInfo)(nil),   // 155: proto.match.GetLatestRoundListRsp.RoundInfo
}
var file_proto_match_proto_depIdxs = []int32{
	33,  // 0: proto.match.GetCurSeasonRsp.grade:type_name -> proto.match.GradeData
	11,  // 1: proto.match.GetCurSeasonRsp.last_settle:type_name -> proto.match.SeasonSettle
	33,  // 2: proto.match.SeasonSettle.grade:type_name -> proto.match.GradeData
	72,  // 3: proto.match.SeasonSettle.award_list:type_name -> proto.match.Item
	33,  // 4: proto.match.GetChangeLogRsp.before:type_name -> proto.match.GradeData
	33,  // 5: proto.match.GetChangeLogRsp.after:type_name -> proto.match.GradeData
	72,  // 6: proto.match.GetChangeLogRsp.award_list:type_name -> proto.match.Item
	15,  // 7: proto.match.ListConfigRsp.grades:type_name -> proto.match.GradeConfig
	134, // 8: proto.match.ListRewardConfigRsp.award_list:type_name -> proto.match.ListRewardConfigRsp.AwardInfo
	135, // 9: proto.match.ListRewardStatusRsp.status_list:type_name -> proto.match.ListRewardStatusRsp.AwardStatus
	72,  // 10: proto.match.GetRewardRsp.award_list:type_name -> proto.match.Item
	33,  // 11: proto.match.GradeRank.grade:type_name -> proto.match.GradeData
	72,  // 12: proto.match.GradeRank.props:type_name -> proto.match.Item
	24,  // 13: proto.match.ListGradeRankRsp.my_rank:type_name -> proto.match.GradeRank
	24,  // 14: proto.match.ListGradeRankRsp.list:type_name -> proto.match.GradeRank
	136, // 15: proto.match.TodayLikeRecordRsp.records:type_name -> proto.match.TodayLikeRecordRsp.Record
	72,  // 16: proto.match.SeasonSettleRsp.award_list:type_name -> proto.match.Item
	33,  // 17: proto.match.GetGradeRsp.grade:type_name -> proto.match.GradeData
	33,  // 18: proto.match.GetGradeRsp.max_grade:type_name -> proto.match.GradeData
	137, // 19: proto.match.ListGradeRecordRsp.records:type_name -> proto.match.ListGradeRecordRsp.Record
	33,  // 20: proto.match.ProtectStarRsp.grade:type_name -> proto.match.GradeData
	138, // 21: proto.match.GetMatchRsp.rounds:type_name -> proto.match.GetMatchRsp.RoundsEntry
	43,  // 22: proto.match.GetMatchRsp.stages:type_name -> proto.match.StageData
	41,  // 23: proto.match.RoundData.vs:type_name -> proto.match.BattleInfo
	62,  // 24: proto.match.RoundData.room_info:type_name -> proto.match.PrivateRoomInfo
	139, // 25: proto.match.GetMatchAwardRsp.awards:type_name -> proto.match.GetMatchAwardRsp.AwardsEntry
	72,  // 26: proto.match.BattleItem.props:type_name -> proto.match.Item
	47,  // 27: proto.match.BattingInfo.players:type_name -> proto.match.BattleItem
	140, // 28: proto.match.BattingInfo.metadata:type_name -> proto.match.BattingInfo.MetadataEntry
	48,  // 29: proto.match.GetInProgressListRsp.items:type_name -> proto.match.BattingInfo
	48,  // 30: proto.match.GetCompletedListRsp.items:type_name -> proto.match.BattingInfo
	48,  // 31: proto.match.GetRoundRecordListRsp.items:type_name -> proto.match.BattingInfo
	141, // 32: proto.match.JoinMatchReq.metadata:type_name -> proto.match.JoinMatchReq.MetadataEntry
	62,  // 33: proto.match.JoinMatchNot.room_info:type_name -> proto.match.PrivateRoomInfo
	63,  // 34: proto.match.JoinMatchNot.opponent_list:type_name -> proto.match.PlayerBrief
	63,  // 35: proto.match.ConfirmationRequestNot.opponent_list:type_name -> proto.match.PlayerBrief
	1,   // 36: proto.match.MatchConfirmReq.confirmed:type_name -> proto.match.ConfirmOp
	1,   // 37: proto.match.MatchConfirmNot.op:type_name -> proto.match.ConfirmOp
	63,  // 38: proto.match.MatchConfirmNot.opponent_list:type_name -> proto.match.PlayerBrief
	72,  // 39: proto.match.PlayerBrief.props:type_name -> proto.match.Item
	62,  // 40: proto.match.RoundInfo.room_info:type_name -> proto.match.PrivateRoomInfo
	63,  // 41: proto.match.RoundInfo.opponent_list:type_name -> proto.match.PlayerBrief
	65,  // 42: proto.match.EnterMatchRsp.round:type_name -> proto.match.RoundInfo
	2,   // 43: proto.match.SubmitScoreReq.type:type_name -> proto.match.SubmitScoreType
	5,   // 44: proto.match.Item.type:type_name -> proto.match.Item.Type
	72,  // 45: proto.match.GetMatchDetailsRsp.entry_fee:type_name -> proto.match.Item
	115, // 46: proto.match.GetMatchDetailsRsp.award_list:type_name -> proto.match.AwardConf
	72,  // 47: proto.match.RankData.props:type_name -> proto.match.Item
	77,  // 48: proto.match.RankListRsp.rank_list:type_name -> proto.match.RankData
	72,  // 49: proto.match.LeagueAward.award_list:type_name -> proto.match.Item
	72,  // 50: proto.match.GetCurLeagueRsp.total_bonus:type_name -> proto.match.Item
	80,  // 51: proto.match.GetCurLeagueRsp.last_league_award:type_name -> proto.match.LeagueAward
	142, // 52: proto.match.GetLeagueAwardConfigRsp.award_list:type_name -> proto.match.GetLeagueAwardConfigRsp.Award
	143, // 53: proto.match.GetPlayerProfileRsp.best_record:type_name -> proto.match.GetPlayerProfileRsp.Record
	4,   // 54: proto.match.MatchResultNot.match_type:type_name -> proto.match.MatchType
	3,   // 55: proto.match.MatchResultNot.league_type:type_name -> proto.match.LeagueType
	144, // 56: proto.match.MatchResultNot.players:type_name -> proto.match.MatchResultNot.RankData
	4,   // 57: proto.match.MatchSubmitScoreNot.match_type:type_name -> proto.match.MatchType
	3,   // 58: proto.match.MatchSubmitScoreNot.league_type:type_name -> proto.match.LeagueType
	72,  // 59: proto.match.MatchSubmitScoreNot.entry_fee:type_name -> proto.match.Item
	4,   // 60: proto.match.GetPlyMatchInfoRsp.match_type:type_name -> proto.match.MatchType
	3,   // 61: proto.match.GetPlyMatchInfoRsp.league_type:type_name -> proto.match.LeagueType
	72,  // 62: proto.match.GetPlyMatchInfoRsp.entry_fee:type_name -> proto.match.Item
	72,  // 63: proto.match.GetPlyMatchInfoRsp.award_list:type_name -> proto.match.Item
	2,   // 64: proto.match.PlayerMatchScore.type:type_name -> proto.match.SubmitScoreType
	145, // 65: proto.match.PlayerMatchScore.tags:type_name -> proto.match.PlayerMatchScore.TagsEntry
	94,  // 66: proto.match.UpdateMatchScoreReq.scores:type_name -> proto.match.PlayerMatchScore
	146, // 67: proto.match.UpdateMatchScoreReq.tags:type_name -> proto.match.UpdateMatchScoreReq.TagsEntry
	2,   // 68: proto.match.UpdateGameResultReq.type:type_name -> proto.match.SubmitScoreType
	147, // 69: proto.match.UpdateGameResultReq.tags:type_name -> proto.match.UpdateGameResultReq.TagsEntry
	148, // 70: proto.match.ActivityMatchRankListRsp.my_rank:type_name -> proto.match.ActivityMatchRankListRsp.RankData
	148, // 71: proto.match.ActivityMatchRankListRsp.rank_list:type_name -> proto.match.ActivityMatchRankListRsp.RankData
	150, // 72: proto.match.MatchingPlayer.type_list:type_name -> proto.match.MatchingPlayer.TypeListEntry
	72,  // 73: proto.match.MatchPlayer.award_list:type_name -> proto.match.Item
	152, // 74: proto.match.MatchInfo.rounds:type_name -> proto.match.MatchInfo.RoundsEntry
	43,  // 75: proto.match.MatchInfo.stages:type_name -> proto.match.StageData
	72,  // 76: proto.match.MatchInfo.entry_fee:type_name -> proto.match.Item
	151, // 77: proto.match.MatchInfo.awards:type_name -> proto.match.MatchInfo.Award
	110, // 78: proto.match.MatchInfo.players:type_name -> proto.match.MatchPlayer
	153, // 79: proto.match.AwardConf.range:type_name -> proto.match.AwardConf.RankRange
	72,  // 80: proto.match.AwardConf.items:type_name -> proto.match.Item
	129, // 81: proto.match.MatchingData.match_config:type_name -> proto.match.MatchConfig
	72,  // 82: proto.match.BasePlayerInfo.props:type_name -> proto.match.Item
	63,  // 83: proto.match.MatchInviteNot.opp_list:type_name -> proto.match.PlayerBrief
	7,   // 84: proto.match.AcceptedInviteNot.accepted:type_name -> proto.match.AcceptedInviteNot.OpCode
	8,   // 85: proto.match.AcceptedInviteReq.accepted:type_name -> proto.match.AcceptedInviteReq.OpCode
	128, // 86: proto.match.MatchConfig.robot_config:type_name -> proto.match.RobotConfig
	154, // 87: proto.match.MatchConfig.metadata:type_name -> proto.match.MatchConfig.MetadataEntry
	155, // 88: proto.match.GetLatestRoundListRsp.round_list:type_name -> proto.match.GetLatestRoundListRsp.RoundInfo
	72,  // 89: proto.match.ListRewardConfigRsp.AwardInfo.award_list:type_name -> proto.match.Item
	33,  // 90: proto.match.ListGradeRecordRsp.Record.grade:type_name -> proto.match.GradeData
	33,  // 91: proto.match.ListGradeRecordRsp.Record.max_grade:type_name -> proto.match.GradeData
	42,  // 92: proto.match.GetMatchRsp.RoundsEntry.value:type_name -> proto.match.RoundData
	72,  // 93: proto.match.GetLeagueAwardConfigRsp.Award.item_list:type_name -> proto.match.Item
	72,  // 94: proto.match.ActivityMatchRankListRsp.RankData.props:type_name -> proto.match.Item
	149, // 95: proto.match.MatchingPlayer.TypeListEntry.value:type_name -> proto.match.MatchingPlayer.Matching
	72,  // 96: proto.match.MatchInfo.Award.award_list:type_name -> proto.match.Item
	42,  // 97: proto.match.MatchInfo.RoundsEntry.value:type_name -> proto.match.RoundData
	54,  // 98: proto.match.Match.JoinMatch:input_type -> proto.match.JoinMatchReq
	69,  // 99: proto.match.Match.CancelMatch:input_type -> proto.match.CancelMatchReq
	59,  // 100: proto.match.Match.MatchConfirm:input_type -> proto.match.MatchConfirmReq
	64,  // 101: proto.match.Match.EnterMatch:input_type -> proto.match.EnterMatchReq
	67,  // 102: proto.match.Match.SubmitScore:input_type -> proto.match.SubmitScoreReq
	71,  // 103: proto.match.Match.GetMatchDetails:input_type -> proto.match.GetMatchDetailsReq
	39,  // 104: proto.match.Match.GetMatch:input_type -> proto.match.GetMatchReq
	100, // 105: proto.match.Match.GetActivityMatch:input_type -> proto.match.GetActivityMatchReq
	102, // 106: proto.match.Match.ActivityMatchRankList:input_type -> proto.match.ActivityMatchRankListReq
	46,  // 107: proto.match.Match.GetInProgressList:input_type -> proto.match.GetInProgressListReq
	50,  // 108: proto.match.Match.GetCompletedList:input_type -> proto.match.GetCompletedListReq
	52,  // 109: proto.match.Match.GetRoundRecordList:input_type -> proto.match.GetRoundRecordListReq
	44,  // 110: proto.match.Match.GetMatchAward:input_type -> proto.match.GetMatchAwardReq
	76,  // 111: proto.match.Match.LeagueRankList:input_type -> proto.match.RankListReq
	79,  // 112: proto.match.Match.GetCurLeague:input_type -> proto.match.GetCurLeagueReq
	82,  // 113: proto.match.Match.GetLeagueAwardConfig:input_type -> proto.match.GetLeagueAwardConfigReq
	84,  // 114: proto.match.Match.GetLeagueAward:input_type -> proto.match.GetLeagueAwardReq
	86,  // 115: proto.match.Match.GetPlayerProfile:input_type -> proto.match.GetPlayerProfileReq
	104, // 116: proto.match.Match.GetNextActivityMatch:input_type -> proto.match.GetNextActivityMatchReq
	120, // 117: proto.match.Match.GetShareCode:input_type -> proto.match.GetShareCodeReq
	124, // 118: proto.match.Match.AcceptedInvite:input_type -> proto.match.AcceptedInviteReq
	130, // 119: proto.match.Match.GetStatisticsMetrics:input_type -> proto.match.GetStatisticsMetricsReq
	74,  // 120: proto.match.MatchRpc.GetMatchDetailList:input_type -> proto.match.GetMatchDetailListReq
	86,  // 121: proto.match.MatchRpc.GetPlayerProfile:input_type -> proto.match.GetPlayerProfileReq
	92,  // 122: proto.match.MatchRpc.GetPlyMatchInfo:input_type -> proto.match.GetPlyMatchInfoReq
	95,  // 123: proto.match.MatchRpc.UpdateMatchScore:input_type -> proto.match.UpdateMatchScoreReq
	97,  // 124: proto.match.MatchRpc.UpdateGameResult:input_type -> proto.match.UpdateGameResultReq
	109, // 125: proto.match.MatchRpc.GetMatchData:input_type -> proto.match.GetMatchDataReq
	113, // 126: proto.match.MatchRpc.MatchRankList:input_type -> proto.match.MatchRankListReq
	126, // 127: proto.match.MatchRpc.UpdateMatchLabels:input_type -> proto.match.UpdateMatchLabelsReq
	71,  // 128: proto.match.MatchRpc.GetMatchDetails:input_type -> proto.match.GetMatchDetailsReq
	132, // 129: proto.match.MatchRpc.GetLatestRoundList:input_type -> proto.match.GetLatestRoundListReq
	9,   // 130: proto.match.Grade.GetCurSeason:input_type -> proto.match.GetCurSeasonReq
	30,  // 131: proto.match.Grade.SeasonSettle:input_type -> proto.match.SeasonSettleReq
	14,  // 132: proto.match.Grade.ListConfig:input_type -> proto.match.ListConfigReq
	17,  // 133: proto.match.Grade.ListRewardConfig:input_type -> proto.match.ListRewardConfigReq
	19,  // 134: proto.match.Grade.ListRewardStatus:input_type -> proto.match.ListRewardStatusReq
	21,  // 135: proto.match.Grade.GetReward:input_type -> proto.match.GetRewardReq
	23,  // 136: proto.match.Grade.ListRank:input_type -> proto.match.ListGradeRankReq
	26,  // 137: proto.match.Grade.Like:input_type -> proto.match.LikeGradeRankReq
	28,  // 138: proto.match.Grade.TodayLikeRecord:input_type -> proto.match.TodayLikeRecordReq
	35,  // 139: proto.match.Grade.ListGradeRecord:input_type -> proto.match.ListGradeRecordReq
	32,  // 140: proto.match.Grade.GetGrade:input_type -> proto.match.GetGradeReq
	37,  // 141: proto.match.Grade.ProtectStar:input_type -> proto.match.ProtectStarReq
	55,  // 142: proto.match.Match.JoinMatch:output_type -> proto.match.JoinMatchRsp
	70,  // 143: proto.match.Match.CancelMatch:output_type -> proto.match.CancelMatchRsp
	60,  // 144: proto.match.Match.MatchConfirm:output_type -> proto.match.MatchConfirmRsp
	66,  // 145: proto.match.Match.EnterMatch:output_type -> proto.match.EnterMatchRsp
	68,  // 146: proto.match.Match.SubmitScore:output_type -> proto.match.SubmitScoreRsp
	73,  // 147: proto.match.Match.GetMatchDetails:output_type -> proto.match.GetMatchDetailsRsp
	40,  // 148: proto.match.Match.GetMatch:output_type -> proto.match.GetMatchRsp
	101, // 149: proto.match.Match.GetActivityMatch:output_type -> proto.match.GetActivityMatchRsp
	103, // 150: proto.match.Match.ActivityMatchRankList:output_type -> proto.match.ActivityMatchRankListRsp
	49,  // 151: proto.match.Match.GetInProgressList:output_type -> proto.match.GetInProgressListRsp
	51,  // 152: proto.match.Match.GetCompletedList:output_type -> proto.match.GetCompletedListRsp
	53,  // 153: proto.match.Match.GetRoundRecordList:output_type -> proto.match.GetRoundRecordListRsp
	45,  // 154: proto.match.Match.GetMatchAward:output_type -> proto.match.GetMatchAwardRsp
	78,  // 155: proto.match.Match.LeagueRankList:output_type -> proto.match.RankListRsp
	81,  // 156: proto.match.Match.GetCurLeague:output_type -> proto.match.GetCurLeagueRsp
	83,  // 157: proto.match.Match.GetLeagueAwardConfig:output_type -> proto.match.GetLeagueAwardConfigRsp
	85,  // 158: proto.match.Match.GetLeagueAward:output_type -> proto.match.GetLeagueAwardRsp
	87,  // 159: proto.match.Match.GetPlayerProfile:output_type -> proto.match.GetPlayerProfileRsp
	105, // 160: proto.match.Match.GetNextActivityMatch:output_type -> proto.match.GetNextActivityMatchRsp
	121, // 161: proto.match.Match.GetShareCode:output_type -> proto.match.GetShareCodeRsp
	125, // 162: proto.match.Match.AcceptedInvite:output_type -> proto.match.AcceptedInviteRsp
	131, // 163: proto.match.Match.GetStatisticsMetrics:output_type -> proto.match.GetStatisticsMetricsRsp
	75,  // 164: proto.match.MatchRpc.GetMatchDetailList:output_type -> proto.match.GetMatchDetailListRsp
	87,  // 165: proto.match.MatchRpc.GetPlayerProfile:output_type -> proto.match.GetPlayerProfileRsp
	93,  // 166: proto.match.MatchRpc.GetPlyMatchInfo:output_type -> proto.match.GetPlyMatchInfoRsp
	96,  // 167: proto.match.MatchRpc.UpdateMatchScore:output_type -> proto.match.UpdateMatchScoreRsp
	98,  // 168: proto.match.MatchRpc.UpdateGameResult:output_type -> proto.match.UpdateGameResultRsp
	112, // 169: proto.match.MatchRpc.GetMatchData:output_type -> proto.match.GetMatchDataRsp
	114, // 170: proto.match.MatchRpc.MatchRankList:output_type -> proto.match.MatchRankListRsp
	127, // 171: proto.match.MatchRpc.UpdateMatchLabels:output_type -> proto.match.UpdateMatchLabelsRsp
	73,  // 172: proto.match.MatchRpc.GetMatchDetails:output_type -> proto.match.GetMatchDetailsRsp
	133, // 173: proto.match.MatchRpc.GetLatestRoundList:output_type -> proto.match.GetLatestRoundListRsp
	10,  // 174: proto.match.Grade.GetCurSeason:output_type -> proto.match.GetCurSeasonRsp
	31,  // 175: proto.match.Grade.SeasonSettle:output_type -> proto.match.SeasonSettleRsp
	16,  // 176: proto.match.Grade.ListConfig:output_type -> proto.match.ListConfigRsp
	18,  // 177: proto.match.Grade.ListRewardConfig:output_type -> proto.match.ListRewardConfigRsp
	20,  // 178: proto.match.Grade.ListRewardStatus:output_type -> proto.match.ListRewardStatusRsp
	22,  // 179: proto.match.Grade.GetReward:output_type -> proto.match.GetRewardRsp
	25,  // 180: proto.match.Grade.ListRank:output_type -> proto.match.ListGradeRankRsp
	27,  // 181: proto.match.Grade.Like:output_type -> proto.match.LikeGradeRankRsp
	29,  // 182: proto.match.Grade.TodayLikeRecord:output_type -> proto.match.TodayLikeRecordRsp
	36,  // 183: proto.match.Grade.ListGradeRecord:output_type -> proto.match.ListGradeRecordRsp
	34,  // 184: proto.match.Grade.GetGrade:output_type -> proto.match.GetGradeRsp
	38,  // 185: proto.match.Grade.ProtectStar:output_type -> proto.match.ProtectStarRsp
	142, // [142:186] is the sub-list for method output_type
	98,  // [98:142] is the sub-list for method input_type
	98,  // [98:98] is the sub-list for extension type_name
	98,  // [98:98] is the sub-list for extension extendee
	0,   // [0:98] is the sub-list for field type_name
}

func init() { file_proto_match_proto_init() }
func file_proto_match_proto_init() {
	if File_proto_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurSeasonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurSeasonRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonSettle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangeLogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangeLogRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardStatusRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGradeRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGradeRankRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeGradeRankReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeGradeRankRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodayLikeRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodayLikeRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonSettleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeasonSettleRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGradeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGradeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGradeRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGradeRecordRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectStarReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtectStarRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchAwardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchAwardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInProgressListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BattingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInProgressListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletedListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompletedListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundRecordListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoundRecordListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinMatchNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingStatusNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmationRequestNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchConfirmRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchConfirmNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerBrief); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnterMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitScoreRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDetailsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDetailListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDetailListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurLeagueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeagueAward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurLeagueRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueAwardConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueAwardConfigRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueAwardReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueAwardRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerProfileRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerMatchGameContReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerMatchGameContRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResultNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSubmitScoreNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlyMatchInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlyMatchInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchScoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchScoreRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameResultReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGameResultRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMatchRankListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMatchRankListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextActivityMatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextActivityMatchRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderwayMatchingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshMatchStatusNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDataRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRankListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRankListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwardConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPlayerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasePlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareCodeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInviteNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedInviteNot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedInviteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptedInviteRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchLabelsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMatchLabelsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticsMetricsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatisticsMetricsRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRoundListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRoundListRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardConfigRsp_AwardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRewardStatusRsp_AwardStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TodayLikeRecordRsp_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGradeRecordRsp_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeagueAwardConfigRsp_Award); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerProfileRsp_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResultNot_RankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityMatchRankListRsp_RankData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchingPlayer_Matching); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo_Award); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwardConf_RankRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_match_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestRoundListRsp_RoundInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_match_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   147,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_proto_match_proto_goTypes,
		DependencyIndexes: file_proto_match_proto_depIdxs,
		EnumInfos:         file_proto_match_proto_enumTypes,
		MessageInfos:      file_proto_match_proto_msgTypes,
	}.Build()
	File_proto_match_proto = out.File
	file_proto_match_proto_rawDesc = nil
	file_proto_match_proto_goTypes = nil
	file_proto_match_proto_depIdxs = nil
}
