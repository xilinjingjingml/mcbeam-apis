// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/game_center.proto

package game_center

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api1 "github.com/micro/micro/v3/proto/api"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Center service

func NewCenterEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Center service

type CenterService interface {
	GetPopInfo(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	GetIpLocal(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	GetGameReport(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type centerService struct {
	c    client.Client
	name string
}

func NewCenterService(name string, c client.Client) CenterService {
	return &centerService{
		c:    c,
		name: name,
	}
}

func (c *centerService) GetPopInfo(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Center.GetPopInfo", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) GetIpLocal(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Center.GetIpLocal", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerService) GetGameReport(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "Center.GetGameReport", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Center service

type CenterHandler interface {
	GetPopInfo(context.Context, *api1.Request, *api1.Response) error
	GetIpLocal(context.Context, *api1.Request, *api1.Response) error
	GetGameReport(context.Context, *api1.Request, *api1.Response) error
}

func RegisterCenterHandler(s server.Server, hdlr CenterHandler, opts ...server.HandlerOption) error {
	type center interface {
		GetPopInfo(ctx context.Context, in *api1.Request, out *api1.Response) error
		GetIpLocal(ctx context.Context, in *api1.Request, out *api1.Response) error
		GetGameReport(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type Center struct {
		center
	}
	h := &centerHandler{hdlr}
	return s.Handle(s.NewHandler(&Center{h}, opts...))
}

type centerHandler struct {
	CenterHandler
}

func (h *centerHandler) GetPopInfo(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.CenterHandler.GetPopInfo(ctx, in, out)
}

func (h *centerHandler) GetIpLocal(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.CenterHandler.GetIpLocal(ctx, in, out)
}

func (h *centerHandler) GetGameReport(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.CenterHandler.GetGameReport(ctx, in, out)
}

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	// 游戏账变
	ListBalanceLog(ctx context.Context, in *ListBalanceLogReq, opts ...client.CallOption) (*ListBalanceLogRsp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) ListBalanceLog(ctx context.Context, in *ListBalanceLogReq, opts ...client.CallOption) (*ListBalanceLogRsp, error) {
	req := c.c.NewRequest(c.name, "User.ListBalanceLog", in)
	out := new(ListBalanceLogRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// 游戏账变
	ListBalanceLog(context.Context, *ListBalanceLogReq, *ListBalanceLogRsp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		ListBalanceLog(ctx context.Context, in *ListBalanceLogReq, out *ListBalanceLogRsp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) ListBalanceLog(ctx context.Context, in *ListBalanceLogReq, out *ListBalanceLogRsp) error {
	return h.UserHandler.ListBalanceLog(ctx, in, out)
}

// Api Endpoints for Rank service

func NewRankEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rank service

type RankService interface {
	ItemRank(ctx context.Context, in *ItemRankReq, opts ...client.CallOption) (*ItemRankRsp, error)
}

type rankService struct {
	c    client.Client
	name string
}

func NewRankService(name string, c client.Client) RankService {
	return &rankService{
		c:    c,
		name: name,
	}
}

func (c *rankService) ItemRank(ctx context.Context, in *ItemRankReq, opts ...client.CallOption) (*ItemRankRsp, error) {
	req := c.c.NewRequest(c.name, "Rank.ItemRank", in)
	out := new(ItemRankRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rank service

type RankHandler interface {
	ItemRank(context.Context, *ItemRankReq, *ItemRankRsp) error
}

func RegisterRankHandler(s server.Server, hdlr RankHandler, opts ...server.HandlerOption) error {
	type rank interface {
		ItemRank(ctx context.Context, in *ItemRankReq, out *ItemRankRsp) error
	}
	type Rank struct {
		rank
	}
	h := &rankHandler{hdlr}
	return s.Handle(s.NewHandler(&Rank{h}, opts...))
}

type rankHandler struct {
	RankHandler
}

func (h *rankHandler) ItemRank(ctx context.Context, in *ItemRankReq, out *ItemRankRsp) error {
	return h.RankHandler.ItemRank(ctx, in, out)
}

// Api Endpoints for BaiYuan service

func NewBaiYuanEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BaiYuan service

type BaiYuanService interface {
	// 玩家百元数据
	GetPlayerData(ctx context.Context, in *GetPlayerDataReq, opts ...client.CallOption) (*GetPlayerDataRsp, error)
}

type baiYuanService struct {
	c    client.Client
	name string
}

func NewBaiYuanService(name string, c client.Client) BaiYuanService {
	return &baiYuanService{
		c:    c,
		name: name,
	}
}

func (c *baiYuanService) GetPlayerData(ctx context.Context, in *GetPlayerDataReq, opts ...client.CallOption) (*GetPlayerDataRsp, error) {
	req := c.c.NewRequest(c.name, "BaiYuan.GetPlayerData", in)
	out := new(GetPlayerDataRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BaiYuan service

type BaiYuanHandler interface {
	// 玩家百元数据
	GetPlayerData(context.Context, *GetPlayerDataReq, *GetPlayerDataRsp) error
}

func RegisterBaiYuanHandler(s server.Server, hdlr BaiYuanHandler, opts ...server.HandlerOption) error {
	type baiYuan interface {
		GetPlayerData(ctx context.Context, in *GetPlayerDataReq, out *GetPlayerDataRsp) error
	}
	type BaiYuan struct {
		baiYuan
	}
	h := &baiYuanHandler{hdlr}
	return s.Handle(s.NewHandler(&BaiYuan{h}, opts...))
}

type baiYuanHandler struct {
	BaiYuanHandler
}

func (h *baiYuanHandler) GetPlayerData(ctx context.Context, in *GetPlayerDataReq, out *GetPlayerDataRsp) error {
	return h.BaiYuanHandler.GetPlayerData(ctx, in, out)
}

// Api Endpoints for BaiYuanRpc service

func NewBaiYuanRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BaiYuanRpc service

type BaiYuanRpcService interface {
	// 查询玩家状态
	GetPlayerStats(ctx context.Context, in *GetPlayerStatsReq, opts ...client.CallOption) (*GetPlayerStatsRsp, error)
	AdNotifyState(ctx context.Context, in *AdNotifyStateReq, opts ...client.CallOption) (*AdNotifyStateRsp, error)
}

type baiYuanRpcService struct {
	c    client.Client
	name string
}

func NewBaiYuanRpcService(name string, c client.Client) BaiYuanRpcService {
	return &baiYuanRpcService{
		c:    c,
		name: name,
	}
}

func (c *baiYuanRpcService) GetPlayerStats(ctx context.Context, in *GetPlayerStatsReq, opts ...client.CallOption) (*GetPlayerStatsRsp, error) {
	req := c.c.NewRequest(c.name, "BaiYuanRpc.GetPlayerStats", in)
	out := new(GetPlayerStatsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baiYuanRpcService) AdNotifyState(ctx context.Context, in *AdNotifyStateReq, opts ...client.CallOption) (*AdNotifyStateRsp, error) {
	req := c.c.NewRequest(c.name, "BaiYuanRpc.AdNotifyState", in)
	out := new(AdNotifyStateRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BaiYuanRpc service

type BaiYuanRpcHandler interface {
	// 查询玩家状态
	GetPlayerStats(context.Context, *GetPlayerStatsReq, *GetPlayerStatsRsp) error
	AdNotifyState(context.Context, *AdNotifyStateReq, *AdNotifyStateRsp) error
}

func RegisterBaiYuanRpcHandler(s server.Server, hdlr BaiYuanRpcHandler, opts ...server.HandlerOption) error {
	type baiYuanRpc interface {
		GetPlayerStats(ctx context.Context, in *GetPlayerStatsReq, out *GetPlayerStatsRsp) error
		AdNotifyState(ctx context.Context, in *AdNotifyStateReq, out *AdNotifyStateRsp) error
	}
	type BaiYuanRpc struct {
		baiYuanRpc
	}
	h := &baiYuanRpcHandler{hdlr}
	return s.Handle(s.NewHandler(&BaiYuanRpc{h}, opts...))
}

type baiYuanRpcHandler struct {
	BaiYuanRpcHandler
}

func (h *baiYuanRpcHandler) GetPlayerStats(ctx context.Context, in *GetPlayerStatsReq, out *GetPlayerStatsRsp) error {
	return h.BaiYuanRpcHandler.GetPlayerStats(ctx, in, out)
}

func (h *baiYuanRpcHandler) AdNotifyState(ctx context.Context, in *AdNotifyStateReq, out *AdNotifyStateRsp) error {
	return h.BaiYuanRpcHandler.AdNotifyState(ctx, in, out)
}

// Api Endpoints for Store service

func NewStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Store service

type StoreService interface {
	Set(ctx context.Context, in *StoreSetReq, opts ...client.CallOption) (*StoreSetRsp, error)
	Get(ctx context.Context, in *StoreGetReq, opts ...client.CallOption) (*StoreGetRsp, error)
	Delete(ctx context.Context, in *StoreDeleteReq, opts ...client.CallOption) (*StoreDeleteRsp, error)
}

type storeService struct {
	c    client.Client
	name string
}

func NewStoreService(name string, c client.Client) StoreService {
	return &storeService{
		c:    c,
		name: name,
	}
}

func (c *storeService) Set(ctx context.Context, in *StoreSetReq, opts ...client.CallOption) (*StoreSetRsp, error) {
	req := c.c.NewRequest(c.name, "Store.Set", in)
	out := new(StoreSetRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Get(ctx context.Context, in *StoreGetReq, opts ...client.CallOption) (*StoreGetRsp, error) {
	req := c.c.NewRequest(c.name, "Store.Get", in)
	out := new(StoreGetRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeService) Delete(ctx context.Context, in *StoreDeleteReq, opts ...client.CallOption) (*StoreDeleteRsp, error) {
	req := c.c.NewRequest(c.name, "Store.Delete", in)
	out := new(StoreDeleteRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreHandler interface {
	Set(context.Context, *StoreSetReq, *StoreSetRsp) error
	Get(context.Context, *StoreGetReq, *StoreGetRsp) error
	Delete(context.Context, *StoreDeleteReq, *StoreDeleteRsp) error
}

func RegisterStoreHandler(s server.Server, hdlr StoreHandler, opts ...server.HandlerOption) error {
	type store interface {
		Set(ctx context.Context, in *StoreSetReq, out *StoreSetRsp) error
		Get(ctx context.Context, in *StoreGetReq, out *StoreGetRsp) error
		Delete(ctx context.Context, in *StoreDeleteReq, out *StoreDeleteRsp) error
	}
	type Store struct {
		store
	}
	h := &storeHandler{hdlr}
	return s.Handle(s.NewHandler(&Store{h}, opts...))
}

type storeHandler struct {
	StoreHandler
}

func (h *storeHandler) Set(ctx context.Context, in *StoreSetReq, out *StoreSetRsp) error {
	return h.StoreHandler.Set(ctx, in, out)
}

func (h *storeHandler) Get(ctx context.Context, in *StoreGetReq, out *StoreGetRsp) error {
	return h.StoreHandler.Get(ctx, in, out)
}

func (h *storeHandler) Delete(ctx context.Context, in *StoreDeleteReq, out *StoreDeleteRsp) error {
	return h.StoreHandler.Delete(ctx, in, out)
}
