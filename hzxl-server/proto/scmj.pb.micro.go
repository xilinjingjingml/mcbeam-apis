// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/scmj.proto

package proto_hzxl

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Scmj service

func NewScmjEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Scmj service

type ScmjService interface {
	Operate(ctx context.Context, in *OperateRsp, opts ...client.CallOption) (*ScmjEmpty, error)
	Exchange(ctx context.Context, in *ExchangeRsp, opts ...client.CallOption) (*ScmjEmpty, error)
	Lack(ctx context.Context, in *LackRsp, opts ...client.CallOption) (*ScmjEmpty, error)
	Bill(ctx context.Context, in *BillReq, opts ...client.CallOption) (*ScmjEmpty, error)
	Complete(ctx context.Context, in *CompleteReq, opts ...client.CallOption) (*ScmjEmpty, error)
	Auto(ctx context.Context, in *AutoReq, opts ...client.CallOption) (*ScmjEmpty, error)
	// rpc Change(ChangeRsp) returns (ScmjEmpty){}
	// rpc ChangeCardStart(ChangeCardStartReq) returns (ScmjEmpty){}
	TingTip(ctx context.Context, in *TingTipReq, opts ...client.CallOption) (*ScmjEmpty, error)
	Ai(ctx context.Context, in *AiReq, opts ...client.CallOption) (*ScmjEmpty, error)
	Chat(ctx context.Context, in *ChatReq, opts ...client.CallOption) (*ScmjEmpty, error)
	Recharge(ctx context.Context, in *RechargeRsp, opts ...client.CallOption) (*ScmjEmpty, error)
	CapMultiple(ctx context.Context, in *CapMultipleRsp, opts ...client.CallOption) (*ScmjEmpty, error)
}

type scmjService struct {
	c    client.Client
	name string
}

func NewScmjService(name string, c client.Client) ScmjService {
	return &scmjService{
		c:    c,
		name: name,
	}
}

func (c *scmjService) Operate(ctx context.Context, in *OperateRsp, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Operate", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Exchange(ctx context.Context, in *ExchangeRsp, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Exchange", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Lack(ctx context.Context, in *LackRsp, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Lack", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Bill(ctx context.Context, in *BillReq, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Bill", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Complete(ctx context.Context, in *CompleteReq, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Complete", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Auto(ctx context.Context, in *AutoReq, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Auto", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) TingTip(ctx context.Context, in *TingTipReq, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.TingTip", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Ai(ctx context.Context, in *AiReq, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Ai", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Chat(ctx context.Context, in *ChatReq, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Chat", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) Recharge(ctx context.Context, in *RechargeRsp, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.Recharge", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scmjService) CapMultiple(ctx context.Context, in *CapMultipleRsp, opts ...client.CallOption) (*ScmjEmpty, error) {
	req := c.c.NewRequest(c.name, "Scmj.CapMultiple", in)
	out := new(ScmjEmpty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scmj service

type ScmjHandler interface {
	Operate(context.Context, *OperateRsp, *ScmjEmpty) error
	Exchange(context.Context, *ExchangeRsp, *ScmjEmpty) error
	Lack(context.Context, *LackRsp, *ScmjEmpty) error
	Bill(context.Context, *BillReq, *ScmjEmpty) error
	Complete(context.Context, *CompleteReq, *ScmjEmpty) error
	Auto(context.Context, *AutoReq, *ScmjEmpty) error
	// rpc Change(ChangeRsp) returns (ScmjEmpty){}
	// rpc ChangeCardStart(ChangeCardStartReq) returns (ScmjEmpty){}
	TingTip(context.Context, *TingTipReq, *ScmjEmpty) error
	Ai(context.Context, *AiReq, *ScmjEmpty) error
	Chat(context.Context, *ChatReq, *ScmjEmpty) error
	Recharge(context.Context, *RechargeRsp, *ScmjEmpty) error
	CapMultiple(context.Context, *CapMultipleRsp, *ScmjEmpty) error
}

func RegisterScmjHandler(s server.Server, hdlr ScmjHandler, opts ...server.HandlerOption) error {
	type scmj interface {
		Operate(ctx context.Context, in *OperateRsp, out *ScmjEmpty) error
		Exchange(ctx context.Context, in *ExchangeRsp, out *ScmjEmpty) error
		Lack(ctx context.Context, in *LackRsp, out *ScmjEmpty) error
		Bill(ctx context.Context, in *BillReq, out *ScmjEmpty) error
		Complete(ctx context.Context, in *CompleteReq, out *ScmjEmpty) error
		Auto(ctx context.Context, in *AutoReq, out *ScmjEmpty) error
		TingTip(ctx context.Context, in *TingTipReq, out *ScmjEmpty) error
		Ai(ctx context.Context, in *AiReq, out *ScmjEmpty) error
		Chat(ctx context.Context, in *ChatReq, out *ScmjEmpty) error
		Recharge(ctx context.Context, in *RechargeRsp, out *ScmjEmpty) error
		CapMultiple(ctx context.Context, in *CapMultipleRsp, out *ScmjEmpty) error
	}
	type Scmj struct {
		scmj
	}
	h := &scmjHandler{hdlr}
	return s.Handle(s.NewHandler(&Scmj{h}, opts...))
}

type scmjHandler struct {
	ScmjHandler
}

func (h *scmjHandler) Operate(ctx context.Context, in *OperateRsp, out *ScmjEmpty) error {
	return h.ScmjHandler.Operate(ctx, in, out)
}

func (h *scmjHandler) Exchange(ctx context.Context, in *ExchangeRsp, out *ScmjEmpty) error {
	return h.ScmjHandler.Exchange(ctx, in, out)
}

func (h *scmjHandler) Lack(ctx context.Context, in *LackRsp, out *ScmjEmpty) error {
	return h.ScmjHandler.Lack(ctx, in, out)
}

func (h *scmjHandler) Bill(ctx context.Context, in *BillReq, out *ScmjEmpty) error {
	return h.ScmjHandler.Bill(ctx, in, out)
}

func (h *scmjHandler) Complete(ctx context.Context, in *CompleteReq, out *ScmjEmpty) error {
	return h.ScmjHandler.Complete(ctx, in, out)
}

func (h *scmjHandler) Auto(ctx context.Context, in *AutoReq, out *ScmjEmpty) error {
	return h.ScmjHandler.Auto(ctx, in, out)
}

func (h *scmjHandler) TingTip(ctx context.Context, in *TingTipReq, out *ScmjEmpty) error {
	return h.ScmjHandler.TingTip(ctx, in, out)
}

func (h *scmjHandler) Ai(ctx context.Context, in *AiReq, out *ScmjEmpty) error {
	return h.ScmjHandler.Ai(ctx, in, out)
}

func (h *scmjHandler) Chat(ctx context.Context, in *ChatReq, out *ScmjEmpty) error {
	return h.ScmjHandler.Chat(ctx, in, out)
}

func (h *scmjHandler) Recharge(ctx context.Context, in *RechargeRsp, out *ScmjEmpty) error {
	return h.ScmjHandler.Recharge(ctx, in, out)
}

func (h *scmjHandler) CapMultiple(ctx context.Context, in *CapMultipleRsp, out *ScmjEmpty) error {
	return h.ScmjHandler.CapMultiple(ctx, in, out)
}
