// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/vip_privilege_proto.proto

package activity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for VipPrivilege service

func NewVipPrivilegeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for VipPrivilege service

type VipPrivilegeService interface {
	GetVipPrivilegeConfig(ctx context.Context, in *GetVipPrivilegeConfigReq, opts ...client.CallOption) (*GetVipPrivilegeConfigRsp, error)
	GetVipPrivilegeReward(ctx context.Context, in *GetVipPrivilegeRewardReq, opts ...client.CallOption) (*GetVipPrivilegeRewardRsp, error)
	GetPlayerVipPrivilege(ctx context.Context, in *GetPlayerVipPrivilegeReq, opts ...client.CallOption) (*GetPlayerVipPrivilegeRsp, error)
}

type vipPrivilegeService struct {
	c    client.Client
	name string
}

func NewVipPrivilegeService(name string, c client.Client) VipPrivilegeService {
	return &vipPrivilegeService{
		c:    c,
		name: name,
	}
}

func (c *vipPrivilegeService) GetVipPrivilegeConfig(ctx context.Context, in *GetVipPrivilegeConfigReq, opts ...client.CallOption) (*GetVipPrivilegeConfigRsp, error) {
	req := c.c.NewRequest(c.name, "VipPrivilege.GetVipPrivilegeConfig", in)
	out := new(GetVipPrivilegeConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipPrivilegeService) GetVipPrivilegeReward(ctx context.Context, in *GetVipPrivilegeRewardReq, opts ...client.CallOption) (*GetVipPrivilegeRewardRsp, error) {
	req := c.c.NewRequest(c.name, "VipPrivilege.GetVipPrivilegeReward", in)
	out := new(GetVipPrivilegeRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipPrivilegeService) GetPlayerVipPrivilege(ctx context.Context, in *GetPlayerVipPrivilegeReq, opts ...client.CallOption) (*GetPlayerVipPrivilegeRsp, error) {
	req := c.c.NewRequest(c.name, "VipPrivilege.GetPlayerVipPrivilege", in)
	out := new(GetPlayerVipPrivilegeRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipPrivilege service

type VipPrivilegeHandler interface {
	GetVipPrivilegeConfig(context.Context, *GetVipPrivilegeConfigReq, *GetVipPrivilegeConfigRsp) error
	GetVipPrivilegeReward(context.Context, *GetVipPrivilegeRewardReq, *GetVipPrivilegeRewardRsp) error
	GetPlayerVipPrivilege(context.Context, *GetPlayerVipPrivilegeReq, *GetPlayerVipPrivilegeRsp) error
}

func RegisterVipPrivilegeHandler(s server.Server, hdlr VipPrivilegeHandler, opts ...server.HandlerOption) error {
	type vipPrivilege interface {
		GetVipPrivilegeConfig(ctx context.Context, in *GetVipPrivilegeConfigReq, out *GetVipPrivilegeConfigRsp) error
		GetVipPrivilegeReward(ctx context.Context, in *GetVipPrivilegeRewardReq, out *GetVipPrivilegeRewardRsp) error
		GetPlayerVipPrivilege(ctx context.Context, in *GetPlayerVipPrivilegeReq, out *GetPlayerVipPrivilegeRsp) error
	}
	type VipPrivilege struct {
		vipPrivilege
	}
	h := &vipPrivilegeHandler{hdlr}
	return s.Handle(s.NewHandler(&VipPrivilege{h}, opts...))
}

type vipPrivilegeHandler struct {
	VipPrivilegeHandler
}

func (h *vipPrivilegeHandler) GetVipPrivilegeConfig(ctx context.Context, in *GetVipPrivilegeConfigReq, out *GetVipPrivilegeConfigRsp) error {
	return h.VipPrivilegeHandler.GetVipPrivilegeConfig(ctx, in, out)
}

func (h *vipPrivilegeHandler) GetVipPrivilegeReward(ctx context.Context, in *GetVipPrivilegeRewardReq, out *GetVipPrivilegeRewardRsp) error {
	return h.VipPrivilegeHandler.GetVipPrivilegeReward(ctx, in, out)
}

func (h *vipPrivilegeHandler) GetPlayerVipPrivilege(ctx context.Context, in *GetPlayerVipPrivilegeReq, out *GetPlayerVipPrivilegeRsp) error {
	return h.VipPrivilegeHandler.GetPlayerVipPrivilege(ctx, in, out)
}
