// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/activity_proto.proto

package activity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Activity service

func NewActivityEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Activity service

type ActivityService interface {
	GetActivityConfig(ctx context.Context, in *GetActivityConfigReq, opts ...client.CallOption) (*GetActivityConfigRsp, error)
	GetReward(ctx context.Context, in *GetRewardReq, opts ...client.CallOption) (*GetRewardRsp, error)
	GetDelayReward(ctx context.Context, in *GetDelayRewardReq, opts ...client.CallOption) (*GetDelayRewardRsp, error)
	//完成广告订单
	AdNotifyState(ctx context.Context, in *AdNotifyStateReq, opts ...client.CallOption) (*AdNotifyStateRsp, error)
	CopyActivityConfig(ctx context.Context, in *CopyActivityConfigReq, opts ...client.CallOption) (*CopyActivityConfigRsp, error)
	// 猜大小
	PokerCrap(ctx context.Context, in *PokerCrapReq, opts ...client.CallOption) (*PokerCrapRsp, error)
	GetShopPayResult(ctx context.Context, in *GetShopPayResultReq, opts ...client.CallOption) (*GetShopPayResultRsp, error)
	GetRoundAwards(ctx context.Context, in *GetRoundAwardsReq, opts ...client.CallOption) (*GetRoundAwardsRsp, error)
}

type activityService struct {
	c    client.Client
	name string
}

func NewActivityService(name string, c client.Client) ActivityService {
	return &activityService{
		c:    c,
		name: name,
	}
}

func (c *activityService) GetActivityConfig(ctx context.Context, in *GetActivityConfigReq, opts ...client.CallOption) (*GetActivityConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.GetActivityConfig", in)
	out := new(GetActivityConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetReward(ctx context.Context, in *GetRewardReq, opts ...client.CallOption) (*GetRewardRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.GetReward", in)
	out := new(GetRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetDelayReward(ctx context.Context, in *GetDelayRewardReq, opts ...client.CallOption) (*GetDelayRewardRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.GetDelayReward", in)
	out := new(GetDelayRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) AdNotifyState(ctx context.Context, in *AdNotifyStateReq, opts ...client.CallOption) (*AdNotifyStateRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.AdNotifyState", in)
	out := new(AdNotifyStateRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) CopyActivityConfig(ctx context.Context, in *CopyActivityConfigReq, opts ...client.CallOption) (*CopyActivityConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.CopyActivityConfig", in)
	out := new(CopyActivityConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) PokerCrap(ctx context.Context, in *PokerCrapReq, opts ...client.CallOption) (*PokerCrapRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.PokerCrap", in)
	out := new(PokerCrapRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetShopPayResult(ctx context.Context, in *GetShopPayResultReq, opts ...client.CallOption) (*GetShopPayResultRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.GetShopPayResult", in)
	out := new(GetShopPayResultRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityService) GetRoundAwards(ctx context.Context, in *GetRoundAwardsReq, opts ...client.CallOption) (*GetRoundAwardsRsp, error) {
	req := c.c.NewRequest(c.name, "Activity.GetRoundAwards", in)
	out := new(GetRoundAwardsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Activity service

type ActivityHandler interface {
	GetActivityConfig(context.Context, *GetActivityConfigReq, *GetActivityConfigRsp) error
	GetReward(context.Context, *GetRewardReq, *GetRewardRsp) error
	GetDelayReward(context.Context, *GetDelayRewardReq, *GetDelayRewardRsp) error
	//完成广告订单
	AdNotifyState(context.Context, *AdNotifyStateReq, *AdNotifyStateRsp) error
	CopyActivityConfig(context.Context, *CopyActivityConfigReq, *CopyActivityConfigRsp) error
	// 猜大小
	PokerCrap(context.Context, *PokerCrapReq, *PokerCrapRsp) error
	GetShopPayResult(context.Context, *GetShopPayResultReq, *GetShopPayResultRsp) error
	GetRoundAwards(context.Context, *GetRoundAwardsReq, *GetRoundAwardsRsp) error
}

func RegisterActivityHandler(s server.Server, hdlr ActivityHandler, opts ...server.HandlerOption) error {
	type activity interface {
		GetActivityConfig(ctx context.Context, in *GetActivityConfigReq, out *GetActivityConfigRsp) error
		GetReward(ctx context.Context, in *GetRewardReq, out *GetRewardRsp) error
		GetDelayReward(ctx context.Context, in *GetDelayRewardReq, out *GetDelayRewardRsp) error
		AdNotifyState(ctx context.Context, in *AdNotifyStateReq, out *AdNotifyStateRsp) error
		CopyActivityConfig(ctx context.Context, in *CopyActivityConfigReq, out *CopyActivityConfigRsp) error
		PokerCrap(ctx context.Context, in *PokerCrapReq, out *PokerCrapRsp) error
		GetShopPayResult(ctx context.Context, in *GetShopPayResultReq, out *GetShopPayResultRsp) error
		GetRoundAwards(ctx context.Context, in *GetRoundAwardsReq, out *GetRoundAwardsRsp) error
	}
	type Activity struct {
		activity
	}
	h := &activityHandler{hdlr}
	return s.Handle(s.NewHandler(&Activity{h}, opts...))
}

type activityHandler struct {
	ActivityHandler
}

func (h *activityHandler) GetActivityConfig(ctx context.Context, in *GetActivityConfigReq, out *GetActivityConfigRsp) error {
	return h.ActivityHandler.GetActivityConfig(ctx, in, out)
}

func (h *activityHandler) GetReward(ctx context.Context, in *GetRewardReq, out *GetRewardRsp) error {
	return h.ActivityHandler.GetReward(ctx, in, out)
}

func (h *activityHandler) GetDelayReward(ctx context.Context, in *GetDelayRewardReq, out *GetDelayRewardRsp) error {
	return h.ActivityHandler.GetDelayReward(ctx, in, out)
}

func (h *activityHandler) AdNotifyState(ctx context.Context, in *AdNotifyStateReq, out *AdNotifyStateRsp) error {
	return h.ActivityHandler.AdNotifyState(ctx, in, out)
}

func (h *activityHandler) CopyActivityConfig(ctx context.Context, in *CopyActivityConfigReq, out *CopyActivityConfigRsp) error {
	return h.ActivityHandler.CopyActivityConfig(ctx, in, out)
}

func (h *activityHandler) PokerCrap(ctx context.Context, in *PokerCrapReq, out *PokerCrapRsp) error {
	return h.ActivityHandler.PokerCrap(ctx, in, out)
}

func (h *activityHandler) GetShopPayResult(ctx context.Context, in *GetShopPayResultReq, out *GetShopPayResultRsp) error {
	return h.ActivityHandler.GetShopPayResult(ctx, in, out)
}

func (h *activityHandler) GetRoundAwards(ctx context.Context, in *GetRoundAwardsReq, out *GetRoundAwardsRsp) error {
	return h.ActivityHandler.GetRoundAwards(ctx, in, out)
}

// Api Endpoints for Sign service

func NewSignEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Sign service

type SignService interface {
	GetSignConfig(ctx context.Context, in *GetSignConfigReq, opts ...client.CallOption) (*GetSignConfigRsp, error)
	GetSignReward(ctx context.Context, in *GetSignRewardReq, opts ...client.CallOption) (*GetSignRewardRsp, error)
	//按月签到
	GetMonthSignConfig(ctx context.Context, in *GetMonthSignConfigReq, opts ...client.CallOption) (*GetMonthSignConfigRsp, error)
	GetMonthSignReward(ctx context.Context, in *GetMonthSignRewardReq, opts ...client.CallOption) (*GetMonthSignRewardRsp, error)
}

type signService struct {
	c    client.Client
	name string
}

func NewSignService(name string, c client.Client) SignService {
	return &signService{
		c:    c,
		name: name,
	}
}

func (c *signService) GetSignConfig(ctx context.Context, in *GetSignConfigReq, opts ...client.CallOption) (*GetSignConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Sign.GetSignConfig", in)
	out := new(GetSignConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signService) GetSignReward(ctx context.Context, in *GetSignRewardReq, opts ...client.CallOption) (*GetSignRewardRsp, error) {
	req := c.c.NewRequest(c.name, "Sign.GetSignReward", in)
	out := new(GetSignRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signService) GetMonthSignConfig(ctx context.Context, in *GetMonthSignConfigReq, opts ...client.CallOption) (*GetMonthSignConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Sign.GetMonthSignConfig", in)
	out := new(GetMonthSignConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signService) GetMonthSignReward(ctx context.Context, in *GetMonthSignRewardReq, opts ...client.CallOption) (*GetMonthSignRewardRsp, error) {
	req := c.c.NewRequest(c.name, "Sign.GetMonthSignReward", in)
	out := new(GetMonthSignRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sign service

type SignHandler interface {
	GetSignConfig(context.Context, *GetSignConfigReq, *GetSignConfigRsp) error
	GetSignReward(context.Context, *GetSignRewardReq, *GetSignRewardRsp) error
	//按月签到
	GetMonthSignConfig(context.Context, *GetMonthSignConfigReq, *GetMonthSignConfigRsp) error
	GetMonthSignReward(context.Context, *GetMonthSignRewardReq, *GetMonthSignRewardRsp) error
}

func RegisterSignHandler(s server.Server, hdlr SignHandler, opts ...server.HandlerOption) error {
	type sign interface {
		GetSignConfig(ctx context.Context, in *GetSignConfigReq, out *GetSignConfigRsp) error
		GetSignReward(ctx context.Context, in *GetSignRewardReq, out *GetSignRewardRsp) error
		GetMonthSignConfig(ctx context.Context, in *GetMonthSignConfigReq, out *GetMonthSignConfigRsp) error
		GetMonthSignReward(ctx context.Context, in *GetMonthSignRewardReq, out *GetMonthSignRewardRsp) error
	}
	type Sign struct {
		sign
	}
	h := &signHandler{hdlr}
	return s.Handle(s.NewHandler(&Sign{h}, opts...))
}

type signHandler struct {
	SignHandler
}

func (h *signHandler) GetSignConfig(ctx context.Context, in *GetSignConfigReq, out *GetSignConfigRsp) error {
	return h.SignHandler.GetSignConfig(ctx, in, out)
}

func (h *signHandler) GetSignReward(ctx context.Context, in *GetSignRewardReq, out *GetSignRewardRsp) error {
	return h.SignHandler.GetSignReward(ctx, in, out)
}

func (h *signHandler) GetMonthSignConfig(ctx context.Context, in *GetMonthSignConfigReq, out *GetMonthSignConfigRsp) error {
	return h.SignHandler.GetMonthSignConfig(ctx, in, out)
}

func (h *signHandler) GetMonthSignReward(ctx context.Context, in *GetMonthSignRewardReq, out *GetMonthSignRewardRsp) error {
	return h.SignHandler.GetMonthSignReward(ctx, in, out)
}

// Api Endpoints for RolledCoins service

func NewRolledCoinsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RolledCoins service

type RolledCoinsService interface {
	GetRolledCoinsConfig(ctx context.Context, in *GetRolledCoinsConfigReq, opts ...client.CallOption) (*GetRolledCoinsConfigRsp, error)
	GetRolledCoinsReward(ctx context.Context, in *GetRolledCoinsRewardReq, opts ...client.CallOption) (*GetRolledCoinsRewardRsp, error)
	RolledCoinsPayResult(ctx context.Context, in *RolledCoinsPayResultReq, opts ...client.CallOption) (*Empty, error)
}

type rolledCoinsService struct {
	c    client.Client
	name string
}

func NewRolledCoinsService(name string, c client.Client) RolledCoinsService {
	return &rolledCoinsService{
		c:    c,
		name: name,
	}
}

func (c *rolledCoinsService) GetRolledCoinsConfig(ctx context.Context, in *GetRolledCoinsConfigReq, opts ...client.CallOption) (*GetRolledCoinsConfigRsp, error) {
	req := c.c.NewRequest(c.name, "RolledCoins.GetRolledCoinsConfig", in)
	out := new(GetRolledCoinsConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolledCoinsService) GetRolledCoinsReward(ctx context.Context, in *GetRolledCoinsRewardReq, opts ...client.CallOption) (*GetRolledCoinsRewardRsp, error) {
	req := c.c.NewRequest(c.name, "RolledCoins.GetRolledCoinsReward", in)
	out := new(GetRolledCoinsRewardRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolledCoinsService) RolledCoinsPayResult(ctx context.Context, in *RolledCoinsPayResultReq, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "RolledCoins.RolledCoinsPayResult", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RolledCoins service

type RolledCoinsHandler interface {
	GetRolledCoinsConfig(context.Context, *GetRolledCoinsConfigReq, *GetRolledCoinsConfigRsp) error
	GetRolledCoinsReward(context.Context, *GetRolledCoinsRewardReq, *GetRolledCoinsRewardRsp) error
	RolledCoinsPayResult(context.Context, *RolledCoinsPayResultReq, *Empty) error
}

func RegisterRolledCoinsHandler(s server.Server, hdlr RolledCoinsHandler, opts ...server.HandlerOption) error {
	type rolledCoins interface {
		GetRolledCoinsConfig(ctx context.Context, in *GetRolledCoinsConfigReq, out *GetRolledCoinsConfigRsp) error
		GetRolledCoinsReward(ctx context.Context, in *GetRolledCoinsRewardReq, out *GetRolledCoinsRewardRsp) error
		RolledCoinsPayResult(ctx context.Context, in *RolledCoinsPayResultReq, out *Empty) error
	}
	type RolledCoins struct {
		rolledCoins
	}
	h := &rolledCoinsHandler{hdlr}
	return s.Handle(s.NewHandler(&RolledCoins{h}, opts...))
}

type rolledCoinsHandler struct {
	RolledCoinsHandler
}

func (h *rolledCoinsHandler) GetRolledCoinsConfig(ctx context.Context, in *GetRolledCoinsConfigReq, out *GetRolledCoinsConfigRsp) error {
	return h.RolledCoinsHandler.GetRolledCoinsConfig(ctx, in, out)
}

func (h *rolledCoinsHandler) GetRolledCoinsReward(ctx context.Context, in *GetRolledCoinsRewardReq, out *GetRolledCoinsRewardRsp) error {
	return h.RolledCoinsHandler.GetRolledCoinsReward(ctx, in, out)
}

func (h *rolledCoinsHandler) RolledCoinsPayResult(ctx context.Context, in *RolledCoinsPayResultReq, out *Empty) error {
	return h.RolledCoinsHandler.RolledCoinsPayResult(ctx, in, out)
}

// Api Endpoints for Tollgate service

func NewTollgateEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tollgate service

type TollgateService interface {
	GetTollgateConfig(ctx context.Context, in *GetTollgateConfigReq, opts ...client.CallOption) (*GetTollgateConfigRsp, error)
	CrossGate(ctx context.Context, in *CrossGateReq, opts ...client.CallOption) (*CrossGateRsp, error)
	GetLvAwards(ctx context.Context, in *GetLvAwardsReq, opts ...client.CallOption) (*GetLvAwardsRsp, error)
	GetTollgateRank(ctx context.Context, in *GetTollgateRankReq, opts ...client.CallOption) (*GetTollgateRankRsp, error)
}

type tollgateService struct {
	c    client.Client
	name string
}

func NewTollgateService(name string, c client.Client) TollgateService {
	return &tollgateService{
		c:    c,
		name: name,
	}
}

func (c *tollgateService) GetTollgateConfig(ctx context.Context, in *GetTollgateConfigReq, opts ...client.CallOption) (*GetTollgateConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Tollgate.GetTollgateConfig", in)
	out := new(GetTollgateConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollgateService) CrossGate(ctx context.Context, in *CrossGateReq, opts ...client.CallOption) (*CrossGateRsp, error) {
	req := c.c.NewRequest(c.name, "Tollgate.CrossGate", in)
	out := new(CrossGateRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollgateService) GetLvAwards(ctx context.Context, in *GetLvAwardsReq, opts ...client.CallOption) (*GetLvAwardsRsp, error) {
	req := c.c.NewRequest(c.name, "Tollgate.GetLvAwards", in)
	out := new(GetLvAwardsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tollgateService) GetTollgateRank(ctx context.Context, in *GetTollgateRankReq, opts ...client.CallOption) (*GetTollgateRankRsp, error) {
	req := c.c.NewRequest(c.name, "Tollgate.GetTollgateRank", in)
	out := new(GetTollgateRankRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tollgate service

type TollgateHandler interface {
	GetTollgateConfig(context.Context, *GetTollgateConfigReq, *GetTollgateConfigRsp) error
	CrossGate(context.Context, *CrossGateReq, *CrossGateRsp) error
	GetLvAwards(context.Context, *GetLvAwardsReq, *GetLvAwardsRsp) error
	GetTollgateRank(context.Context, *GetTollgateRankReq, *GetTollgateRankRsp) error
}

func RegisterTollgateHandler(s server.Server, hdlr TollgateHandler, opts ...server.HandlerOption) error {
	type tollgate interface {
		GetTollgateConfig(ctx context.Context, in *GetTollgateConfigReq, out *GetTollgateConfigRsp) error
		CrossGate(ctx context.Context, in *CrossGateReq, out *CrossGateRsp) error
		GetLvAwards(ctx context.Context, in *GetLvAwardsReq, out *GetLvAwardsRsp) error
		GetTollgateRank(ctx context.Context, in *GetTollgateRankReq, out *GetTollgateRankRsp) error
	}
	type Tollgate struct {
		tollgate
	}
	h := &tollgateHandler{hdlr}
	return s.Handle(s.NewHandler(&Tollgate{h}, opts...))
}

type tollgateHandler struct {
	TollgateHandler
}

func (h *tollgateHandler) GetTollgateConfig(ctx context.Context, in *GetTollgateConfigReq, out *GetTollgateConfigRsp) error {
	return h.TollgateHandler.GetTollgateConfig(ctx, in, out)
}

func (h *tollgateHandler) CrossGate(ctx context.Context, in *CrossGateReq, out *CrossGateRsp) error {
	return h.TollgateHandler.CrossGate(ctx, in, out)
}

func (h *tollgateHandler) GetLvAwards(ctx context.Context, in *GetLvAwardsReq, out *GetLvAwardsRsp) error {
	return h.TollgateHandler.GetLvAwards(ctx, in, out)
}

func (h *tollgateHandler) GetTollgateRank(ctx context.Context, in *GetTollgateRankReq, out *GetTollgateRankRsp) error {
	return h.TollgateHandler.GetTollgateRank(ctx, in, out)
}
