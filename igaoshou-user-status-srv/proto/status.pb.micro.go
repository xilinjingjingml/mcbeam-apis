// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/status.proto

package status

import (
	fmt "fmt"
	_ "gitee.com/microbeam/mcbeam-apis/mcbeam-common/proto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserStatus service

func NewUserStatusEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserStatus service

type UserStatusService interface {
	// 更新玩家状态
	//  rpc UpdatePlyStatus(UpdatePlyStatusReq) returns (UpdatePlyStatusRsp) {}
	// 获取玩家状态
	GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, opts ...client.CallOption) (*GetPlyStatusRsp, error)
	// 更新玩家游戏状态
	UpdatePlyGameStatus(ctx context.Context, in *UpdatePlyGameStatusReq, opts ...client.CallOption) (*UpdatePlyGameStatusRsp, error)
	// 获取玩家游戏状态
	GetPlyGameStatus(ctx context.Context, in *GetPlyGameStatusReq, opts ...client.CallOption) (*GetPlyGameStatusRsp, error)
}

type userStatusService struct {
	c    client.Client
	name string
}

func NewUserStatusService(name string, c client.Client) UserStatusService {
	return &userStatusService{
		c:    c,
		name: name,
	}
}

func (c *userStatusService) GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, opts ...client.CallOption) (*GetPlyStatusRsp, error) {
	req := c.c.NewRequest(c.name, "UserStatus.GetPlyStatus", in)
	out := new(GetPlyStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) UpdatePlyGameStatus(ctx context.Context, in *UpdatePlyGameStatusReq, opts ...client.CallOption) (*UpdatePlyGameStatusRsp, error) {
	req := c.c.NewRequest(c.name, "UserStatus.UpdatePlyGameStatus", in)
	out := new(UpdatePlyGameStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userStatusService) GetPlyGameStatus(ctx context.Context, in *GetPlyGameStatusReq, opts ...client.CallOption) (*GetPlyGameStatusRsp, error) {
	req := c.c.NewRequest(c.name, "UserStatus.GetPlyGameStatus", in)
	out := new(GetPlyGameStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserStatus service

type UserStatusHandler interface {
	// 更新玩家状态
	//  rpc UpdatePlyStatus(UpdatePlyStatusReq) returns (UpdatePlyStatusRsp) {}
	// 获取玩家状态
	GetPlyStatus(context.Context, *GetPlyStatusReq, *GetPlyStatusRsp) error
	// 更新玩家游戏状态
	UpdatePlyGameStatus(context.Context, *UpdatePlyGameStatusReq, *UpdatePlyGameStatusRsp) error
	// 获取玩家游戏状态
	GetPlyGameStatus(context.Context, *GetPlyGameStatusReq, *GetPlyGameStatusRsp) error
}

func RegisterUserStatusHandler(s server.Server, hdlr UserStatusHandler, opts ...server.HandlerOption) error {
	type userStatus interface {
		GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, out *GetPlyStatusRsp) error
		UpdatePlyGameStatus(ctx context.Context, in *UpdatePlyGameStatusReq, out *UpdatePlyGameStatusRsp) error
		GetPlyGameStatus(ctx context.Context, in *GetPlyGameStatusReq, out *GetPlyGameStatusRsp) error
	}
	type UserStatus struct {
		userStatus
	}
	h := &userStatusHandler{hdlr}
	return s.Handle(s.NewHandler(&UserStatus{h}, opts...))
}

type userStatusHandler struct {
	UserStatusHandler
}

func (h *userStatusHandler) GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, out *GetPlyStatusRsp) error {
	return h.UserStatusHandler.GetPlyStatus(ctx, in, out)
}

func (h *userStatusHandler) UpdatePlyGameStatus(ctx context.Context, in *UpdatePlyGameStatusReq, out *UpdatePlyGameStatusRsp) error {
	return h.UserStatusHandler.UpdatePlyGameStatus(ctx, in, out)
}

func (h *userStatusHandler) GetPlyGameStatus(ctx context.Context, in *GetPlyGameStatusReq, out *GetPlyGameStatusRsp) error {
	return h.UserStatusHandler.GetPlyGameStatus(ctx, in, out)
}
