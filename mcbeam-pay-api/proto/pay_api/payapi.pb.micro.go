// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/pay_api/payapi.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	api1 "github.com/micro/micro/v3/proto/api"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PayApi service

func NewPayApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PayApi service

type PayApiService interface {
	PayOrder(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	AliPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	WeChatPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	HuaWeiPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	XsollaPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	PayPalNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	ApplePayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	GooglePayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	VipPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	OutGoldNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
	OKSpinNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error)
}

type payApiService struct {
	c    client.Client
	name string
}

func NewPayApiService(name string, c client.Client) PayApiService {
	return &payApiService{
		c:    c,
		name: name,
	}
}

func (c *payApiService) PayOrder(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.PayOrder", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) AliPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.AliPayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) WeChatPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.WeChatPayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) HuaWeiPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.HuaWeiPayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) XsollaPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.XsollaPayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) PayPalNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.PayPalNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) ApplePayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.ApplePayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) GooglePayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.GooglePayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) VipPayNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.VipPayNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) OutGoldNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.OutGoldNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payApiService) OKSpinNotify(ctx context.Context, in *api1.Request, opts ...client.CallOption) (*api1.Response, error) {
	req := c.c.NewRequest(c.name, "PayApi.OKSpinNotify", in)
	out := new(api1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PayApi service

type PayApiHandler interface {
	PayOrder(context.Context, *api1.Request, *api1.Response) error
	AliPayNotify(context.Context, *api1.Request, *api1.Response) error
	WeChatPayNotify(context.Context, *api1.Request, *api1.Response) error
	HuaWeiPayNotify(context.Context, *api1.Request, *api1.Response) error
	XsollaPayNotify(context.Context, *api1.Request, *api1.Response) error
	PayPalNotify(context.Context, *api1.Request, *api1.Response) error
	ApplePayNotify(context.Context, *api1.Request, *api1.Response) error
	GooglePayNotify(context.Context, *api1.Request, *api1.Response) error
	VipPayNotify(context.Context, *api1.Request, *api1.Response) error
	OutGoldNotify(context.Context, *api1.Request, *api1.Response) error
	OKSpinNotify(context.Context, *api1.Request, *api1.Response) error
}

func RegisterPayApiHandler(s server.Server, hdlr PayApiHandler, opts ...server.HandlerOption) error {
	type payApi interface {
		PayOrder(ctx context.Context, in *api1.Request, out *api1.Response) error
		AliPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		WeChatPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		HuaWeiPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		XsollaPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		PayPalNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		ApplePayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		GooglePayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		VipPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		OutGoldNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
		OKSpinNotify(ctx context.Context, in *api1.Request, out *api1.Response) error
	}
	type PayApi struct {
		payApi
	}
	h := &payApiHandler{hdlr}
	return s.Handle(s.NewHandler(&PayApi{h}, opts...))
}

type payApiHandler struct {
	PayApiHandler
}

func (h *payApiHandler) PayOrder(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.PayOrder(ctx, in, out)
}

func (h *payApiHandler) AliPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.AliPayNotify(ctx, in, out)
}

func (h *payApiHandler) WeChatPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.WeChatPayNotify(ctx, in, out)
}

func (h *payApiHandler) HuaWeiPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.HuaWeiPayNotify(ctx, in, out)
}

func (h *payApiHandler) XsollaPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.XsollaPayNotify(ctx, in, out)
}

func (h *payApiHandler) PayPalNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.PayPalNotify(ctx, in, out)
}

func (h *payApiHandler) ApplePayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.ApplePayNotify(ctx, in, out)
}

func (h *payApiHandler) GooglePayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.GooglePayNotify(ctx, in, out)
}

func (h *payApiHandler) VipPayNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.VipPayNotify(ctx, in, out)
}

func (h *payApiHandler) OutGoldNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.OutGoldNotify(ctx, in, out)
}

func (h *payApiHandler) OKSpinNotify(ctx context.Context, in *api1.Request, out *api1.Response) error {
	return h.PayApiHandler.OKSpinNotify(ctx, in, out)
}
