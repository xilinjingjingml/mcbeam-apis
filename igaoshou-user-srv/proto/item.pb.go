// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.1
// source: proto/item.proto

package user

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 道具ID
// 说明: 对应到 item/item.go
type ItemID int32

const (
	ItemID_CoinV       ItemID = 0   // v币
	ItemID_Ticket      ItemID = 1   // 奖券、门票
	ItemID_Diamond     ItemID = 2   // 钻石
	ItemID_Money       ItemID = 3   // 现金
	ItemID_Gold        ItemID = 4   // 金币
	ItemID_GoldItem    ItemID = 5   // 金币（代）
	ItemID_Credits     ItemID = 6   // 积分
	ItemID_Turntable   ItemID = 7   // 转盘币
	ItemID_GameDiamond ItemID = 8   // 棋牌钻石
	ItemID_Rebate      ItemID = 100 // 免扣券
	ItemID_Rewards     ItemID = 201 // 奖励金(钻石代币)
	////////////////////////
	//  玩家公开道具 3XX 会返回给客户端
	ItemID_Prob_Start      ItemID = 300
	ItemID_MemberCard      ItemID = 301   // 会员系统1
	ItemID_CG_Dduanwei     ItemID = 302   //闯关段位
	ItemID_QP_VipLevel     ItemID = 303   // 棋牌vip等级
	ItemID_QP_VipExp       ItemID = 304   // 棋牌vip经验值
	ItemID_Prob_End        ItemID = 399   ////////////////////////
	ItemID_Exp             ItemID = 10000 // 经验值
	ItemID_GoldenMedal     ItemID = 10001 // 奖章 金
	ItemID_SilverMedal     ItemID = 10002 // 奖章 银
	ItemID_ProtectStarCard ItemID = 10003 // 保星卡
	ItemID_PromRedPacket   ItemID = 10004 // 红包(推广)
	ItemID_GameGold        ItemID = 10005 // 棋牌金币
	ItemID_GameBean        ItemID = 10006 // 棋牌金豆
	ItemID_RedPacket       ItemID = 10007 // 红包
	ItemID_Emoji           ItemID = 10008 // 魔法表情
	ItemID_DDZGold         ItemID = 10009 // 斗地主金币
	ItemID_DDZBean         ItemID = 10010 // 斗地主金豆
	ItemID_CGGold          ItemID = 10011 // 闯关金币
	ItemID_CGPower         ItemID = 10012 // 闯关体力
	ItemID_CGCup           ItemID = 10013 // 闯关奖杯
	ItemID_MJDoubleCard    ItemID = 10014 // 双倍卡
	ItemID_MJCappedCard    ItemID = 10015 // 封顶卡
	ItemID_MJStartCard     ItemID = 10016 // 开局卡
	////////////////////////
	ItemID_SuperDoubleCard ItemID = 10017 //  超级加倍卡
	ItemID_RecorderCard    ItemID = 10018 //  记牌器
	ItemID_FreeCard        ItemID = 10019 // 免输卡
	ItemID_QP_WeeksCard    ItemID = 10020 // 至尊周卡
	// 斗地主
	ItemID_DDZ_HuaFei      ItemID = 10021 // 10021 斗地主话费
	ItemID_DDZ_FuKa        ItemID = 10022 // 10022 斗地主福卡
	ItemID_DDZ_ZhaDanKaiJu ItemID = 10023 // 10023 炸弹开局卡
	// 海外乐园游戏平台
	ItemID_LY_Gold     ItemID = 10024 // 游戏币 (海外-乐园游戏平台)
	ItemID_LY_GoldFree ItemID = 10025 // 赠送游戏币  (海外-乐园游戏平台)
	ItemID_LY_Coin     ItemID = 10030 // coin(海外-乐园游戏平台)
	// 百元红包模式
	ItemID_BY_FREE_LOSE ItemID = 10026 // 百元红包免扣符
	ItemID_BY_VCOIN     ItemID = 10027 // 百元红包元宝
	ItemID_BY_TOCASH    ItemID = 10028 // 百元红包本金
	ItemID_BY_CASH      ItemID = 10029 // 百元红包现金道具
	// 巴西
	ItemID_BX_BONUS      ItemID = 10040 // 巴西Bonus金币，不允许提现
	ItemID_BX_DOLLAR     ItemID = 10041 // 巴西dollar金币，可以提现
	ItemID_PlatformMedal ItemID = 10042 // 奖章 平台联赛奖章
	ItemID_RP_ABTest     ItemID = 90001 // 百元红包AB测试道具
)

// Enum value maps for ItemID.
var (
	ItemID_name = map[int32]string{
		0:     "CoinV",
		1:     "Ticket",
		2:     "Diamond",
		3:     "Money",
		4:     "Gold",
		5:     "GoldItem",
		6:     "Credits",
		7:     "Turntable",
		8:     "GameDiamond",
		100:   "Rebate",
		201:   "Rewards",
		300:   "Prob_Start",
		301:   "MemberCard",
		302:   "CG_Dduanwei",
		303:   "QP_VipLevel",
		304:   "QP_VipExp",
		399:   "Prob_End",
		10000: "Exp",
		10001: "GoldenMedal",
		10002: "SilverMedal",
		10003: "ProtectStarCard",
		10004: "PromRedPacket",
		10005: "GameGold",
		10006: "GameBean",
		10007: "RedPacket",
		10008: "Emoji",
		10009: "DDZGold",
		10010: "DDZBean",
		10011: "CGGold",
		10012: "CGPower",
		10013: "CGCup",
		10014: "MJDoubleCard",
		10015: "MJCappedCard",
		10016: "MJStartCard",
		10017: "SuperDoubleCard",
		10018: "RecorderCard",
		10019: "FreeCard",
		10020: "QP_WeeksCard",
		10021: "DDZ_HuaFei",
		10022: "DDZ_FuKa",
		10023: "DDZ_ZhaDanKaiJu",
		10024: "LY_Gold",
		10025: "LY_GoldFree",
		10030: "LY_Coin",
		10026: "BY_FREE_LOSE",
		10027: "BY_VCOIN",
		10028: "BY_TOCASH",
		10029: "BY_CASH",
		10040: "BX_BONUS",
		10041: "BX_DOLLAR",
		10042: "PlatformMedal",
		90001: "RP_ABTest",
	}
	ItemID_value = map[string]int32{
		"CoinV":           0,
		"Ticket":          1,
		"Diamond":         2,
		"Money":           3,
		"Gold":            4,
		"GoldItem":        5,
		"Credits":         6,
		"Turntable":       7,
		"GameDiamond":     8,
		"Rebate":          100,
		"Rewards":         201,
		"Prob_Start":      300,
		"MemberCard":      301,
		"CG_Dduanwei":     302,
		"QP_VipLevel":     303,
		"QP_VipExp":       304,
		"Prob_End":        399,
		"Exp":             10000,
		"GoldenMedal":     10001,
		"SilverMedal":     10002,
		"ProtectStarCard": 10003,
		"PromRedPacket":   10004,
		"GameGold":        10005,
		"GameBean":        10006,
		"RedPacket":       10007,
		"Emoji":           10008,
		"DDZGold":         10009,
		"DDZBean":         10010,
		"CGGold":          10011,
		"CGPower":         10012,
		"CGCup":           10013,
		"MJDoubleCard":    10014,
		"MJCappedCard":    10015,
		"MJStartCard":     10016,
		"SuperDoubleCard": 10017,
		"RecorderCard":    10018,
		"FreeCard":        10019,
		"QP_WeeksCard":    10020,
		"DDZ_HuaFei":      10021,
		"DDZ_FuKa":        10022,
		"DDZ_ZhaDanKaiJu": 10023,
		"LY_Gold":         10024,
		"LY_GoldFree":     10025,
		"LY_Coin":         10030,
		"BY_FREE_LOSE":    10026,
		"BY_VCOIN":        10027,
		"BY_TOCASH":       10028,
		"BY_CASH":         10029,
		"BX_BONUS":        10040,
		"BX_DOLLAR":       10041,
		"PlatformMedal":   10042,
		"RP_ABTest":       90001,
	}
)

func (x ItemID) Enum() *ItemID {
	p := new(ItemID)
	*p = x
	return p
}

func (x ItemID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemID) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_item_proto_enumTypes[0].Descriptor()
}

func (ItemID) Type() protoreflect.EnumType {
	return &file_proto_item_proto_enumTypes[0]
}

func (x ItemID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemID.Descriptor instead.
func (ItemID) EnumDescriptor() ([]byte, []int) {
	return file_proto_item_proto_rawDescGZIP(), []int{0}
}

var File_proto_item_proto protoreflect.FileDescriptor

var file_proto_item_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x75, 0x73, 0x65, 0x72, 0x2a, 0xbb, 0x06, 0x0a, 0x06, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x69, 0x6e, 0x56, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x6f, 0x6c, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x75, 0x72, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x10, 0x64, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0xc9,
	0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x62, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10,
	0xac, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x10, 0xad, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x47, 0x5f, 0x44, 0x64, 0x75, 0x61, 0x6e, 0x77,
	0x65, 0x69, 0x10, 0xae, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x51, 0x50, 0x5f, 0x56, 0x69, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x10, 0xaf, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x51, 0x50, 0x5f, 0x56, 0x69,
	0x70, 0x45, 0x78, 0x70, 0x10, 0xb0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x62, 0x5f,
	0x45, 0x6e, 0x64, 0x10, 0x8f, 0x03, 0x12, 0x08, 0x0a, 0x03, 0x45, 0x78, 0x70, 0x10, 0x90, 0x4e,
	0x12, 0x10, 0x0a, 0x0b, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x10,
	0x91, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x64, 0x61,
	0x6c, 0x10, 0x92, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x43, 0x61, 0x72, 0x64, 0x10, 0x93, 0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x94, 0x4e, 0x12, 0x0d,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x95, 0x4e, 0x12, 0x0d, 0x0a,
	0x08, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x65, 0x61, 0x6e, 0x10, 0x96, 0x4e, 0x12, 0x0e, 0x0a, 0x09,
	0x52, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x10, 0x97, 0x4e, 0x12, 0x0a, 0x0a, 0x05,
	0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x98, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x44, 0x5a, 0x47,
	0x6f, 0x6c, 0x64, 0x10, 0x99, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x44, 0x5a, 0x42, 0x65, 0x61,
	0x6e, 0x10, 0x9a, 0x4e, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x47, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x9b,
	0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x47, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x9c, 0x4e, 0x12,
	0x0a, 0x0a, 0x05, 0x43, 0x47, 0x43, 0x75, 0x70, 0x10, 0x9d, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x4d,
	0x4a, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0x9e, 0x4e, 0x12, 0x11,
	0x0a, 0x0c, 0x4d, 0x4a, 0x43, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x10, 0x9f,
	0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x4a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x10, 0xa0, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0xa1, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x10, 0xa2, 0x4e, 0x12, 0x0d, 0x0a, 0x08,
	0x46, 0x72, 0x65, 0x65, 0x43, 0x61, 0x72, 0x64, 0x10, 0xa3, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x51,
	0x50, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x43, 0x61, 0x72, 0x64, 0x10, 0xa4, 0x4e, 0x12, 0x0f,
	0x0a, 0x0a, 0x44, 0x44, 0x5a, 0x5f, 0x48, 0x75, 0x61, 0x46, 0x65, 0x69, 0x10, 0xa5, 0x4e, 0x12,
	0x0d, 0x0a, 0x08, 0x44, 0x44, 0x5a, 0x5f, 0x46, 0x75, 0x4b, 0x61, 0x10, 0xa6, 0x4e, 0x12, 0x14,
	0x0a, 0x0f, 0x44, 0x44, 0x5a, 0x5f, 0x5a, 0x68, 0x61, 0x44, 0x61, 0x6e, 0x4b, 0x61, 0x69, 0x4a,
	0x75, 0x10, 0xa7, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x59, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10,
	0xa8, 0x4e, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x59, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x46, 0x72, 0x65,
	0x65, 0x10, 0xa9, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x59, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x10,
	0xae, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x42, 0x59, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0xaa, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x42, 0x59, 0x5f, 0x56, 0x43, 0x4f, 0x49,
	0x4e, 0x10, 0xab, 0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x59, 0x5f, 0x54, 0x4f, 0x43, 0x41, 0x53,
	0x48, 0x10, 0xac, 0x4e, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x59, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10,
	0xad, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x42, 0x58, 0x5f, 0x42, 0x4f, 0x4e, 0x55, 0x53, 0x10, 0xb8,
	0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x58, 0x5f, 0x44, 0x4f, 0x4c, 0x4c, 0x41, 0x52, 0x10, 0xb9,
	0x4e, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x64,
	0x61, 0x6c, 0x10, 0xba, 0x4e, 0x12, 0x0f, 0x0a, 0x09, 0x52, 0x50, 0x5f, 0x41, 0x42, 0x54, 0x65,
	0x73, 0x74, 0x10, 0x91, 0xbf, 0x05, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_item_proto_rawDescOnce sync.Once
	file_proto_item_proto_rawDescData = file_proto_item_proto_rawDesc
)

func file_proto_item_proto_rawDescGZIP() []byte {
	file_proto_item_proto_rawDescOnce.Do(func() {
		file_proto_item_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_item_proto_rawDescData)
	})
	return file_proto_item_proto_rawDescData
}

var file_proto_item_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_item_proto_goTypes = []interface{}{
	(ItemID)(0), // 0: user.ItemID
}
var file_proto_item_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_item_proto_init() }
func file_proto_item_proto_init() {
	if File_proto_item_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_item_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_item_proto_goTypes,
		DependencyIndexes: file_proto_item_proto_depIdxs,
		EnumInfos:         file_proto_item_proto_enumTypes,
	}.Build()
	File_proto_item_proto = out.File
	file_proto_item_proto_rawDesc = nil
	file_proto_item_proto_goTypes = nil
	file_proto_item_proto_depIdxs = nil
}
