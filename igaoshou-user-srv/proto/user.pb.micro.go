// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserRPC service

func NewUserRPCEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserRPC service

type UserRPCService interface {
	// 获取账号数据
	GetUserData(ctx context.Context, in *GetUserDataReq, opts ...client.CallOption) (*GetUserDataRsp, error)
	// 获取玩家基础信息
	GetGameDataWithUUid(ctx context.Context, in *GetGameDataWithUUidReq, opts ...client.CallOption) (*GetGameDataWithUUidRsp, error)
	// 获取玩家游戏数据
	GetUserGameData(ctx context.Context, in *GetUserGameDataReq, opts ...client.CallOption) (*GetUserGameDataRsp, error)
	// 更新道具 （多个道具时，要么全部成功，要么全部失败）
	UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...client.CallOption) (*UpdateItemRsp, error)
	//  获取道具数据量
	GetItem(ctx context.Context, in *GetItemReq, opts ...client.CallOption) (*GetItemRsp, error)
	// 更新账号
	UpdateUserData(ctx context.Context, in *UpdateUserDataReq, opts ...client.CallOption) (*UpdateUserDataRsp, error)
	// 道具配置
	GetItemConfig(ctx context.Context, in *GetItemConfigReq, opts ...client.CallOption) (*GetItemConfigRsp, error)
	// 随机返回一个机器人信息
	GetRandRobot(ctx context.Context, in *GetRandRobotReq, opts ...client.CallOption) (*GetRandRobotRsp, error)
	// 获取玩家游戏列表
	GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, opts ...client.CallOption) (*GetPlyGameListRsp, error)
	// 游戏币转换为点券
	Coin2Ticket(ctx context.Context, in *Coin2TicketReq, opts ...client.CallOption) (*Coin2TicketRsp, error)
	// 批量获取玩家头像昵称
	BatchToObtainPlyBrief(ctx context.Context, in *BatchToObtainPlyBriefReq, opts ...client.CallOption) (*BatchToObtainPlyBriefRsp, error)
	BatchToObtainPlyBriefByUuid(ctx context.Context, in *BatchToObtainPlyBriefByUuidReq, opts ...client.CallOption) (*BatchToObtainPlyBriefByUuidRsp, error)
	// 更新位置信息
	UpdateLocation(ctx context.Context, in *UpdateLocationReq, opts ...client.CallOption) (*UpdateLocationRsp, error)
	// 玩家登陆游戏
	GameLogin(ctx context.Context, in *GameLoginReq, opts ...client.CallOption) (*GameLoginRsp, error)
	// 查下输赢
	GetWinLoseWithDaily(ctx context.Context, in *GetWinLoseWithDailyReq, opts ...client.CallOption) (*GetWinLoseWithDailyRsp, error)
}

type userRPCService struct {
	c    client.Client
	name string
}

func NewUserRPCService(name string, c client.Client) UserRPCService {
	return &userRPCService{
		c:    c,
		name: name,
	}
}

func (c *userRPCService) GetUserData(ctx context.Context, in *GetUserDataReq, opts ...client.CallOption) (*GetUserDataRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetUserData", in)
	out := new(GetUserDataRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetGameDataWithUUid(ctx context.Context, in *GetGameDataWithUUidReq, opts ...client.CallOption) (*GetGameDataWithUUidRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetGameDataWithUUid", in)
	out := new(GetGameDataWithUUidRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetUserGameData(ctx context.Context, in *GetUserGameDataReq, opts ...client.CallOption) (*GetUserGameDataRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetUserGameData", in)
	out := new(GetUserGameDataRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...client.CallOption) (*UpdateItemRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.UpdateItem", in)
	out := new(UpdateItemRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetItem(ctx context.Context, in *GetItemReq, opts ...client.CallOption) (*GetItemRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetItem", in)
	out := new(GetItemRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) UpdateUserData(ctx context.Context, in *UpdateUserDataReq, opts ...client.CallOption) (*UpdateUserDataRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.UpdateUserData", in)
	out := new(UpdateUserDataRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetItemConfig(ctx context.Context, in *GetItemConfigReq, opts ...client.CallOption) (*GetItemConfigRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetItemConfig", in)
	out := new(GetItemConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetRandRobot(ctx context.Context, in *GetRandRobotReq, opts ...client.CallOption) (*GetRandRobotRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetRandRobot", in)
	out := new(GetRandRobotRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, opts ...client.CallOption) (*GetPlyGameListRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetPlyGameList", in)
	out := new(GetPlyGameListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) Coin2Ticket(ctx context.Context, in *Coin2TicketReq, opts ...client.CallOption) (*Coin2TicketRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.Coin2Ticket", in)
	out := new(Coin2TicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) BatchToObtainPlyBrief(ctx context.Context, in *BatchToObtainPlyBriefReq, opts ...client.CallOption) (*BatchToObtainPlyBriefRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.BatchToObtainPlyBrief", in)
	out := new(BatchToObtainPlyBriefRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) BatchToObtainPlyBriefByUuid(ctx context.Context, in *BatchToObtainPlyBriefByUuidReq, opts ...client.CallOption) (*BatchToObtainPlyBriefByUuidRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.BatchToObtainPlyBriefByUuid", in)
	out := new(BatchToObtainPlyBriefByUuidRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) UpdateLocation(ctx context.Context, in *UpdateLocationReq, opts ...client.CallOption) (*UpdateLocationRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.UpdateLocation", in)
	out := new(UpdateLocationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GameLogin(ctx context.Context, in *GameLoginReq, opts ...client.CallOption) (*GameLoginRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GameLogin", in)
	out := new(GameLoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRPCService) GetWinLoseWithDaily(ctx context.Context, in *GetWinLoseWithDailyReq, opts ...client.CallOption) (*GetWinLoseWithDailyRsp, error) {
	req := c.c.NewRequest(c.name, "UserRPC.GetWinLoseWithDaily", in)
	out := new(GetWinLoseWithDailyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserRPC service

type UserRPCHandler interface {
	// 获取账号数据
	GetUserData(context.Context, *GetUserDataReq, *GetUserDataRsp) error
	// 获取玩家基础信息
	GetGameDataWithUUid(context.Context, *GetGameDataWithUUidReq, *GetGameDataWithUUidRsp) error
	// 获取玩家游戏数据
	GetUserGameData(context.Context, *GetUserGameDataReq, *GetUserGameDataRsp) error
	// 更新道具 （多个道具时，要么全部成功，要么全部失败）
	UpdateItem(context.Context, *UpdateItemReq, *UpdateItemRsp) error
	//  获取道具数据量
	GetItem(context.Context, *GetItemReq, *GetItemRsp) error
	// 更新账号
	UpdateUserData(context.Context, *UpdateUserDataReq, *UpdateUserDataRsp) error
	// 道具配置
	GetItemConfig(context.Context, *GetItemConfigReq, *GetItemConfigRsp) error
	// 随机返回一个机器人信息
	GetRandRobot(context.Context, *GetRandRobotReq, *GetRandRobotRsp) error
	// 获取玩家游戏列表
	GetPlyGameList(context.Context, *GetPlyGameListReq, *GetPlyGameListRsp) error
	// 游戏币转换为点券
	Coin2Ticket(context.Context, *Coin2TicketReq, *Coin2TicketRsp) error
	// 批量获取玩家头像昵称
	BatchToObtainPlyBrief(context.Context, *BatchToObtainPlyBriefReq, *BatchToObtainPlyBriefRsp) error
	BatchToObtainPlyBriefByUuid(context.Context, *BatchToObtainPlyBriefByUuidReq, *BatchToObtainPlyBriefByUuidRsp) error
	// 更新位置信息
	UpdateLocation(context.Context, *UpdateLocationReq, *UpdateLocationRsp) error
	// 玩家登陆游戏
	GameLogin(context.Context, *GameLoginReq, *GameLoginRsp) error
	// 查下输赢
	GetWinLoseWithDaily(context.Context, *GetWinLoseWithDailyReq, *GetWinLoseWithDailyRsp) error
}

func RegisterUserRPCHandler(s server.Server, hdlr UserRPCHandler, opts ...server.HandlerOption) error {
	type userRPC interface {
		GetUserData(ctx context.Context, in *GetUserDataReq, out *GetUserDataRsp) error
		GetGameDataWithUUid(ctx context.Context, in *GetGameDataWithUUidReq, out *GetGameDataWithUUidRsp) error
		GetUserGameData(ctx context.Context, in *GetUserGameDataReq, out *GetUserGameDataRsp) error
		UpdateItem(ctx context.Context, in *UpdateItemReq, out *UpdateItemRsp) error
		GetItem(ctx context.Context, in *GetItemReq, out *GetItemRsp) error
		UpdateUserData(ctx context.Context, in *UpdateUserDataReq, out *UpdateUserDataRsp) error
		GetItemConfig(ctx context.Context, in *GetItemConfigReq, out *GetItemConfigRsp) error
		GetRandRobot(ctx context.Context, in *GetRandRobotReq, out *GetRandRobotRsp) error
		GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, out *GetPlyGameListRsp) error
		Coin2Ticket(ctx context.Context, in *Coin2TicketReq, out *Coin2TicketRsp) error
		BatchToObtainPlyBrief(ctx context.Context, in *BatchToObtainPlyBriefReq, out *BatchToObtainPlyBriefRsp) error
		BatchToObtainPlyBriefByUuid(ctx context.Context, in *BatchToObtainPlyBriefByUuidReq, out *BatchToObtainPlyBriefByUuidRsp) error
		UpdateLocation(ctx context.Context, in *UpdateLocationReq, out *UpdateLocationRsp) error
		GameLogin(ctx context.Context, in *GameLoginReq, out *GameLoginRsp) error
		GetWinLoseWithDaily(ctx context.Context, in *GetWinLoseWithDailyReq, out *GetWinLoseWithDailyRsp) error
	}
	type UserRPC struct {
		userRPC
	}
	h := &userRPCHandler{hdlr}
	return s.Handle(s.NewHandler(&UserRPC{h}, opts...))
}

type userRPCHandler struct {
	UserRPCHandler
}

func (h *userRPCHandler) GetUserData(ctx context.Context, in *GetUserDataReq, out *GetUserDataRsp) error {
	return h.UserRPCHandler.GetUserData(ctx, in, out)
}

func (h *userRPCHandler) GetGameDataWithUUid(ctx context.Context, in *GetGameDataWithUUidReq, out *GetGameDataWithUUidRsp) error {
	return h.UserRPCHandler.GetGameDataWithUUid(ctx, in, out)
}

func (h *userRPCHandler) GetUserGameData(ctx context.Context, in *GetUserGameDataReq, out *GetUserGameDataRsp) error {
	return h.UserRPCHandler.GetUserGameData(ctx, in, out)
}

func (h *userRPCHandler) UpdateItem(ctx context.Context, in *UpdateItemReq, out *UpdateItemRsp) error {
	return h.UserRPCHandler.UpdateItem(ctx, in, out)
}

func (h *userRPCHandler) GetItem(ctx context.Context, in *GetItemReq, out *GetItemRsp) error {
	return h.UserRPCHandler.GetItem(ctx, in, out)
}

func (h *userRPCHandler) UpdateUserData(ctx context.Context, in *UpdateUserDataReq, out *UpdateUserDataRsp) error {
	return h.UserRPCHandler.UpdateUserData(ctx, in, out)
}

func (h *userRPCHandler) GetItemConfig(ctx context.Context, in *GetItemConfigReq, out *GetItemConfigRsp) error {
	return h.UserRPCHandler.GetItemConfig(ctx, in, out)
}

func (h *userRPCHandler) GetRandRobot(ctx context.Context, in *GetRandRobotReq, out *GetRandRobotRsp) error {
	return h.UserRPCHandler.GetRandRobot(ctx, in, out)
}

func (h *userRPCHandler) GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, out *GetPlyGameListRsp) error {
	return h.UserRPCHandler.GetPlyGameList(ctx, in, out)
}

func (h *userRPCHandler) Coin2Ticket(ctx context.Context, in *Coin2TicketReq, out *Coin2TicketRsp) error {
	return h.UserRPCHandler.Coin2Ticket(ctx, in, out)
}

func (h *userRPCHandler) BatchToObtainPlyBrief(ctx context.Context, in *BatchToObtainPlyBriefReq, out *BatchToObtainPlyBriefRsp) error {
	return h.UserRPCHandler.BatchToObtainPlyBrief(ctx, in, out)
}

func (h *userRPCHandler) BatchToObtainPlyBriefByUuid(ctx context.Context, in *BatchToObtainPlyBriefByUuidReq, out *BatchToObtainPlyBriefByUuidRsp) error {
	return h.UserRPCHandler.BatchToObtainPlyBriefByUuid(ctx, in, out)
}

func (h *userRPCHandler) UpdateLocation(ctx context.Context, in *UpdateLocationReq, out *UpdateLocationRsp) error {
	return h.UserRPCHandler.UpdateLocation(ctx, in, out)
}

func (h *userRPCHandler) GameLogin(ctx context.Context, in *GameLoginReq, out *GameLoginRsp) error {
	return h.UserRPCHandler.GameLogin(ctx, in, out)
}

func (h *userRPCHandler) GetWinLoseWithDaily(ctx context.Context, in *GetWinLoseWithDailyReq, out *GetWinLoseWithDailyRsp) error {
	return h.UserRPCHandler.GetWinLoseWithDaily(ctx, in, out)
}
