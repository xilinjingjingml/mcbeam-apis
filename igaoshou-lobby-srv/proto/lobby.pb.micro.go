// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/lobby.proto

package lobby

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Lobby service

func NewLobbyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Lobby service

type LobbyService interface {
	// 登录接口
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error)
	// 获取游戏token
	GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...client.CallOption) (*GetAccessTokenRsp, error)
	// 获取大厅配置
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...client.CallOption) (*GetConfigRsp, error)
	//  获取玩家信息
	GetPlyDetail(ctx context.Context, in *GetPlyDetailReq, opts ...client.CallOption) (*GetPlyDetailRsp, error)
	// 拉取玩家道具
	GetItem(ctx context.Context, in *GetItemReq, opts ...client.CallOption) (*GetItemRsp, error)
	// 获取玩家游戏列表
	GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, opts ...client.CallOption) (*GetPlyGameListRsp, error)
	// g币转换为ticket
	Coin2Ticket(ctx context.Context, in *Coin2TicketReq, opts ...client.CallOption) (*Coin2TicketRsp, error)
	// 刷新token
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...client.CallOption) (*RefreshTokenRsp, error)
	// 获取在线人数
	GetOnlineNum(ctx context.Context, in *GetOnlineNumReq, opts ...client.CallOption) (*GetOnlineNumRsp, error)
	// 验证邮箱
	VerifyEmail(ctx context.Context, in *EmailVerificationReq, opts ...client.CallOption) (*EmailVerificationRsp, error)
	// 重置密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...client.CallOption) (*ResetPasswordRsp, error)
	// 更新道具
	UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...client.CallOption) (*UpdateItemRsp, error)
	// 获取玩家状态
	GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, opts ...client.CallOption) (*GetPlyStatusRsp, error)
	// 获取玩家在线状态
	GetOnlineStatus(ctx context.Context, in *GetOnlineStatusReq, opts ...client.CallOption) (*GetOnlineStatusRsp, error)
}

type lobbyService struct {
	c    client.Client
	name string
}

func NewLobbyService(name string, c client.Client) LobbyService {
	return &lobbyService{
		c:    c,
		name: name,
	}
}

func (c *lobbyService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.Login", in)
	out := new(LoginRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetAccessToken(ctx context.Context, in *GetAccessTokenReq, opts ...client.CallOption) (*GetAccessTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetAccessToken", in)
	out := new(GetAccessTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetConfig(ctx context.Context, in *GetConfigReq, opts ...client.CallOption) (*GetConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetConfig", in)
	out := new(GetConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetPlyDetail(ctx context.Context, in *GetPlyDetailReq, opts ...client.CallOption) (*GetPlyDetailRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetPlyDetail", in)
	out := new(GetPlyDetailRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetItem(ctx context.Context, in *GetItemReq, opts ...client.CallOption) (*GetItemRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetItem", in)
	out := new(GetItemRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, opts ...client.CallOption) (*GetPlyGameListRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetPlyGameList", in)
	out := new(GetPlyGameListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) Coin2Ticket(ctx context.Context, in *Coin2TicketReq, opts ...client.CallOption) (*Coin2TicketRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.Coin2Ticket", in)
	out := new(Coin2TicketRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...client.CallOption) (*RefreshTokenRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.RefreshToken", in)
	out := new(RefreshTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetOnlineNum(ctx context.Context, in *GetOnlineNumReq, opts ...client.CallOption) (*GetOnlineNumRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetOnlineNum", in)
	out := new(GetOnlineNumRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) VerifyEmail(ctx context.Context, in *EmailVerificationReq, opts ...client.CallOption) (*EmailVerificationRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.VerifyEmail", in)
	out := new(EmailVerificationRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...client.CallOption) (*ResetPasswordRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.ResetPassword", in)
	out := new(ResetPasswordRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...client.CallOption) (*UpdateItemRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.UpdateItem", in)
	out := new(UpdateItemRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, opts ...client.CallOption) (*GetPlyStatusRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetPlyStatus", in)
	out := new(GetPlyStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lobbyService) GetOnlineStatus(ctx context.Context, in *GetOnlineStatusReq, opts ...client.CallOption) (*GetOnlineStatusRsp, error) {
	req := c.c.NewRequest(c.name, "Lobby.GetOnlineStatus", in)
	out := new(GetOnlineStatusRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lobby service

type LobbyHandler interface {
	// 登录接口
	Login(context.Context, *LoginReq, *LoginRsp) error
	// 获取游戏token
	GetAccessToken(context.Context, *GetAccessTokenReq, *GetAccessTokenRsp) error
	// 获取大厅配置
	GetConfig(context.Context, *GetConfigReq, *GetConfigRsp) error
	//  获取玩家信息
	GetPlyDetail(context.Context, *GetPlyDetailReq, *GetPlyDetailRsp) error
	// 拉取玩家道具
	GetItem(context.Context, *GetItemReq, *GetItemRsp) error
	// 获取玩家游戏列表
	GetPlyGameList(context.Context, *GetPlyGameListReq, *GetPlyGameListRsp) error
	// g币转换为ticket
	Coin2Ticket(context.Context, *Coin2TicketReq, *Coin2TicketRsp) error
	// 刷新token
	RefreshToken(context.Context, *RefreshTokenReq, *RefreshTokenRsp) error
	// 获取在线人数
	GetOnlineNum(context.Context, *GetOnlineNumReq, *GetOnlineNumRsp) error
	// 验证邮箱
	VerifyEmail(context.Context, *EmailVerificationReq, *EmailVerificationRsp) error
	// 重置密码
	ResetPassword(context.Context, *ResetPasswordReq, *ResetPasswordRsp) error
	// 更新道具
	UpdateItem(context.Context, *UpdateItemReq, *UpdateItemRsp) error
	// 获取玩家状态
	GetPlyStatus(context.Context, *GetPlyStatusReq, *GetPlyStatusRsp) error
	// 获取玩家在线状态
	GetOnlineStatus(context.Context, *GetOnlineStatusReq, *GetOnlineStatusRsp) error
}

func RegisterLobbyHandler(s server.Server, hdlr LobbyHandler, opts ...server.HandlerOption) error {
	type lobby interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRsp) error
		GetAccessToken(ctx context.Context, in *GetAccessTokenReq, out *GetAccessTokenRsp) error
		GetConfig(ctx context.Context, in *GetConfigReq, out *GetConfigRsp) error
		GetPlyDetail(ctx context.Context, in *GetPlyDetailReq, out *GetPlyDetailRsp) error
		GetItem(ctx context.Context, in *GetItemReq, out *GetItemRsp) error
		GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, out *GetPlyGameListRsp) error
		Coin2Ticket(ctx context.Context, in *Coin2TicketReq, out *Coin2TicketRsp) error
		RefreshToken(ctx context.Context, in *RefreshTokenReq, out *RefreshTokenRsp) error
		GetOnlineNum(ctx context.Context, in *GetOnlineNumReq, out *GetOnlineNumRsp) error
		VerifyEmail(ctx context.Context, in *EmailVerificationReq, out *EmailVerificationRsp) error
		ResetPassword(ctx context.Context, in *ResetPasswordReq, out *ResetPasswordRsp) error
		UpdateItem(ctx context.Context, in *UpdateItemReq, out *UpdateItemRsp) error
		GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, out *GetPlyStatusRsp) error
		GetOnlineStatus(ctx context.Context, in *GetOnlineStatusReq, out *GetOnlineStatusRsp) error
	}
	type Lobby struct {
		lobby
	}
	h := &lobbyHandler{hdlr}
	return s.Handle(s.NewHandler(&Lobby{h}, opts...))
}

type lobbyHandler struct {
	LobbyHandler
}

func (h *lobbyHandler) Login(ctx context.Context, in *LoginReq, out *LoginRsp) error {
	return h.LobbyHandler.Login(ctx, in, out)
}

func (h *lobbyHandler) GetAccessToken(ctx context.Context, in *GetAccessTokenReq, out *GetAccessTokenRsp) error {
	return h.LobbyHandler.GetAccessToken(ctx, in, out)
}

func (h *lobbyHandler) GetConfig(ctx context.Context, in *GetConfigReq, out *GetConfigRsp) error {
	return h.LobbyHandler.GetConfig(ctx, in, out)
}

func (h *lobbyHandler) GetPlyDetail(ctx context.Context, in *GetPlyDetailReq, out *GetPlyDetailRsp) error {
	return h.LobbyHandler.GetPlyDetail(ctx, in, out)
}

func (h *lobbyHandler) GetItem(ctx context.Context, in *GetItemReq, out *GetItemRsp) error {
	return h.LobbyHandler.GetItem(ctx, in, out)
}

func (h *lobbyHandler) GetPlyGameList(ctx context.Context, in *GetPlyGameListReq, out *GetPlyGameListRsp) error {
	return h.LobbyHandler.GetPlyGameList(ctx, in, out)
}

func (h *lobbyHandler) Coin2Ticket(ctx context.Context, in *Coin2TicketReq, out *Coin2TicketRsp) error {
	return h.LobbyHandler.Coin2Ticket(ctx, in, out)
}

func (h *lobbyHandler) RefreshToken(ctx context.Context, in *RefreshTokenReq, out *RefreshTokenRsp) error {
	return h.LobbyHandler.RefreshToken(ctx, in, out)
}

func (h *lobbyHandler) GetOnlineNum(ctx context.Context, in *GetOnlineNumReq, out *GetOnlineNumRsp) error {
	return h.LobbyHandler.GetOnlineNum(ctx, in, out)
}

func (h *lobbyHandler) VerifyEmail(ctx context.Context, in *EmailVerificationReq, out *EmailVerificationRsp) error {
	return h.LobbyHandler.VerifyEmail(ctx, in, out)
}

func (h *lobbyHandler) ResetPassword(ctx context.Context, in *ResetPasswordReq, out *ResetPasswordRsp) error {
	return h.LobbyHandler.ResetPassword(ctx, in, out)
}

func (h *lobbyHandler) UpdateItem(ctx context.Context, in *UpdateItemReq, out *UpdateItemRsp) error {
	return h.LobbyHandler.UpdateItem(ctx, in, out)
}

func (h *lobbyHandler) GetPlyStatus(ctx context.Context, in *GetPlyStatusReq, out *GetPlyStatusRsp) error {
	return h.LobbyHandler.GetPlyStatus(ctx, in, out)
}

func (h *lobbyHandler) GetOnlineStatus(ctx context.Context, in *GetOnlineStatusReq, out *GetOnlineStatusRsp) error {
	return h.LobbyHandler.GetOnlineStatus(ctx, in, out)
}

// Api Endpoints for LobbyRpc service

func NewLobbyRpcEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LobbyRpc service

type LobbyRpcService interface {
	GetLobbyConfig(ctx context.Context, in *GetLobbyConfigReq, opts ...client.CallOption) (*GetLobbyConfigRsp, error)
}

type lobbyRpcService struct {
	c    client.Client
	name string
}

func NewLobbyRpcService(name string, c client.Client) LobbyRpcService {
	return &lobbyRpcService{
		c:    c,
		name: name,
	}
}

func (c *lobbyRpcService) GetLobbyConfig(ctx context.Context, in *GetLobbyConfigReq, opts ...client.CallOption) (*GetLobbyConfigRsp, error) {
	req := c.c.NewRequest(c.name, "LobbyRpc.GetLobbyConfig", in)
	out := new(GetLobbyConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LobbyRpc service

type LobbyRpcHandler interface {
	GetLobbyConfig(context.Context, *GetLobbyConfigReq, *GetLobbyConfigRsp) error
}

func RegisterLobbyRpcHandler(s server.Server, hdlr LobbyRpcHandler, opts ...server.HandlerOption) error {
	type lobbyRpc interface {
		GetLobbyConfig(ctx context.Context, in *GetLobbyConfigReq, out *GetLobbyConfigRsp) error
	}
	type LobbyRpc struct {
		lobbyRpc
	}
	h := &lobbyRpcHandler{hdlr}
	return s.Handle(s.NewHandler(&LobbyRpc{h}, opts...))
}

type lobbyRpcHandler struct {
	LobbyRpcHandler
}

func (h *lobbyRpcHandler) GetLobbyConfig(ctx context.Context, in *GetLobbyConfigReq, out *GetLobbyConfigRsp) error {
	return h.LobbyRpcHandler.GetLobbyConfig(ctx, in, out)
}
