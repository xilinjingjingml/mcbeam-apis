// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/gsm.proto

package gsm

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rooms service

func NewRoomsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rooms service

type RoomsService interface {
	// 创建房间
	CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...client.CallOption) (*CreateRoomRsp, error)
	//获取房间信息
	GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...client.CallOption) (*GetRoomInfoRsp, error)
	// 检查房间是否存在
	CheckRoomExists(ctx context.Context, in *CheckRoomExistsReq, opts ...client.CallOption) (*CheckRoomExistsRsp, error)
	// 踢出房间玩家
	KickPlayer(ctx context.Context, in *KickPlayerReq, opts ...client.CallOption) (*KickPlayerRsp, error)
}

type roomsService struct {
	c    client.Client
	name string
}

func NewRoomsService(name string, c client.Client) RoomsService {
	return &roomsService{
		c:    c,
		name: name,
	}
}

func (c *roomsService) CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...client.CallOption) (*CreateRoomRsp, error) {
	req := c.c.NewRequest(c.name, "Rooms.CreateRoom", in)
	out := new(CreateRoomRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...client.CallOption) (*GetRoomInfoRsp, error) {
	req := c.c.NewRequest(c.name, "Rooms.GetRoomInfo", in)
	out := new(GetRoomInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) CheckRoomExists(ctx context.Context, in *CheckRoomExistsReq, opts ...client.CallOption) (*CheckRoomExistsRsp, error) {
	req := c.c.NewRequest(c.name, "Rooms.CheckRoomExists", in)
	out := new(CheckRoomExistsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) KickPlayer(ctx context.Context, in *KickPlayerReq, opts ...client.CallOption) (*KickPlayerRsp, error) {
	req := c.c.NewRequest(c.name, "Rooms.KickPlayer", in)
	out := new(KickPlayerRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rooms service

type RoomsHandler interface {
	// 创建房间
	CreateRoom(context.Context, *CreateRoomReq, *CreateRoomRsp) error
	//获取房间信息
	GetRoomInfo(context.Context, *GetRoomInfoReq, *GetRoomInfoRsp) error
	// 检查房间是否存在
	CheckRoomExists(context.Context, *CheckRoomExistsReq, *CheckRoomExistsRsp) error
	// 踢出房间玩家
	KickPlayer(context.Context, *KickPlayerReq, *KickPlayerRsp) error
}

func RegisterRoomsHandler(s server.Server, hdlr RoomsHandler, opts ...server.HandlerOption) error {
	type rooms interface {
		CreateRoom(ctx context.Context, in *CreateRoomReq, out *CreateRoomRsp) error
		GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, out *GetRoomInfoRsp) error
		CheckRoomExists(ctx context.Context, in *CheckRoomExistsReq, out *CheckRoomExistsRsp) error
		KickPlayer(ctx context.Context, in *KickPlayerReq, out *KickPlayerRsp) error
	}
	type Rooms struct {
		rooms
	}
	h := &roomsHandler{hdlr}
	return s.Handle(s.NewHandler(&Rooms{h}, opts...))
}

type roomsHandler struct {
	RoomsHandler
}

func (h *roomsHandler) CreateRoom(ctx context.Context, in *CreateRoomReq, out *CreateRoomRsp) error {
	return h.RoomsHandler.CreateRoom(ctx, in, out)
}

func (h *roomsHandler) GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, out *GetRoomInfoRsp) error {
	return h.RoomsHandler.GetRoomInfo(ctx, in, out)
}

func (h *roomsHandler) CheckRoomExists(ctx context.Context, in *CheckRoomExistsReq, out *CheckRoomExistsRsp) error {
	return h.RoomsHandler.CheckRoomExists(ctx, in, out)
}

func (h *roomsHandler) KickPlayer(ctx context.Context, in *KickPlayerReq, out *KickPlayerRsp) error {
	return h.RoomsHandler.KickPlayer(ctx, in, out)
}
