// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/mail.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Mail service

func NewMailEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Mail service

type MailService interface {
	SendMail(ctx context.Context, in *SendMailReq, opts ...client.CallOption) (*SendMailRsp, error)
	OperateMail(ctx context.Context, in *OperateMailReq, opts ...client.CallOption) (*OperateMailRsp, error)
	LoadMailList(ctx context.Context, in *LoadMailListReq, opts ...client.CallOption) (*LoadMailListRsp, error)
}

type mailService struct {
	c    client.Client
	name string
}

func NewMailService(name string, c client.Client) MailService {
	return &mailService{
		c:    c,
		name: name,
	}
}

func (c *mailService) SendMail(ctx context.Context, in *SendMailReq, opts ...client.CallOption) (*SendMailRsp, error) {
	req := c.c.NewRequest(c.name, "Mail.SendMail", in)
	out := new(SendMailRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) OperateMail(ctx context.Context, in *OperateMailReq, opts ...client.CallOption) (*OperateMailRsp, error) {
	req := c.c.NewRequest(c.name, "Mail.OperateMail", in)
	out := new(OperateMailRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailService) LoadMailList(ctx context.Context, in *LoadMailListReq, opts ...client.CallOption) (*LoadMailListRsp, error) {
	req := c.c.NewRequest(c.name, "Mail.LoadMailList", in)
	out := new(LoadMailListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mail service

type MailHandler interface {
	SendMail(context.Context, *SendMailReq, *SendMailRsp) error
	OperateMail(context.Context, *OperateMailReq, *OperateMailRsp) error
	LoadMailList(context.Context, *LoadMailListReq, *LoadMailListRsp) error
}

func RegisterMailHandler(s server.Server, hdlr MailHandler, opts ...server.HandlerOption) error {
	type mail interface {
		SendMail(ctx context.Context, in *SendMailReq, out *SendMailRsp) error
		OperateMail(ctx context.Context, in *OperateMailReq, out *OperateMailRsp) error
		LoadMailList(ctx context.Context, in *LoadMailListReq, out *LoadMailListRsp) error
	}
	type Mail struct {
		mail
	}
	h := &mailHandler{hdlr}
	return s.Handle(s.NewHandler(&Mail{h}, opts...))
}

type mailHandler struct {
	MailHandler
}

func (h *mailHandler) SendMail(ctx context.Context, in *SendMailReq, out *SendMailRsp) error {
	return h.MailHandler.SendMail(ctx, in, out)
}

func (h *mailHandler) OperateMail(ctx context.Context, in *OperateMailReq, out *OperateMailRsp) error {
	return h.MailHandler.OperateMail(ctx, in, out)
}

func (h *mailHandler) LoadMailList(ctx context.Context, in *LoadMailListReq, out *LoadMailListRsp) error {
	return h.MailHandler.LoadMailList(ctx, in, out)
}
