// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/backend.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Developer service

func NewDeveloperEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Developer service

type DeveloperService interface {
	CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, opts ...client.CallOption) (*CreateDeveloperRes, error)
	LoginDeveloper(ctx context.Context, in *LoginDeveloperReq, opts ...client.CallOption) (*LoginDeveloperRes, error)
	UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...client.CallOption) (*UpdateDeveloperRes, error)
}

type developerService struct {
	c    client.Client
	name string
}

func NewDeveloperService(name string, c client.Client) DeveloperService {
	return &developerService{
		c:    c,
		name: name,
	}
}

func (c *developerService) CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, opts ...client.CallOption) (*CreateDeveloperRes, error) {
	req := c.c.NewRequest(c.name, "Developer.CreateDeveloper", in)
	out := new(CreateDeveloperRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerService) LoginDeveloper(ctx context.Context, in *LoginDeveloperReq, opts ...client.CallOption) (*LoginDeveloperRes, error) {
	req := c.c.NewRequest(c.name, "Developer.LoginDeveloper", in)
	out := new(LoginDeveloperRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *developerService) UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, opts ...client.CallOption) (*UpdateDeveloperRes, error) {
	req := c.c.NewRequest(c.name, "Developer.UpdateDeveloper", in)
	out := new(UpdateDeveloperRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Developer service

type DeveloperHandler interface {
	CreateDeveloper(context.Context, *CreateDeveloperReq, *CreateDeveloperRes) error
	LoginDeveloper(context.Context, *LoginDeveloperReq, *LoginDeveloperRes) error
	UpdateDeveloper(context.Context, *UpdateDeveloperReq, *UpdateDeveloperRes) error
}

func RegisterDeveloperHandler(s server.Server, hdlr DeveloperHandler, opts ...server.HandlerOption) error {
	type developer interface {
		CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, out *CreateDeveloperRes) error
		LoginDeveloper(ctx context.Context, in *LoginDeveloperReq, out *LoginDeveloperRes) error
		UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, out *UpdateDeveloperRes) error
	}
	type Developer struct {
		developer
	}
	h := &developerHandler{hdlr}
	return s.Handle(s.NewHandler(&Developer{h}, opts...))
}

type developerHandler struct {
	DeveloperHandler
}

func (h *developerHandler) CreateDeveloper(ctx context.Context, in *CreateDeveloperReq, out *CreateDeveloperRes) error {
	return h.DeveloperHandler.CreateDeveloper(ctx, in, out)
}

func (h *developerHandler) LoginDeveloper(ctx context.Context, in *LoginDeveloperReq, out *LoginDeveloperRes) error {
	return h.DeveloperHandler.LoginDeveloper(ctx, in, out)
}

func (h *developerHandler) UpdateDeveloper(ctx context.Context, in *UpdateDeveloperReq, out *UpdateDeveloperRes) error {
	return h.DeveloperHandler.UpdateDeveloper(ctx, in, out)
}

// Api Endpoints for Game service

func NewGameEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Game service

type GameService interface {
	CreateGame(ctx context.Context, in *OperateGameReq, opts ...client.CallOption) (*OperateGameRes, error)
	LoadGame(ctx context.Context, in *LoadGameReq, opts ...client.CallOption) (*LoadGameRes, error)
	UpdateGame(ctx context.Context, in *OperateGameReq, opts ...client.CallOption) (*OperateGameRes, error)
	LoadGameData(ctx context.Context, in *LoadGameDataReq, opts ...client.CallOption) (*LoadGameDataRes, error)
}

type gameService struct {
	c    client.Client
	name string
}

func NewGameService(name string, c client.Client) GameService {
	return &gameService{
		c:    c,
		name: name,
	}
}

func (c *gameService) CreateGame(ctx context.Context, in *OperateGameReq, opts ...client.CallOption) (*OperateGameRes, error) {
	req := c.c.NewRequest(c.name, "Game.CreateGame", in)
	out := new(OperateGameRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) LoadGame(ctx context.Context, in *LoadGameReq, opts ...client.CallOption) (*LoadGameRes, error) {
	req := c.c.NewRequest(c.name, "Game.LoadGame", in)
	out := new(LoadGameRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) UpdateGame(ctx context.Context, in *OperateGameReq, opts ...client.CallOption) (*OperateGameRes, error) {
	req := c.c.NewRequest(c.name, "Game.UpdateGame", in)
	out := new(OperateGameRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameService) LoadGameData(ctx context.Context, in *LoadGameDataReq, opts ...client.CallOption) (*LoadGameDataRes, error) {
	req := c.c.NewRequest(c.name, "Game.LoadGameData", in)
	out := new(LoadGameDataRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Game service

type GameHandler interface {
	CreateGame(context.Context, *OperateGameReq, *OperateGameRes) error
	LoadGame(context.Context, *LoadGameReq, *LoadGameRes) error
	UpdateGame(context.Context, *OperateGameReq, *OperateGameRes) error
	LoadGameData(context.Context, *LoadGameDataReq, *LoadGameDataRes) error
}

func RegisterGameHandler(s server.Server, hdlr GameHandler, opts ...server.HandlerOption) error {
	type game interface {
		CreateGame(ctx context.Context, in *OperateGameReq, out *OperateGameRes) error
		LoadGame(ctx context.Context, in *LoadGameReq, out *LoadGameRes) error
		UpdateGame(ctx context.Context, in *OperateGameReq, out *OperateGameRes) error
		LoadGameData(ctx context.Context, in *LoadGameDataReq, out *LoadGameDataRes) error
	}
	type Game struct {
		game
	}
	h := &gameHandler{hdlr}
	return s.Handle(s.NewHandler(&Game{h}, opts...))
}

type gameHandler struct {
	GameHandler
}

func (h *gameHandler) CreateGame(ctx context.Context, in *OperateGameReq, out *OperateGameRes) error {
	return h.GameHandler.CreateGame(ctx, in, out)
}

func (h *gameHandler) LoadGame(ctx context.Context, in *LoadGameReq, out *LoadGameRes) error {
	return h.GameHandler.LoadGame(ctx, in, out)
}

func (h *gameHandler) UpdateGame(ctx context.Context, in *OperateGameReq, out *OperateGameRes) error {
	return h.GameHandler.UpdateGame(ctx, in, out)
}

func (h *gameHandler) LoadGameData(ctx context.Context, in *LoadGameDataReq, out *LoadGameDataRes) error {
	return h.GameHandler.LoadGameData(ctx, in, out)
}

// Api Endpoints for Match service

func NewMatchEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Match service

type MatchService interface {
	CreateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, opts ...client.CallOption) (*OperateMatchDetailRes, error)
	LoadMatchDetail(ctx context.Context, in *LoadMatchDetailReq, opts ...client.CallOption) (*LoadMatchDetailRes, error)
	UpdateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, opts ...client.CallOption) (*OperateMatchDetailRes, error)
	CreateMatchRewardsTemplate(ctx context.Context, in *CreateMatchRewardsTemplateReq, opts ...client.CallOption) (*CreateMatchRewardsTemplateRes, error)
	LoadMatchRewardsTemplate(ctx context.Context, in *LoadMatchRewardsTemplateReq, opts ...client.CallOption) (*LoadMatchRewardsTemplateRes, error)
	UpdateMatchRewardsTemplate(ctx context.Context, in *UpdateMatchRewardsTemplateReq, opts ...client.CallOption) (*UpdateMatchRewardsTemplateRes, error)
	CreateMatchTemplate(ctx context.Context, in *CreateMatchTemplateReq, opts ...client.CallOption) (*CreateMatchTemplateRes, error)
	LoadMatchTemplate(ctx context.Context, in *LoadMatchTemplateReq, opts ...client.CallOption) (*LoadMatchTemplateRes, error)
	UpdateMatchTemplate(ctx context.Context, in *UpdateMatchTemplateReq, opts ...client.CallOption) (*UpdateMatchTemplateRes, error)
	AddMatchDetail(ctx context.Context, in *AddMatchDetailReq, opts ...client.CallOption) (*AddMatchDetailRes, error)
	EditMatchDetail(ctx context.Context, in *EditMatchDetailReq, opts ...client.CallOption) (*EditMatchDetailRes, error)
	SelectMatchDetail(ctx context.Context, in *SelectMatchDetailReq, opts ...client.CallOption) (*SelectMatchDetailRes, error)
	CreateMatchLabels(ctx context.Context, in *CreateMatchLabelsReq, opts ...client.CallOption) (*CreateMatchLabelsRes, error)
	DeleteMatchLabels(ctx context.Context, in *DeleteMatchLabelsReq, opts ...client.CallOption) (*DeleteMatchLabelsRes, error)
	EditMatchLabels(ctx context.Context, in *EditMatchLabelsReq, opts ...client.CallOption) (*EditMatchLabelsRes, error)
	LoadMatchLabels(ctx context.Context, in *LoadMatchLabelsReq, opts ...client.CallOption) (*LoadMatchLabelsRes, error)
	ReadRawConfig(ctx context.Context, in *ReadRawConfigReq, opts ...client.CallOption) (*ReadRawConfigRes, error)
}

type matchService struct {
	c    client.Client
	name string
}

func NewMatchService(name string, c client.Client) MatchService {
	return &matchService{
		c:    c,
		name: name,
	}
}

func (c *matchService) CreateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, opts ...client.CallOption) (*OperateMatchDetailRes, error) {
	req := c.c.NewRequest(c.name, "Match.CreateMatchDetail", in)
	out := new(OperateMatchDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) LoadMatchDetail(ctx context.Context, in *LoadMatchDetailReq, opts ...client.CallOption) (*LoadMatchDetailRes, error) {
	req := c.c.NewRequest(c.name, "Match.LoadMatchDetail", in)
	out := new(LoadMatchDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) UpdateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, opts ...client.CallOption) (*OperateMatchDetailRes, error) {
	req := c.c.NewRequest(c.name, "Match.UpdateMatchDetail", in)
	out := new(OperateMatchDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) CreateMatchRewardsTemplate(ctx context.Context, in *CreateMatchRewardsTemplateReq, opts ...client.CallOption) (*CreateMatchRewardsTemplateRes, error) {
	req := c.c.NewRequest(c.name, "Match.CreateMatchRewardsTemplate", in)
	out := new(CreateMatchRewardsTemplateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) LoadMatchRewardsTemplate(ctx context.Context, in *LoadMatchRewardsTemplateReq, opts ...client.CallOption) (*LoadMatchRewardsTemplateRes, error) {
	req := c.c.NewRequest(c.name, "Match.LoadMatchRewardsTemplate", in)
	out := new(LoadMatchRewardsTemplateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) UpdateMatchRewardsTemplate(ctx context.Context, in *UpdateMatchRewardsTemplateReq, opts ...client.CallOption) (*UpdateMatchRewardsTemplateRes, error) {
	req := c.c.NewRequest(c.name, "Match.UpdateMatchRewardsTemplate", in)
	out := new(UpdateMatchRewardsTemplateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) CreateMatchTemplate(ctx context.Context, in *CreateMatchTemplateReq, opts ...client.CallOption) (*CreateMatchTemplateRes, error) {
	req := c.c.NewRequest(c.name, "Match.CreateMatchTemplate", in)
	out := new(CreateMatchTemplateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) LoadMatchTemplate(ctx context.Context, in *LoadMatchTemplateReq, opts ...client.CallOption) (*LoadMatchTemplateRes, error) {
	req := c.c.NewRequest(c.name, "Match.LoadMatchTemplate", in)
	out := new(LoadMatchTemplateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) UpdateMatchTemplate(ctx context.Context, in *UpdateMatchTemplateReq, opts ...client.CallOption) (*UpdateMatchTemplateRes, error) {
	req := c.c.NewRequest(c.name, "Match.UpdateMatchTemplate", in)
	out := new(UpdateMatchTemplateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) AddMatchDetail(ctx context.Context, in *AddMatchDetailReq, opts ...client.CallOption) (*AddMatchDetailRes, error) {
	req := c.c.NewRequest(c.name, "Match.AddMatchDetail", in)
	out := new(AddMatchDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) EditMatchDetail(ctx context.Context, in *EditMatchDetailReq, opts ...client.CallOption) (*EditMatchDetailRes, error) {
	req := c.c.NewRequest(c.name, "Match.EditMatchDetail", in)
	out := new(EditMatchDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) SelectMatchDetail(ctx context.Context, in *SelectMatchDetailReq, opts ...client.CallOption) (*SelectMatchDetailRes, error) {
	req := c.c.NewRequest(c.name, "Match.SelectMatchDetail", in)
	out := new(SelectMatchDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) CreateMatchLabels(ctx context.Context, in *CreateMatchLabelsReq, opts ...client.CallOption) (*CreateMatchLabelsRes, error) {
	req := c.c.NewRequest(c.name, "Match.CreateMatchLabels", in)
	out := new(CreateMatchLabelsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) DeleteMatchLabels(ctx context.Context, in *DeleteMatchLabelsReq, opts ...client.CallOption) (*DeleteMatchLabelsRes, error) {
	req := c.c.NewRequest(c.name, "Match.DeleteMatchLabels", in)
	out := new(DeleteMatchLabelsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) EditMatchLabels(ctx context.Context, in *EditMatchLabelsReq, opts ...client.CallOption) (*EditMatchLabelsRes, error) {
	req := c.c.NewRequest(c.name, "Match.EditMatchLabels", in)
	out := new(EditMatchLabelsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) LoadMatchLabels(ctx context.Context, in *LoadMatchLabelsReq, opts ...client.CallOption) (*LoadMatchLabelsRes, error) {
	req := c.c.NewRequest(c.name, "Match.LoadMatchLabels", in)
	out := new(LoadMatchLabelsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchService) ReadRawConfig(ctx context.Context, in *ReadRawConfigReq, opts ...client.CallOption) (*ReadRawConfigRes, error) {
	req := c.c.NewRequest(c.name, "Match.ReadRawConfig", in)
	out := new(ReadRawConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Match service

type MatchHandler interface {
	CreateMatchDetail(context.Context, *OperateMatchDetailReq, *OperateMatchDetailRes) error
	LoadMatchDetail(context.Context, *LoadMatchDetailReq, *LoadMatchDetailRes) error
	UpdateMatchDetail(context.Context, *OperateMatchDetailReq, *OperateMatchDetailRes) error
	CreateMatchRewardsTemplate(context.Context, *CreateMatchRewardsTemplateReq, *CreateMatchRewardsTemplateRes) error
	LoadMatchRewardsTemplate(context.Context, *LoadMatchRewardsTemplateReq, *LoadMatchRewardsTemplateRes) error
	UpdateMatchRewardsTemplate(context.Context, *UpdateMatchRewardsTemplateReq, *UpdateMatchRewardsTemplateRes) error
	CreateMatchTemplate(context.Context, *CreateMatchTemplateReq, *CreateMatchTemplateRes) error
	LoadMatchTemplate(context.Context, *LoadMatchTemplateReq, *LoadMatchTemplateRes) error
	UpdateMatchTemplate(context.Context, *UpdateMatchTemplateReq, *UpdateMatchTemplateRes) error
	AddMatchDetail(context.Context, *AddMatchDetailReq, *AddMatchDetailRes) error
	EditMatchDetail(context.Context, *EditMatchDetailReq, *EditMatchDetailRes) error
	SelectMatchDetail(context.Context, *SelectMatchDetailReq, *SelectMatchDetailRes) error
	CreateMatchLabels(context.Context, *CreateMatchLabelsReq, *CreateMatchLabelsRes) error
	DeleteMatchLabels(context.Context, *DeleteMatchLabelsReq, *DeleteMatchLabelsRes) error
	EditMatchLabels(context.Context, *EditMatchLabelsReq, *EditMatchLabelsRes) error
	LoadMatchLabels(context.Context, *LoadMatchLabelsReq, *LoadMatchLabelsRes) error
	ReadRawConfig(context.Context, *ReadRawConfigReq, *ReadRawConfigRes) error
}

func RegisterMatchHandler(s server.Server, hdlr MatchHandler, opts ...server.HandlerOption) error {
	type match interface {
		CreateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, out *OperateMatchDetailRes) error
		LoadMatchDetail(ctx context.Context, in *LoadMatchDetailReq, out *LoadMatchDetailRes) error
		UpdateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, out *OperateMatchDetailRes) error
		CreateMatchRewardsTemplate(ctx context.Context, in *CreateMatchRewardsTemplateReq, out *CreateMatchRewardsTemplateRes) error
		LoadMatchRewardsTemplate(ctx context.Context, in *LoadMatchRewardsTemplateReq, out *LoadMatchRewardsTemplateRes) error
		UpdateMatchRewardsTemplate(ctx context.Context, in *UpdateMatchRewardsTemplateReq, out *UpdateMatchRewardsTemplateRes) error
		CreateMatchTemplate(ctx context.Context, in *CreateMatchTemplateReq, out *CreateMatchTemplateRes) error
		LoadMatchTemplate(ctx context.Context, in *LoadMatchTemplateReq, out *LoadMatchTemplateRes) error
		UpdateMatchTemplate(ctx context.Context, in *UpdateMatchTemplateReq, out *UpdateMatchTemplateRes) error
		AddMatchDetail(ctx context.Context, in *AddMatchDetailReq, out *AddMatchDetailRes) error
		EditMatchDetail(ctx context.Context, in *EditMatchDetailReq, out *EditMatchDetailRes) error
		SelectMatchDetail(ctx context.Context, in *SelectMatchDetailReq, out *SelectMatchDetailRes) error
		CreateMatchLabels(ctx context.Context, in *CreateMatchLabelsReq, out *CreateMatchLabelsRes) error
		DeleteMatchLabels(ctx context.Context, in *DeleteMatchLabelsReq, out *DeleteMatchLabelsRes) error
		EditMatchLabels(ctx context.Context, in *EditMatchLabelsReq, out *EditMatchLabelsRes) error
		LoadMatchLabels(ctx context.Context, in *LoadMatchLabelsReq, out *LoadMatchLabelsRes) error
		ReadRawConfig(ctx context.Context, in *ReadRawConfigReq, out *ReadRawConfigRes) error
	}
	type Match struct {
		match
	}
	h := &matchHandler{hdlr}
	return s.Handle(s.NewHandler(&Match{h}, opts...))
}

type matchHandler struct {
	MatchHandler
}

func (h *matchHandler) CreateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, out *OperateMatchDetailRes) error {
	return h.MatchHandler.CreateMatchDetail(ctx, in, out)
}

func (h *matchHandler) LoadMatchDetail(ctx context.Context, in *LoadMatchDetailReq, out *LoadMatchDetailRes) error {
	return h.MatchHandler.LoadMatchDetail(ctx, in, out)
}

func (h *matchHandler) UpdateMatchDetail(ctx context.Context, in *OperateMatchDetailReq, out *OperateMatchDetailRes) error {
	return h.MatchHandler.UpdateMatchDetail(ctx, in, out)
}

func (h *matchHandler) CreateMatchRewardsTemplate(ctx context.Context, in *CreateMatchRewardsTemplateReq, out *CreateMatchRewardsTemplateRes) error {
	return h.MatchHandler.CreateMatchRewardsTemplate(ctx, in, out)
}

func (h *matchHandler) LoadMatchRewardsTemplate(ctx context.Context, in *LoadMatchRewardsTemplateReq, out *LoadMatchRewardsTemplateRes) error {
	return h.MatchHandler.LoadMatchRewardsTemplate(ctx, in, out)
}

func (h *matchHandler) UpdateMatchRewardsTemplate(ctx context.Context, in *UpdateMatchRewardsTemplateReq, out *UpdateMatchRewardsTemplateRes) error {
	return h.MatchHandler.UpdateMatchRewardsTemplate(ctx, in, out)
}

func (h *matchHandler) CreateMatchTemplate(ctx context.Context, in *CreateMatchTemplateReq, out *CreateMatchTemplateRes) error {
	return h.MatchHandler.CreateMatchTemplate(ctx, in, out)
}

func (h *matchHandler) LoadMatchTemplate(ctx context.Context, in *LoadMatchTemplateReq, out *LoadMatchTemplateRes) error {
	return h.MatchHandler.LoadMatchTemplate(ctx, in, out)
}

func (h *matchHandler) UpdateMatchTemplate(ctx context.Context, in *UpdateMatchTemplateReq, out *UpdateMatchTemplateRes) error {
	return h.MatchHandler.UpdateMatchTemplate(ctx, in, out)
}

func (h *matchHandler) AddMatchDetail(ctx context.Context, in *AddMatchDetailReq, out *AddMatchDetailRes) error {
	return h.MatchHandler.AddMatchDetail(ctx, in, out)
}

func (h *matchHandler) EditMatchDetail(ctx context.Context, in *EditMatchDetailReq, out *EditMatchDetailRes) error {
	return h.MatchHandler.EditMatchDetail(ctx, in, out)
}

func (h *matchHandler) SelectMatchDetail(ctx context.Context, in *SelectMatchDetailReq, out *SelectMatchDetailRes) error {
	return h.MatchHandler.SelectMatchDetail(ctx, in, out)
}

func (h *matchHandler) CreateMatchLabels(ctx context.Context, in *CreateMatchLabelsReq, out *CreateMatchLabelsRes) error {
	return h.MatchHandler.CreateMatchLabels(ctx, in, out)
}

func (h *matchHandler) DeleteMatchLabels(ctx context.Context, in *DeleteMatchLabelsReq, out *DeleteMatchLabelsRes) error {
	return h.MatchHandler.DeleteMatchLabels(ctx, in, out)
}

func (h *matchHandler) EditMatchLabels(ctx context.Context, in *EditMatchLabelsReq, out *EditMatchLabelsRes) error {
	return h.MatchHandler.EditMatchLabels(ctx, in, out)
}

func (h *matchHandler) LoadMatchLabels(ctx context.Context, in *LoadMatchLabelsReq, out *LoadMatchLabelsRes) error {
	return h.MatchHandler.LoadMatchLabels(ctx, in, out)
}

func (h *matchHandler) ReadRawConfig(ctx context.Context, in *ReadRawConfigReq, out *ReadRawConfigRes) error {
	return h.MatchHandler.ReadRawConfig(ctx, in, out)
}

// Api Endpoints for Config service

func NewConfigEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Config service

type ConfigService interface {
	LoadGameInfo(ctx context.Context, in *LoadGameInfoReq, opts ...client.CallOption) (*LoadGameInfoRes, error)
	LoadOnlineParam(ctx context.Context, in *LoadOnlineParamReq, opts ...client.CallOption) (*LoadOnlineParamRes, error)
	CheckUpdate(ctx context.Context, in *CheckUpdateReq, opts ...client.CallOption) (*CheckUpdateRes, error)
	LoadNotice(ctx context.Context, in *LoadNoticeReq, opts ...client.CallOption) (*LoadNoticeRes, error)
	RefreshCache(ctx context.Context, in *RefreshCacheReq, opts ...client.CallOption) (*RefreshCacheRes, error)
	LoadPlat(ctx context.Context, in *LoadPlatReq, opts ...client.CallOption) (*LoadPlatRes, error)
	LoadApp(ctx context.Context, in *LoadAppReq, opts ...client.CallOption) (*LoadAppRes, error)
	OperateGameParam(ctx context.Context, in *OperateGameParamReq, opts ...client.CallOption) (*OperateGameParamRes, error)
	LoadGameParam(ctx context.Context, in *LoadGameParamReq, opts ...client.CallOption) (*LoadGameParamRes, error)
	OperateGameVersion(ctx context.Context, in *OperateGameVersionReq, opts ...client.CallOption) (*OperateGameVersionRes, error)
	LoadGameVersion(ctx context.Context, in *LoadGameVersionReq, opts ...client.CallOption) (*LoadGameVersionRes, error)
	LoadGameVersionLog(ctx context.Context, in *LoadGameVersionLogReq, opts ...client.CallOption) (*LoadGameVersionLogRes, error)
	CreatePlatConfig(ctx context.Context, in *CreatePlatConfigReq, opts ...client.CallOption) (*CreatePlatConfigRes, error)
	DeletePlatConfig(ctx context.Context, in *DeletePlatConfigReq, opts ...client.CallOption) (*DeletePlatConfigRes, error)
	EditPlatConfig(ctx context.Context, in *EditPlatConfigReq, opts ...client.CallOption) (*EditPlatConfigRes, error)
	LoadPlatConfig(ctx context.Context, in *LoadPlatConfigReq, opts ...client.CallOption) (*LoadPlatConfigRes, error)
	OperateExchangeTpl(ctx context.Context, in *OperateExchangeTplReq, opts ...client.CallOption) (*OperateExchangeTplRes, error)
	LoadExchangeTpl(ctx context.Context, in *LoadExchangeTplReq, opts ...client.CallOption) (*LoadExchangeTplRes, error)
	OperateSignTpl(ctx context.Context, in *OperateSignTplReq, opts ...client.CallOption) (*OperateSignTplRes, error)
	LoadSignTpl(ctx context.Context, in *LoadSignTplReq, opts ...client.CallOption) (*LoadSignTplRes, error)
	ReadTaskConfig(ctx context.Context, in *ReadTaskConfigReq, opts ...client.CallOption) (*ReadTaskConfigRes, error)
	LoadTaskConfig(ctx context.Context, in *LoadTaskConfigReq, opts ...client.CallOption) (*LoadTaskConfigRes, error)
	ReadLevelUpConfig(ctx context.Context, in *ReadLevelUpConfigReq, opts ...client.CallOption) (*ReadLevelUpConfigRes, error)
	LoadLevelUpConfig(ctx context.Context, in *LoadLevelUpConfigReq, opts ...client.CallOption) (*LoadLevelUpConfigRes, error)
	CreateHomeConfig(ctx context.Context, in *CreateHomeConfigReq, opts ...client.CallOption) (*CreateHomeConfigRes, error)
	DeleteHomeConfig(ctx context.Context, in *DeleteHomeConfigReq, opts ...client.CallOption) (*DeleteHomeConfigRes, error)
	EditHomeConfig(ctx context.Context, in *EditHomeConfigReq, opts ...client.CallOption) (*EditHomeConfigRes, error)
	LoadHomeConfig(ctx context.Context, in *LoadHomeConfigReq, opts ...client.CallOption) (*LoadHomeConfigRes, error)
	CreateActivityConfig(ctx context.Context, in *CreateActivityConfigReq, opts ...client.CallOption) (*CreateActivityConfigRes, error)
	DeleteActivityConfig(ctx context.Context, in *DeleteActivityConfigReq, opts ...client.CallOption) (*DeleteActivityConfigRes, error)
	EditActivityConfig(ctx context.Context, in *EditActivityConfigReq, opts ...client.CallOption) (*EditActivityConfigRes, error)
	LoadActivityConfig(ctx context.Context, in *LoadActivityConfigReq, opts ...client.CallOption) (*LoadActivityConfigRes, error)
	CreateAdConfig(ctx context.Context, in *CreateAdConfigReq, opts ...client.CallOption) (*CreateAdConfigRes, error)
	DeleteAdConfig(ctx context.Context, in *DeleteAdConfigReq, opts ...client.CallOption) (*DeleteAdConfigRes, error)
	EditAdConfig(ctx context.Context, in *EditAdConfigReq, opts ...client.CallOption) (*EditAdConfigRes, error)
	LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, opts ...client.CallOption) (*LoadAdConfigRes, error)
	CreateNoticeConfig(ctx context.Context, in *CreateNoticeConfigReq, opts ...client.CallOption) (*CreateNoticeConfigRes, error)
	DeleteNoticeConfig(ctx context.Context, in *DeleteNoticeConfigReq, opts ...client.CallOption) (*DeleteNoticeConfigRes, error)
	EditNoticeConfig(ctx context.Context, in *EditNoticeConfigReq, opts ...client.CallOption) (*EditNoticeConfigRes, error)
	LoadNoticeConfig(ctx context.Context, in *LoadNoticeConfigReq, opts ...client.CallOption) (*LoadNoticeConfigRes, error)
	LoadMessages(ctx context.Context, in *LoadMessagesInfoReq, opts ...client.CallOption) (*LoadMessagesInfoRes, error)
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...client.CallOption) (*SendMessageRes, error)
	LoadReports(ctx context.Context, in *LoadReportsReq, opts ...client.CallOption) (*LoadReportsRes, error)
	ReplyProblem(ctx context.Context, in *ReplyProblemReq, opts ...client.CallOption) (*ReplyProblemRes, error)
	OperateAppConfig(ctx context.Context, in *OperateAppConfigReq, opts ...client.CallOption) (*OperateAppConfigRes, error)
	LoadAppConfig(ctx context.Context, in *LoadAppConfigReq, opts ...client.CallOption) (*LoadAppConfigRes, error)
	LoadErrorDefinition(ctx context.Context, in *LoadErrorDefinitionReq, opts ...client.CallOption) (*LoadErrorDefinitionRes, error)
	LoadErrorDesc(ctx context.Context, in *LoadErrorDescReq, opts ...client.CallOption) (*LoadErrorDescRes, error)
	CreateErrorDesc(ctx context.Context, in *CreateErrorDescReq, opts ...client.CallOption) (*CreateErrorDescRes, error)
	EditErrorDesc(ctx context.Context, in *EditErrorDescReq, opts ...client.CallOption) (*EditErrorDescRes, error)
	PurgeCndCache(ctx context.Context, in *PurgeCndCacheReq, opts ...client.CallOption) (*PurgeCndCacheRes, error)
	LoadPurgeHistory(ctx context.Context, in *LoadPurgeHistoryReq, opts ...client.CallOption) (*LoadPurgeHistoryRes, error)
	OperateItemConfig(ctx context.Context, in *OperateItemConfigReq, opts ...client.CallOption) (*OperateItemConfigRes, error)
	LoadItemConfig(ctx context.Context, in *LoadItemConfigReq, opts ...client.CallOption) (*LoadItemConfigRes, error)
	OperateExCodeConfig(ctx context.Context, in *OperateExCodeConfigReq, opts ...client.CallOption) (*OperateExCodeConfigRes, error)
	LoadExCodeConfig(ctx context.Context, in *LoadExCodeConfigReq, opts ...client.CallOption) (*LoadExCodeConfigRes, error)
	LoadExCode(ctx context.Context, in *LoadExCodeReq, opts ...client.CallOption) (*LoadExCodeRes, error)
	LoadExCodeLog(ctx context.Context, in *LoadExCodeLogReq, opts ...client.CallOption) (*LoadExCodeLogRes, error)
	OperateMailConfig(ctx context.Context, in *OperateMailConfigReq, opts ...client.CallOption) (*OperateMailConfigRes, error)
	LoadMailConfig(ctx context.Context, in *LoadMailConfigReq, opts ...client.CallOption) (*LoadMailConfigRes, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) LoadGameInfo(ctx context.Context, in *LoadGameInfoReq, opts ...client.CallOption) (*LoadGameInfoRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadGameInfo", in)
	out := new(LoadGameInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadOnlineParam(ctx context.Context, in *LoadOnlineParamReq, opts ...client.CallOption) (*LoadOnlineParamRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadOnlineParam", in)
	out := new(LoadOnlineParamRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CheckUpdate(ctx context.Context, in *CheckUpdateReq, opts ...client.CallOption) (*CheckUpdateRes, error) {
	req := c.c.NewRequest(c.name, "Config.CheckUpdate", in)
	out := new(CheckUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadNotice(ctx context.Context, in *LoadNoticeReq, opts ...client.CallOption) (*LoadNoticeRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadNotice", in)
	out := new(LoadNoticeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) RefreshCache(ctx context.Context, in *RefreshCacheReq, opts ...client.CallOption) (*RefreshCacheRes, error) {
	req := c.c.NewRequest(c.name, "Config.RefreshCache", in)
	out := new(RefreshCacheRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadPlat(ctx context.Context, in *LoadPlatReq, opts ...client.CallOption) (*LoadPlatRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadPlat", in)
	out := new(LoadPlatRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadApp(ctx context.Context, in *LoadAppReq, opts ...client.CallOption) (*LoadAppRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadApp", in)
	out := new(LoadAppRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateGameParam(ctx context.Context, in *OperateGameParamReq, opts ...client.CallOption) (*OperateGameParamRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateGameParam", in)
	out := new(OperateGameParamRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadGameParam(ctx context.Context, in *LoadGameParamReq, opts ...client.CallOption) (*LoadGameParamRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadGameParam", in)
	out := new(LoadGameParamRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateGameVersion(ctx context.Context, in *OperateGameVersionReq, opts ...client.CallOption) (*OperateGameVersionRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateGameVersion", in)
	out := new(OperateGameVersionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadGameVersion(ctx context.Context, in *LoadGameVersionReq, opts ...client.CallOption) (*LoadGameVersionRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadGameVersion", in)
	out := new(LoadGameVersionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadGameVersionLog(ctx context.Context, in *LoadGameVersionLogReq, opts ...client.CallOption) (*LoadGameVersionLogRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadGameVersionLog", in)
	out := new(LoadGameVersionLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreatePlatConfig(ctx context.Context, in *CreatePlatConfigReq, opts ...client.CallOption) (*CreatePlatConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.CreatePlatConfig", in)
	out := new(CreatePlatConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeletePlatConfig(ctx context.Context, in *DeletePlatConfigReq, opts ...client.CallOption) (*DeletePlatConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.DeletePlatConfig", in)
	out := new(DeletePlatConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) EditPlatConfig(ctx context.Context, in *EditPlatConfigReq, opts ...client.CallOption) (*EditPlatConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.EditPlatConfig", in)
	out := new(EditPlatConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadPlatConfig(ctx context.Context, in *LoadPlatConfigReq, opts ...client.CallOption) (*LoadPlatConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadPlatConfig", in)
	out := new(LoadPlatConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateExchangeTpl(ctx context.Context, in *OperateExchangeTplReq, opts ...client.CallOption) (*OperateExchangeTplRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateExchangeTpl", in)
	out := new(OperateExchangeTplRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadExchangeTpl(ctx context.Context, in *LoadExchangeTplReq, opts ...client.CallOption) (*LoadExchangeTplRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadExchangeTpl", in)
	out := new(LoadExchangeTplRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateSignTpl(ctx context.Context, in *OperateSignTplReq, opts ...client.CallOption) (*OperateSignTplRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateSignTpl", in)
	out := new(OperateSignTplRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadSignTpl(ctx context.Context, in *LoadSignTplReq, opts ...client.CallOption) (*LoadSignTplRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadSignTpl", in)
	out := new(LoadSignTplRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ReadTaskConfig(ctx context.Context, in *ReadTaskConfigReq, opts ...client.CallOption) (*ReadTaskConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.ReadTaskConfig", in)
	out := new(ReadTaskConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadTaskConfig(ctx context.Context, in *LoadTaskConfigReq, opts ...client.CallOption) (*LoadTaskConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadTaskConfig", in)
	out := new(LoadTaskConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ReadLevelUpConfig(ctx context.Context, in *ReadLevelUpConfigReq, opts ...client.CallOption) (*ReadLevelUpConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.ReadLevelUpConfig", in)
	out := new(ReadLevelUpConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadLevelUpConfig(ctx context.Context, in *LoadLevelUpConfigReq, opts ...client.CallOption) (*LoadLevelUpConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadLevelUpConfig", in)
	out := new(LoadLevelUpConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateHomeConfig(ctx context.Context, in *CreateHomeConfigReq, opts ...client.CallOption) (*CreateHomeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.CreateHomeConfig", in)
	out := new(CreateHomeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteHomeConfig(ctx context.Context, in *DeleteHomeConfigReq, opts ...client.CallOption) (*DeleteHomeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.DeleteHomeConfig", in)
	out := new(DeleteHomeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) EditHomeConfig(ctx context.Context, in *EditHomeConfigReq, opts ...client.CallOption) (*EditHomeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.EditHomeConfig", in)
	out := new(EditHomeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadHomeConfig(ctx context.Context, in *LoadHomeConfigReq, opts ...client.CallOption) (*LoadHomeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadHomeConfig", in)
	out := new(LoadHomeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateActivityConfig(ctx context.Context, in *CreateActivityConfigReq, opts ...client.CallOption) (*CreateActivityConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.CreateActivityConfig", in)
	out := new(CreateActivityConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteActivityConfig(ctx context.Context, in *DeleteActivityConfigReq, opts ...client.CallOption) (*DeleteActivityConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.DeleteActivityConfig", in)
	out := new(DeleteActivityConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) EditActivityConfig(ctx context.Context, in *EditActivityConfigReq, opts ...client.CallOption) (*EditActivityConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.EditActivityConfig", in)
	out := new(EditActivityConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadActivityConfig(ctx context.Context, in *LoadActivityConfigReq, opts ...client.CallOption) (*LoadActivityConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadActivityConfig", in)
	out := new(LoadActivityConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateAdConfig(ctx context.Context, in *CreateAdConfigReq, opts ...client.CallOption) (*CreateAdConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.CreateAdConfig", in)
	out := new(CreateAdConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteAdConfig(ctx context.Context, in *DeleteAdConfigReq, opts ...client.CallOption) (*DeleteAdConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.DeleteAdConfig", in)
	out := new(DeleteAdConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) EditAdConfig(ctx context.Context, in *EditAdConfigReq, opts ...client.CallOption) (*EditAdConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.EditAdConfig", in)
	out := new(EditAdConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, opts ...client.CallOption) (*LoadAdConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadAdConfig", in)
	out := new(LoadAdConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateNoticeConfig(ctx context.Context, in *CreateNoticeConfigReq, opts ...client.CallOption) (*CreateNoticeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.CreateNoticeConfig", in)
	out := new(CreateNoticeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) DeleteNoticeConfig(ctx context.Context, in *DeleteNoticeConfigReq, opts ...client.CallOption) (*DeleteNoticeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.DeleteNoticeConfig", in)
	out := new(DeleteNoticeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) EditNoticeConfig(ctx context.Context, in *EditNoticeConfigReq, opts ...client.CallOption) (*EditNoticeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.EditNoticeConfig", in)
	out := new(EditNoticeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadNoticeConfig(ctx context.Context, in *LoadNoticeConfigReq, opts ...client.CallOption) (*LoadNoticeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadNoticeConfig", in)
	out := new(LoadNoticeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadMessages(ctx context.Context, in *LoadMessagesInfoReq, opts ...client.CallOption) (*LoadMessagesInfoRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadMessages", in)
	out := new(LoadMessagesInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) SendMessage(ctx context.Context, in *SendMessageReq, opts ...client.CallOption) (*SendMessageRes, error) {
	req := c.c.NewRequest(c.name, "Config.SendMessage", in)
	out := new(SendMessageRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadReports(ctx context.Context, in *LoadReportsReq, opts ...client.CallOption) (*LoadReportsRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadReports", in)
	out := new(LoadReportsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ReplyProblem(ctx context.Context, in *ReplyProblemReq, opts ...client.CallOption) (*ReplyProblemRes, error) {
	req := c.c.NewRequest(c.name, "Config.ReplyProblem", in)
	out := new(ReplyProblemRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateAppConfig(ctx context.Context, in *OperateAppConfigReq, opts ...client.CallOption) (*OperateAppConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateAppConfig", in)
	out := new(OperateAppConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadAppConfig(ctx context.Context, in *LoadAppConfigReq, opts ...client.CallOption) (*LoadAppConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadAppConfig", in)
	out := new(LoadAppConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadErrorDefinition(ctx context.Context, in *LoadErrorDefinitionReq, opts ...client.CallOption) (*LoadErrorDefinitionRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadErrorDefinition", in)
	out := new(LoadErrorDefinitionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadErrorDesc(ctx context.Context, in *LoadErrorDescReq, opts ...client.CallOption) (*LoadErrorDescRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadErrorDesc", in)
	out := new(LoadErrorDescRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) CreateErrorDesc(ctx context.Context, in *CreateErrorDescReq, opts ...client.CallOption) (*CreateErrorDescRes, error) {
	req := c.c.NewRequest(c.name, "Config.CreateErrorDesc", in)
	out := new(CreateErrorDescRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) EditErrorDesc(ctx context.Context, in *EditErrorDescReq, opts ...client.CallOption) (*EditErrorDescRes, error) {
	req := c.c.NewRequest(c.name, "Config.EditErrorDesc", in)
	out := new(EditErrorDescRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) PurgeCndCache(ctx context.Context, in *PurgeCndCacheReq, opts ...client.CallOption) (*PurgeCndCacheRes, error) {
	req := c.c.NewRequest(c.name, "Config.PurgeCndCache", in)
	out := new(PurgeCndCacheRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadPurgeHistory(ctx context.Context, in *LoadPurgeHistoryReq, opts ...client.CallOption) (*LoadPurgeHistoryRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadPurgeHistory", in)
	out := new(LoadPurgeHistoryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateItemConfig(ctx context.Context, in *OperateItemConfigReq, opts ...client.CallOption) (*OperateItemConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateItemConfig", in)
	out := new(OperateItemConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadItemConfig(ctx context.Context, in *LoadItemConfigReq, opts ...client.CallOption) (*LoadItemConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadItemConfig", in)
	out := new(LoadItemConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateExCodeConfig(ctx context.Context, in *OperateExCodeConfigReq, opts ...client.CallOption) (*OperateExCodeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateExCodeConfig", in)
	out := new(OperateExCodeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadExCodeConfig(ctx context.Context, in *LoadExCodeConfigReq, opts ...client.CallOption) (*LoadExCodeConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadExCodeConfig", in)
	out := new(LoadExCodeConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadExCode(ctx context.Context, in *LoadExCodeReq, opts ...client.CallOption) (*LoadExCodeRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadExCode", in)
	out := new(LoadExCodeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadExCodeLog(ctx context.Context, in *LoadExCodeLogReq, opts ...client.CallOption) (*LoadExCodeLogRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadExCodeLog", in)
	out := new(LoadExCodeLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) OperateMailConfig(ctx context.Context, in *OperateMailConfigReq, opts ...client.CallOption) (*OperateMailConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.OperateMailConfig", in)
	out := new(OperateMailConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) LoadMailConfig(ctx context.Context, in *LoadMailConfigReq, opts ...client.CallOption) (*LoadMailConfigRes, error) {
	req := c.c.NewRequest(c.name, "Config.LoadMailConfig", in)
	out := new(LoadMailConfigRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigHandler interface {
	LoadGameInfo(context.Context, *LoadGameInfoReq, *LoadGameInfoRes) error
	LoadOnlineParam(context.Context, *LoadOnlineParamReq, *LoadOnlineParamRes) error
	CheckUpdate(context.Context, *CheckUpdateReq, *CheckUpdateRes) error
	LoadNotice(context.Context, *LoadNoticeReq, *LoadNoticeRes) error
	RefreshCache(context.Context, *RefreshCacheReq, *RefreshCacheRes) error
	LoadPlat(context.Context, *LoadPlatReq, *LoadPlatRes) error
	LoadApp(context.Context, *LoadAppReq, *LoadAppRes) error
	OperateGameParam(context.Context, *OperateGameParamReq, *OperateGameParamRes) error
	LoadGameParam(context.Context, *LoadGameParamReq, *LoadGameParamRes) error
	OperateGameVersion(context.Context, *OperateGameVersionReq, *OperateGameVersionRes) error
	LoadGameVersion(context.Context, *LoadGameVersionReq, *LoadGameVersionRes) error
	LoadGameVersionLog(context.Context, *LoadGameVersionLogReq, *LoadGameVersionLogRes) error
	CreatePlatConfig(context.Context, *CreatePlatConfigReq, *CreatePlatConfigRes) error
	DeletePlatConfig(context.Context, *DeletePlatConfigReq, *DeletePlatConfigRes) error
	EditPlatConfig(context.Context, *EditPlatConfigReq, *EditPlatConfigRes) error
	LoadPlatConfig(context.Context, *LoadPlatConfigReq, *LoadPlatConfigRes) error
	OperateExchangeTpl(context.Context, *OperateExchangeTplReq, *OperateExchangeTplRes) error
	LoadExchangeTpl(context.Context, *LoadExchangeTplReq, *LoadExchangeTplRes) error
	OperateSignTpl(context.Context, *OperateSignTplReq, *OperateSignTplRes) error
	LoadSignTpl(context.Context, *LoadSignTplReq, *LoadSignTplRes) error
	ReadTaskConfig(context.Context, *ReadTaskConfigReq, *ReadTaskConfigRes) error
	LoadTaskConfig(context.Context, *LoadTaskConfigReq, *LoadTaskConfigRes) error
	ReadLevelUpConfig(context.Context, *ReadLevelUpConfigReq, *ReadLevelUpConfigRes) error
	LoadLevelUpConfig(context.Context, *LoadLevelUpConfigReq, *LoadLevelUpConfigRes) error
	CreateHomeConfig(context.Context, *CreateHomeConfigReq, *CreateHomeConfigRes) error
	DeleteHomeConfig(context.Context, *DeleteHomeConfigReq, *DeleteHomeConfigRes) error
	EditHomeConfig(context.Context, *EditHomeConfigReq, *EditHomeConfigRes) error
	LoadHomeConfig(context.Context, *LoadHomeConfigReq, *LoadHomeConfigRes) error
	CreateActivityConfig(context.Context, *CreateActivityConfigReq, *CreateActivityConfigRes) error
	DeleteActivityConfig(context.Context, *DeleteActivityConfigReq, *DeleteActivityConfigRes) error
	EditActivityConfig(context.Context, *EditActivityConfigReq, *EditActivityConfigRes) error
	LoadActivityConfig(context.Context, *LoadActivityConfigReq, *LoadActivityConfigRes) error
	CreateAdConfig(context.Context, *CreateAdConfigReq, *CreateAdConfigRes) error
	DeleteAdConfig(context.Context, *DeleteAdConfigReq, *DeleteAdConfigRes) error
	EditAdConfig(context.Context, *EditAdConfigReq, *EditAdConfigRes) error
	LoadAdConfig(context.Context, *LoadAdConfigReq, *LoadAdConfigRes) error
	CreateNoticeConfig(context.Context, *CreateNoticeConfigReq, *CreateNoticeConfigRes) error
	DeleteNoticeConfig(context.Context, *DeleteNoticeConfigReq, *DeleteNoticeConfigRes) error
	EditNoticeConfig(context.Context, *EditNoticeConfigReq, *EditNoticeConfigRes) error
	LoadNoticeConfig(context.Context, *LoadNoticeConfigReq, *LoadNoticeConfigRes) error
	LoadMessages(context.Context, *LoadMessagesInfoReq, *LoadMessagesInfoRes) error
	SendMessage(context.Context, *SendMessageReq, *SendMessageRes) error
	LoadReports(context.Context, *LoadReportsReq, *LoadReportsRes) error
	ReplyProblem(context.Context, *ReplyProblemReq, *ReplyProblemRes) error
	OperateAppConfig(context.Context, *OperateAppConfigReq, *OperateAppConfigRes) error
	LoadAppConfig(context.Context, *LoadAppConfigReq, *LoadAppConfigRes) error
	LoadErrorDefinition(context.Context, *LoadErrorDefinitionReq, *LoadErrorDefinitionRes) error
	LoadErrorDesc(context.Context, *LoadErrorDescReq, *LoadErrorDescRes) error
	CreateErrorDesc(context.Context, *CreateErrorDescReq, *CreateErrorDescRes) error
	EditErrorDesc(context.Context, *EditErrorDescReq, *EditErrorDescRes) error
	PurgeCndCache(context.Context, *PurgeCndCacheReq, *PurgeCndCacheRes) error
	LoadPurgeHistory(context.Context, *LoadPurgeHistoryReq, *LoadPurgeHistoryRes) error
	OperateItemConfig(context.Context, *OperateItemConfigReq, *OperateItemConfigRes) error
	LoadItemConfig(context.Context, *LoadItemConfigReq, *LoadItemConfigRes) error
	OperateExCodeConfig(context.Context, *OperateExCodeConfigReq, *OperateExCodeConfigRes) error
	LoadExCodeConfig(context.Context, *LoadExCodeConfigReq, *LoadExCodeConfigRes) error
	LoadExCode(context.Context, *LoadExCodeReq, *LoadExCodeRes) error
	LoadExCodeLog(context.Context, *LoadExCodeLogReq, *LoadExCodeLogRes) error
	OperateMailConfig(context.Context, *OperateMailConfigReq, *OperateMailConfigRes) error
	LoadMailConfig(context.Context, *LoadMailConfigReq, *LoadMailConfigRes) error
}

func RegisterConfigHandler(s server.Server, hdlr ConfigHandler, opts ...server.HandlerOption) error {
	type config interface {
		LoadGameInfo(ctx context.Context, in *LoadGameInfoReq, out *LoadGameInfoRes) error
		LoadOnlineParam(ctx context.Context, in *LoadOnlineParamReq, out *LoadOnlineParamRes) error
		CheckUpdate(ctx context.Context, in *CheckUpdateReq, out *CheckUpdateRes) error
		LoadNotice(ctx context.Context, in *LoadNoticeReq, out *LoadNoticeRes) error
		RefreshCache(ctx context.Context, in *RefreshCacheReq, out *RefreshCacheRes) error
		LoadPlat(ctx context.Context, in *LoadPlatReq, out *LoadPlatRes) error
		LoadApp(ctx context.Context, in *LoadAppReq, out *LoadAppRes) error
		OperateGameParam(ctx context.Context, in *OperateGameParamReq, out *OperateGameParamRes) error
		LoadGameParam(ctx context.Context, in *LoadGameParamReq, out *LoadGameParamRes) error
		OperateGameVersion(ctx context.Context, in *OperateGameVersionReq, out *OperateGameVersionRes) error
		LoadGameVersion(ctx context.Context, in *LoadGameVersionReq, out *LoadGameVersionRes) error
		LoadGameVersionLog(ctx context.Context, in *LoadGameVersionLogReq, out *LoadGameVersionLogRes) error
		CreatePlatConfig(ctx context.Context, in *CreatePlatConfigReq, out *CreatePlatConfigRes) error
		DeletePlatConfig(ctx context.Context, in *DeletePlatConfigReq, out *DeletePlatConfigRes) error
		EditPlatConfig(ctx context.Context, in *EditPlatConfigReq, out *EditPlatConfigRes) error
		LoadPlatConfig(ctx context.Context, in *LoadPlatConfigReq, out *LoadPlatConfigRes) error
		OperateExchangeTpl(ctx context.Context, in *OperateExchangeTplReq, out *OperateExchangeTplRes) error
		LoadExchangeTpl(ctx context.Context, in *LoadExchangeTplReq, out *LoadExchangeTplRes) error
		OperateSignTpl(ctx context.Context, in *OperateSignTplReq, out *OperateSignTplRes) error
		LoadSignTpl(ctx context.Context, in *LoadSignTplReq, out *LoadSignTplRes) error
		ReadTaskConfig(ctx context.Context, in *ReadTaskConfigReq, out *ReadTaskConfigRes) error
		LoadTaskConfig(ctx context.Context, in *LoadTaskConfigReq, out *LoadTaskConfigRes) error
		ReadLevelUpConfig(ctx context.Context, in *ReadLevelUpConfigReq, out *ReadLevelUpConfigRes) error
		LoadLevelUpConfig(ctx context.Context, in *LoadLevelUpConfigReq, out *LoadLevelUpConfigRes) error
		CreateHomeConfig(ctx context.Context, in *CreateHomeConfigReq, out *CreateHomeConfigRes) error
		DeleteHomeConfig(ctx context.Context, in *DeleteHomeConfigReq, out *DeleteHomeConfigRes) error
		EditHomeConfig(ctx context.Context, in *EditHomeConfigReq, out *EditHomeConfigRes) error
		LoadHomeConfig(ctx context.Context, in *LoadHomeConfigReq, out *LoadHomeConfigRes) error
		CreateActivityConfig(ctx context.Context, in *CreateActivityConfigReq, out *CreateActivityConfigRes) error
		DeleteActivityConfig(ctx context.Context, in *DeleteActivityConfigReq, out *DeleteActivityConfigRes) error
		EditActivityConfig(ctx context.Context, in *EditActivityConfigReq, out *EditActivityConfigRes) error
		LoadActivityConfig(ctx context.Context, in *LoadActivityConfigReq, out *LoadActivityConfigRes) error
		CreateAdConfig(ctx context.Context, in *CreateAdConfigReq, out *CreateAdConfigRes) error
		DeleteAdConfig(ctx context.Context, in *DeleteAdConfigReq, out *DeleteAdConfigRes) error
		EditAdConfig(ctx context.Context, in *EditAdConfigReq, out *EditAdConfigRes) error
		LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, out *LoadAdConfigRes) error
		CreateNoticeConfig(ctx context.Context, in *CreateNoticeConfigReq, out *CreateNoticeConfigRes) error
		DeleteNoticeConfig(ctx context.Context, in *DeleteNoticeConfigReq, out *DeleteNoticeConfigRes) error
		EditNoticeConfig(ctx context.Context, in *EditNoticeConfigReq, out *EditNoticeConfigRes) error
		LoadNoticeConfig(ctx context.Context, in *LoadNoticeConfigReq, out *LoadNoticeConfigRes) error
		LoadMessages(ctx context.Context, in *LoadMessagesInfoReq, out *LoadMessagesInfoRes) error
		SendMessage(ctx context.Context, in *SendMessageReq, out *SendMessageRes) error
		LoadReports(ctx context.Context, in *LoadReportsReq, out *LoadReportsRes) error
		ReplyProblem(ctx context.Context, in *ReplyProblemReq, out *ReplyProblemRes) error
		OperateAppConfig(ctx context.Context, in *OperateAppConfigReq, out *OperateAppConfigRes) error
		LoadAppConfig(ctx context.Context, in *LoadAppConfigReq, out *LoadAppConfigRes) error
		LoadErrorDefinition(ctx context.Context, in *LoadErrorDefinitionReq, out *LoadErrorDefinitionRes) error
		LoadErrorDesc(ctx context.Context, in *LoadErrorDescReq, out *LoadErrorDescRes) error
		CreateErrorDesc(ctx context.Context, in *CreateErrorDescReq, out *CreateErrorDescRes) error
		EditErrorDesc(ctx context.Context, in *EditErrorDescReq, out *EditErrorDescRes) error
		PurgeCndCache(ctx context.Context, in *PurgeCndCacheReq, out *PurgeCndCacheRes) error
		LoadPurgeHistory(ctx context.Context, in *LoadPurgeHistoryReq, out *LoadPurgeHistoryRes) error
		OperateItemConfig(ctx context.Context, in *OperateItemConfigReq, out *OperateItemConfigRes) error
		LoadItemConfig(ctx context.Context, in *LoadItemConfigReq, out *LoadItemConfigRes) error
		OperateExCodeConfig(ctx context.Context, in *OperateExCodeConfigReq, out *OperateExCodeConfigRes) error
		LoadExCodeConfig(ctx context.Context, in *LoadExCodeConfigReq, out *LoadExCodeConfigRes) error
		LoadExCode(ctx context.Context, in *LoadExCodeReq, out *LoadExCodeRes) error
		LoadExCodeLog(ctx context.Context, in *LoadExCodeLogReq, out *LoadExCodeLogRes) error
		OperateMailConfig(ctx context.Context, in *OperateMailConfigReq, out *OperateMailConfigRes) error
		LoadMailConfig(ctx context.Context, in *LoadMailConfigReq, out *LoadMailConfigRes) error
	}
	type Config struct {
		config
	}
	h := &configHandler{hdlr}
	return s.Handle(s.NewHandler(&Config{h}, opts...))
}

type configHandler struct {
	ConfigHandler
}

func (h *configHandler) LoadGameInfo(ctx context.Context, in *LoadGameInfoReq, out *LoadGameInfoRes) error {
	return h.ConfigHandler.LoadGameInfo(ctx, in, out)
}

func (h *configHandler) LoadOnlineParam(ctx context.Context, in *LoadOnlineParamReq, out *LoadOnlineParamRes) error {
	return h.ConfigHandler.LoadOnlineParam(ctx, in, out)
}

func (h *configHandler) CheckUpdate(ctx context.Context, in *CheckUpdateReq, out *CheckUpdateRes) error {
	return h.ConfigHandler.CheckUpdate(ctx, in, out)
}

func (h *configHandler) LoadNotice(ctx context.Context, in *LoadNoticeReq, out *LoadNoticeRes) error {
	return h.ConfigHandler.LoadNotice(ctx, in, out)
}

func (h *configHandler) RefreshCache(ctx context.Context, in *RefreshCacheReq, out *RefreshCacheRes) error {
	return h.ConfigHandler.RefreshCache(ctx, in, out)
}

func (h *configHandler) LoadPlat(ctx context.Context, in *LoadPlatReq, out *LoadPlatRes) error {
	return h.ConfigHandler.LoadPlat(ctx, in, out)
}

func (h *configHandler) LoadApp(ctx context.Context, in *LoadAppReq, out *LoadAppRes) error {
	return h.ConfigHandler.LoadApp(ctx, in, out)
}

func (h *configHandler) OperateGameParam(ctx context.Context, in *OperateGameParamReq, out *OperateGameParamRes) error {
	return h.ConfigHandler.OperateGameParam(ctx, in, out)
}

func (h *configHandler) LoadGameParam(ctx context.Context, in *LoadGameParamReq, out *LoadGameParamRes) error {
	return h.ConfigHandler.LoadGameParam(ctx, in, out)
}

func (h *configHandler) OperateGameVersion(ctx context.Context, in *OperateGameVersionReq, out *OperateGameVersionRes) error {
	return h.ConfigHandler.OperateGameVersion(ctx, in, out)
}

func (h *configHandler) LoadGameVersion(ctx context.Context, in *LoadGameVersionReq, out *LoadGameVersionRes) error {
	return h.ConfigHandler.LoadGameVersion(ctx, in, out)
}

func (h *configHandler) LoadGameVersionLog(ctx context.Context, in *LoadGameVersionLogReq, out *LoadGameVersionLogRes) error {
	return h.ConfigHandler.LoadGameVersionLog(ctx, in, out)
}

func (h *configHandler) CreatePlatConfig(ctx context.Context, in *CreatePlatConfigReq, out *CreatePlatConfigRes) error {
	return h.ConfigHandler.CreatePlatConfig(ctx, in, out)
}

func (h *configHandler) DeletePlatConfig(ctx context.Context, in *DeletePlatConfigReq, out *DeletePlatConfigRes) error {
	return h.ConfigHandler.DeletePlatConfig(ctx, in, out)
}

func (h *configHandler) EditPlatConfig(ctx context.Context, in *EditPlatConfigReq, out *EditPlatConfigRes) error {
	return h.ConfigHandler.EditPlatConfig(ctx, in, out)
}

func (h *configHandler) LoadPlatConfig(ctx context.Context, in *LoadPlatConfigReq, out *LoadPlatConfigRes) error {
	return h.ConfigHandler.LoadPlatConfig(ctx, in, out)
}

func (h *configHandler) OperateExchangeTpl(ctx context.Context, in *OperateExchangeTplReq, out *OperateExchangeTplRes) error {
	return h.ConfigHandler.OperateExchangeTpl(ctx, in, out)
}

func (h *configHandler) LoadExchangeTpl(ctx context.Context, in *LoadExchangeTplReq, out *LoadExchangeTplRes) error {
	return h.ConfigHandler.LoadExchangeTpl(ctx, in, out)
}

func (h *configHandler) OperateSignTpl(ctx context.Context, in *OperateSignTplReq, out *OperateSignTplRes) error {
	return h.ConfigHandler.OperateSignTpl(ctx, in, out)
}

func (h *configHandler) LoadSignTpl(ctx context.Context, in *LoadSignTplReq, out *LoadSignTplRes) error {
	return h.ConfigHandler.LoadSignTpl(ctx, in, out)
}

func (h *configHandler) ReadTaskConfig(ctx context.Context, in *ReadTaskConfigReq, out *ReadTaskConfigRes) error {
	return h.ConfigHandler.ReadTaskConfig(ctx, in, out)
}

func (h *configHandler) LoadTaskConfig(ctx context.Context, in *LoadTaskConfigReq, out *LoadTaskConfigRes) error {
	return h.ConfigHandler.LoadTaskConfig(ctx, in, out)
}

func (h *configHandler) ReadLevelUpConfig(ctx context.Context, in *ReadLevelUpConfigReq, out *ReadLevelUpConfigRes) error {
	return h.ConfigHandler.ReadLevelUpConfig(ctx, in, out)
}

func (h *configHandler) LoadLevelUpConfig(ctx context.Context, in *LoadLevelUpConfigReq, out *LoadLevelUpConfigRes) error {
	return h.ConfigHandler.LoadLevelUpConfig(ctx, in, out)
}

func (h *configHandler) CreateHomeConfig(ctx context.Context, in *CreateHomeConfigReq, out *CreateHomeConfigRes) error {
	return h.ConfigHandler.CreateHomeConfig(ctx, in, out)
}

func (h *configHandler) DeleteHomeConfig(ctx context.Context, in *DeleteHomeConfigReq, out *DeleteHomeConfigRes) error {
	return h.ConfigHandler.DeleteHomeConfig(ctx, in, out)
}

func (h *configHandler) EditHomeConfig(ctx context.Context, in *EditHomeConfigReq, out *EditHomeConfigRes) error {
	return h.ConfigHandler.EditHomeConfig(ctx, in, out)
}

func (h *configHandler) LoadHomeConfig(ctx context.Context, in *LoadHomeConfigReq, out *LoadHomeConfigRes) error {
	return h.ConfigHandler.LoadHomeConfig(ctx, in, out)
}

func (h *configHandler) CreateActivityConfig(ctx context.Context, in *CreateActivityConfigReq, out *CreateActivityConfigRes) error {
	return h.ConfigHandler.CreateActivityConfig(ctx, in, out)
}

func (h *configHandler) DeleteActivityConfig(ctx context.Context, in *DeleteActivityConfigReq, out *DeleteActivityConfigRes) error {
	return h.ConfigHandler.DeleteActivityConfig(ctx, in, out)
}

func (h *configHandler) EditActivityConfig(ctx context.Context, in *EditActivityConfigReq, out *EditActivityConfigRes) error {
	return h.ConfigHandler.EditActivityConfig(ctx, in, out)
}

func (h *configHandler) LoadActivityConfig(ctx context.Context, in *LoadActivityConfigReq, out *LoadActivityConfigRes) error {
	return h.ConfigHandler.LoadActivityConfig(ctx, in, out)
}

func (h *configHandler) CreateAdConfig(ctx context.Context, in *CreateAdConfigReq, out *CreateAdConfigRes) error {
	return h.ConfigHandler.CreateAdConfig(ctx, in, out)
}

func (h *configHandler) DeleteAdConfig(ctx context.Context, in *DeleteAdConfigReq, out *DeleteAdConfigRes) error {
	return h.ConfigHandler.DeleteAdConfig(ctx, in, out)
}

func (h *configHandler) EditAdConfig(ctx context.Context, in *EditAdConfigReq, out *EditAdConfigRes) error {
	return h.ConfigHandler.EditAdConfig(ctx, in, out)
}

func (h *configHandler) LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, out *LoadAdConfigRes) error {
	return h.ConfigHandler.LoadAdConfig(ctx, in, out)
}

func (h *configHandler) CreateNoticeConfig(ctx context.Context, in *CreateNoticeConfigReq, out *CreateNoticeConfigRes) error {
	return h.ConfigHandler.CreateNoticeConfig(ctx, in, out)
}

func (h *configHandler) DeleteNoticeConfig(ctx context.Context, in *DeleteNoticeConfigReq, out *DeleteNoticeConfigRes) error {
	return h.ConfigHandler.DeleteNoticeConfig(ctx, in, out)
}

func (h *configHandler) EditNoticeConfig(ctx context.Context, in *EditNoticeConfigReq, out *EditNoticeConfigRes) error {
	return h.ConfigHandler.EditNoticeConfig(ctx, in, out)
}

func (h *configHandler) LoadNoticeConfig(ctx context.Context, in *LoadNoticeConfigReq, out *LoadNoticeConfigRes) error {
	return h.ConfigHandler.LoadNoticeConfig(ctx, in, out)
}

func (h *configHandler) LoadMessages(ctx context.Context, in *LoadMessagesInfoReq, out *LoadMessagesInfoRes) error {
	return h.ConfigHandler.LoadMessages(ctx, in, out)
}

func (h *configHandler) SendMessage(ctx context.Context, in *SendMessageReq, out *SendMessageRes) error {
	return h.ConfigHandler.SendMessage(ctx, in, out)
}

func (h *configHandler) LoadReports(ctx context.Context, in *LoadReportsReq, out *LoadReportsRes) error {
	return h.ConfigHandler.LoadReports(ctx, in, out)
}

func (h *configHandler) ReplyProblem(ctx context.Context, in *ReplyProblemReq, out *ReplyProblemRes) error {
	return h.ConfigHandler.ReplyProblem(ctx, in, out)
}

func (h *configHandler) OperateAppConfig(ctx context.Context, in *OperateAppConfigReq, out *OperateAppConfigRes) error {
	return h.ConfigHandler.OperateAppConfig(ctx, in, out)
}

func (h *configHandler) LoadAppConfig(ctx context.Context, in *LoadAppConfigReq, out *LoadAppConfigRes) error {
	return h.ConfigHandler.LoadAppConfig(ctx, in, out)
}

func (h *configHandler) LoadErrorDefinition(ctx context.Context, in *LoadErrorDefinitionReq, out *LoadErrorDefinitionRes) error {
	return h.ConfigHandler.LoadErrorDefinition(ctx, in, out)
}

func (h *configHandler) LoadErrorDesc(ctx context.Context, in *LoadErrorDescReq, out *LoadErrorDescRes) error {
	return h.ConfigHandler.LoadErrorDesc(ctx, in, out)
}

func (h *configHandler) CreateErrorDesc(ctx context.Context, in *CreateErrorDescReq, out *CreateErrorDescRes) error {
	return h.ConfigHandler.CreateErrorDesc(ctx, in, out)
}

func (h *configHandler) EditErrorDesc(ctx context.Context, in *EditErrorDescReq, out *EditErrorDescRes) error {
	return h.ConfigHandler.EditErrorDesc(ctx, in, out)
}

func (h *configHandler) PurgeCndCache(ctx context.Context, in *PurgeCndCacheReq, out *PurgeCndCacheRes) error {
	return h.ConfigHandler.PurgeCndCache(ctx, in, out)
}

func (h *configHandler) LoadPurgeHistory(ctx context.Context, in *LoadPurgeHistoryReq, out *LoadPurgeHistoryRes) error {
	return h.ConfigHandler.LoadPurgeHistory(ctx, in, out)
}

func (h *configHandler) OperateItemConfig(ctx context.Context, in *OperateItemConfigReq, out *OperateItemConfigRes) error {
	return h.ConfigHandler.OperateItemConfig(ctx, in, out)
}

func (h *configHandler) LoadItemConfig(ctx context.Context, in *LoadItemConfigReq, out *LoadItemConfigRes) error {
	return h.ConfigHandler.LoadItemConfig(ctx, in, out)
}

func (h *configHandler) OperateExCodeConfig(ctx context.Context, in *OperateExCodeConfigReq, out *OperateExCodeConfigRes) error {
	return h.ConfigHandler.OperateExCodeConfig(ctx, in, out)
}

func (h *configHandler) LoadExCodeConfig(ctx context.Context, in *LoadExCodeConfigReq, out *LoadExCodeConfigRes) error {
	return h.ConfigHandler.LoadExCodeConfig(ctx, in, out)
}

func (h *configHandler) LoadExCode(ctx context.Context, in *LoadExCodeReq, out *LoadExCodeRes) error {
	return h.ConfigHandler.LoadExCode(ctx, in, out)
}

func (h *configHandler) LoadExCodeLog(ctx context.Context, in *LoadExCodeLogReq, out *LoadExCodeLogRes) error {
	return h.ConfigHandler.LoadExCodeLog(ctx, in, out)
}

func (h *configHandler) OperateMailConfig(ctx context.Context, in *OperateMailConfigReq, out *OperateMailConfigRes) error {
	return h.ConfigHandler.OperateMailConfig(ctx, in, out)
}

func (h *configHandler) LoadMailConfig(ctx context.Context, in *LoadMailConfigReq, out *LoadMailConfigRes) error {
	return h.ConfigHandler.LoadMailConfig(ctx, in, out)
}

// Api Endpoints for OptUser service

func NewOptUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OptUser service

type OptUserService interface {
	UserDetail(ctx context.Context, in *UserDetailReq, opts ...client.CallOption) (*UserDetailRes, error)
	OperateUser(ctx context.Context, in *OperateUserReq, opts ...client.CallOption) (*OperateUserRes, error)
	UserItemDataDetail(ctx context.Context, in *UserItemDataDetailReq, opts ...client.CallOption) (*UserItemDataDetailRes, error)
	UpdateUserItemDataDetail(ctx context.Context, in *UpdateUserItemDataDetailReq, opts ...client.CallOption) (*UpdateUserItemDataDetailRes, error)
}

type optUserService struct {
	c    client.Client
	name string
}

func NewOptUserService(name string, c client.Client) OptUserService {
	return &optUserService{
		c:    c,
		name: name,
	}
}

func (c *optUserService) UserDetail(ctx context.Context, in *UserDetailReq, opts ...client.CallOption) (*UserDetailRes, error) {
	req := c.c.NewRequest(c.name, "OptUser.UserDetail", in)
	out := new(UserDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optUserService) OperateUser(ctx context.Context, in *OperateUserReq, opts ...client.CallOption) (*OperateUserRes, error) {
	req := c.c.NewRequest(c.name, "OptUser.OperateUser", in)
	out := new(OperateUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optUserService) UserItemDataDetail(ctx context.Context, in *UserItemDataDetailReq, opts ...client.CallOption) (*UserItemDataDetailRes, error) {
	req := c.c.NewRequest(c.name, "OptUser.UserItemDataDetail", in)
	out := new(UserItemDataDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optUserService) UpdateUserItemDataDetail(ctx context.Context, in *UpdateUserItemDataDetailReq, opts ...client.CallOption) (*UpdateUserItemDataDetailRes, error) {
	req := c.c.NewRequest(c.name, "OptUser.UpdateUserItemDataDetail", in)
	out := new(UpdateUserItemDataDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OptUser service

type OptUserHandler interface {
	UserDetail(context.Context, *UserDetailReq, *UserDetailRes) error
	OperateUser(context.Context, *OperateUserReq, *OperateUserRes) error
	UserItemDataDetail(context.Context, *UserItemDataDetailReq, *UserItemDataDetailRes) error
	UpdateUserItemDataDetail(context.Context, *UpdateUserItemDataDetailReq, *UpdateUserItemDataDetailRes) error
}

func RegisterOptUserHandler(s server.Server, hdlr OptUserHandler, opts ...server.HandlerOption) error {
	type optUser interface {
		UserDetail(ctx context.Context, in *UserDetailReq, out *UserDetailRes) error
		OperateUser(ctx context.Context, in *OperateUserReq, out *OperateUserRes) error
		UserItemDataDetail(ctx context.Context, in *UserItemDataDetailReq, out *UserItemDataDetailRes) error
		UpdateUserItemDataDetail(ctx context.Context, in *UpdateUserItemDataDetailReq, out *UpdateUserItemDataDetailRes) error
	}
	type OptUser struct {
		optUser
	}
	h := &optUserHandler{hdlr}
	return s.Handle(s.NewHandler(&OptUser{h}, opts...))
}

type optUserHandler struct {
	OptUserHandler
}

func (h *optUserHandler) UserDetail(ctx context.Context, in *UserDetailReq, out *UserDetailRes) error {
	return h.OptUserHandler.UserDetail(ctx, in, out)
}

func (h *optUserHandler) OperateUser(ctx context.Context, in *OperateUserReq, out *OperateUserRes) error {
	return h.OptUserHandler.OperateUser(ctx, in, out)
}

func (h *optUserHandler) UserItemDataDetail(ctx context.Context, in *UserItemDataDetailReq, out *UserItemDataDetailRes) error {
	return h.OptUserHandler.UserItemDataDetail(ctx, in, out)
}

func (h *optUserHandler) UpdateUserItemDataDetail(ctx context.Context, in *UpdateUserItemDataDetailReq, out *UpdateUserItemDataDetailRes) error {
	return h.OptUserHandler.UpdateUserItemDataDetail(ctx, in, out)
}

// Api Endpoints for Log service

func NewLogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Log service

type LogService interface {
	LoadPlayLog(ctx context.Context, in *LoadPlayLogReq, opts ...client.CallOption) (*LoadPlayLogRes, error)
	LoadMatchLog(ctx context.Context, in *LoadMatchLogReq, opts ...client.CallOption) (*LoadMatchLogRes, error)
	LoadMatchData(ctx context.Context, in *LoadMatchDataReq, opts ...client.CallOption) (*LoadMatchDataRes, error)
	LoadBlhNoticeLog(ctx context.Context, in *LoadBlhNoticeLogReq, opts ...client.CallOption) (*LoadBlhNoticeLogRes, error)
	LoadOrderLog(ctx context.Context, in *LoadOrderLogReq, opts ...client.CallOption) (*LoadOrderLogRes, error)
	DoOrderInfoLog(ctx context.Context, in *DoOrderInfoLogReq, opts ...client.CallOption) (*DoOrderInfoLogRes, error)
	LoadExchangeLog(ctx context.Context, in *LoadExchangeLogReq, opts ...client.CallOption) (*LoadExchangeLogRes, error)
	OperateExchangeLog(ctx context.Context, in *OperateExchangeLogReq, opts ...client.CallOption) (*OperateExchangeLogRes, error)
	LoadWinningRateRank(ctx context.Context, in *LoadWinningRateRankReq, opts ...client.CallOption) (*LoadWinningRateRankRes, error)
	LoadUserExchange(ctx context.Context, in *LoadUserExchangeReq, opts ...client.CallOption) (*LoadUserExchangeRes, error)
	PlayerLogAnalyse(ctx context.Context, in *PlayerLogAnalyseReq, opts ...client.CallOption) (*PlayerLogAnalyseRes, error)
	MatchRankList(ctx context.Context, in *MatchRankListReq, opts ...client.CallOption) (*MatchRankListRes, error)
	LoadPromoteBind(ctx context.Context, in *LoadPromoteBindReq, opts ...client.CallOption) (*LoadPromoteBindRes, error)
	LoadPromoteUuid(ctx context.Context, in *LoadPromoteUuidReq, opts ...client.CallOption) (*LoadPromoteUuidRes, error)
	LoadPayLog(ctx context.Context, in *LoadPayLogReq, opts ...client.CallOption) (*LoadPayLogRes, error)
	LoadWithdrawalOrder(ctx context.Context, in *LoadWithdrawalOrderReq, opts ...client.CallOption) (*LoadWithdrawalOrderRes, error)
	OperateWithdrawalOrder(ctx context.Context, in *OperateWithdrawalOrderReq, opts ...client.CallOption) (*OperateWithdrawalOrderRes, error)
}

type logService struct {
	c    client.Client
	name string
}

func NewLogService(name string, c client.Client) LogService {
	return &logService{
		c:    c,
		name: name,
	}
}

func (c *logService) LoadPlayLog(ctx context.Context, in *LoadPlayLogReq, opts ...client.CallOption) (*LoadPlayLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadPlayLog", in)
	out := new(LoadPlayLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadMatchLog(ctx context.Context, in *LoadMatchLogReq, opts ...client.CallOption) (*LoadMatchLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadMatchLog", in)
	out := new(LoadMatchLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadMatchData(ctx context.Context, in *LoadMatchDataReq, opts ...client.CallOption) (*LoadMatchDataRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadMatchData", in)
	out := new(LoadMatchDataRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadBlhNoticeLog(ctx context.Context, in *LoadBlhNoticeLogReq, opts ...client.CallOption) (*LoadBlhNoticeLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadBlhNoticeLog", in)
	out := new(LoadBlhNoticeLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadOrderLog(ctx context.Context, in *LoadOrderLogReq, opts ...client.CallOption) (*LoadOrderLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadOrderLog", in)
	out := new(LoadOrderLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) DoOrderInfoLog(ctx context.Context, in *DoOrderInfoLogReq, opts ...client.CallOption) (*DoOrderInfoLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.DoOrderInfoLog", in)
	out := new(DoOrderInfoLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadExchangeLog(ctx context.Context, in *LoadExchangeLogReq, opts ...client.CallOption) (*LoadExchangeLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadExchangeLog", in)
	out := new(LoadExchangeLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) OperateExchangeLog(ctx context.Context, in *OperateExchangeLogReq, opts ...client.CallOption) (*OperateExchangeLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.OperateExchangeLog", in)
	out := new(OperateExchangeLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadWinningRateRank(ctx context.Context, in *LoadWinningRateRankReq, opts ...client.CallOption) (*LoadWinningRateRankRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadWinningRateRank", in)
	out := new(LoadWinningRateRankRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadUserExchange(ctx context.Context, in *LoadUserExchangeReq, opts ...client.CallOption) (*LoadUserExchangeRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadUserExchange", in)
	out := new(LoadUserExchangeRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) PlayerLogAnalyse(ctx context.Context, in *PlayerLogAnalyseReq, opts ...client.CallOption) (*PlayerLogAnalyseRes, error) {
	req := c.c.NewRequest(c.name, "Log.PlayerLogAnalyse", in)
	out := new(PlayerLogAnalyseRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) MatchRankList(ctx context.Context, in *MatchRankListReq, opts ...client.CallOption) (*MatchRankListRes, error) {
	req := c.c.NewRequest(c.name, "Log.MatchRankList", in)
	out := new(MatchRankListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadPromoteBind(ctx context.Context, in *LoadPromoteBindReq, opts ...client.CallOption) (*LoadPromoteBindRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadPromoteBind", in)
	out := new(LoadPromoteBindRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadPromoteUuid(ctx context.Context, in *LoadPromoteUuidReq, opts ...client.CallOption) (*LoadPromoteUuidRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadPromoteUuid", in)
	out := new(LoadPromoteUuidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadPayLog(ctx context.Context, in *LoadPayLogReq, opts ...client.CallOption) (*LoadPayLogRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadPayLog", in)
	out := new(LoadPayLogRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) LoadWithdrawalOrder(ctx context.Context, in *LoadWithdrawalOrderReq, opts ...client.CallOption) (*LoadWithdrawalOrderRes, error) {
	req := c.c.NewRequest(c.name, "Log.LoadWithdrawalOrder", in)
	out := new(LoadWithdrawalOrderRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logService) OperateWithdrawalOrder(ctx context.Context, in *OperateWithdrawalOrderReq, opts ...client.CallOption) (*OperateWithdrawalOrderRes, error) {
	req := c.c.NewRequest(c.name, "Log.OperateWithdrawalOrder", in)
	out := new(OperateWithdrawalOrderRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogHandler interface {
	LoadPlayLog(context.Context, *LoadPlayLogReq, *LoadPlayLogRes) error
	LoadMatchLog(context.Context, *LoadMatchLogReq, *LoadMatchLogRes) error
	LoadMatchData(context.Context, *LoadMatchDataReq, *LoadMatchDataRes) error
	LoadBlhNoticeLog(context.Context, *LoadBlhNoticeLogReq, *LoadBlhNoticeLogRes) error
	LoadOrderLog(context.Context, *LoadOrderLogReq, *LoadOrderLogRes) error
	DoOrderInfoLog(context.Context, *DoOrderInfoLogReq, *DoOrderInfoLogRes) error
	LoadExchangeLog(context.Context, *LoadExchangeLogReq, *LoadExchangeLogRes) error
	OperateExchangeLog(context.Context, *OperateExchangeLogReq, *OperateExchangeLogRes) error
	LoadWinningRateRank(context.Context, *LoadWinningRateRankReq, *LoadWinningRateRankRes) error
	LoadUserExchange(context.Context, *LoadUserExchangeReq, *LoadUserExchangeRes) error
	PlayerLogAnalyse(context.Context, *PlayerLogAnalyseReq, *PlayerLogAnalyseRes) error
	MatchRankList(context.Context, *MatchRankListReq, *MatchRankListRes) error
	LoadPromoteBind(context.Context, *LoadPromoteBindReq, *LoadPromoteBindRes) error
	LoadPromoteUuid(context.Context, *LoadPromoteUuidReq, *LoadPromoteUuidRes) error
	LoadPayLog(context.Context, *LoadPayLogReq, *LoadPayLogRes) error
	LoadWithdrawalOrder(context.Context, *LoadWithdrawalOrderReq, *LoadWithdrawalOrderRes) error
	OperateWithdrawalOrder(context.Context, *OperateWithdrawalOrderReq, *OperateWithdrawalOrderRes) error
}

func RegisterLogHandler(s server.Server, hdlr LogHandler, opts ...server.HandlerOption) error {
	type log interface {
		LoadPlayLog(ctx context.Context, in *LoadPlayLogReq, out *LoadPlayLogRes) error
		LoadMatchLog(ctx context.Context, in *LoadMatchLogReq, out *LoadMatchLogRes) error
		LoadMatchData(ctx context.Context, in *LoadMatchDataReq, out *LoadMatchDataRes) error
		LoadBlhNoticeLog(ctx context.Context, in *LoadBlhNoticeLogReq, out *LoadBlhNoticeLogRes) error
		LoadOrderLog(ctx context.Context, in *LoadOrderLogReq, out *LoadOrderLogRes) error
		DoOrderInfoLog(ctx context.Context, in *DoOrderInfoLogReq, out *DoOrderInfoLogRes) error
		LoadExchangeLog(ctx context.Context, in *LoadExchangeLogReq, out *LoadExchangeLogRes) error
		OperateExchangeLog(ctx context.Context, in *OperateExchangeLogReq, out *OperateExchangeLogRes) error
		LoadWinningRateRank(ctx context.Context, in *LoadWinningRateRankReq, out *LoadWinningRateRankRes) error
		LoadUserExchange(ctx context.Context, in *LoadUserExchangeReq, out *LoadUserExchangeRes) error
		PlayerLogAnalyse(ctx context.Context, in *PlayerLogAnalyseReq, out *PlayerLogAnalyseRes) error
		MatchRankList(ctx context.Context, in *MatchRankListReq, out *MatchRankListRes) error
		LoadPromoteBind(ctx context.Context, in *LoadPromoteBindReq, out *LoadPromoteBindRes) error
		LoadPromoteUuid(ctx context.Context, in *LoadPromoteUuidReq, out *LoadPromoteUuidRes) error
		LoadPayLog(ctx context.Context, in *LoadPayLogReq, out *LoadPayLogRes) error
		LoadWithdrawalOrder(ctx context.Context, in *LoadWithdrawalOrderReq, out *LoadWithdrawalOrderRes) error
		OperateWithdrawalOrder(ctx context.Context, in *OperateWithdrawalOrderReq, out *OperateWithdrawalOrderRes) error
	}
	type Log struct {
		log
	}
	h := &logHandler{hdlr}
	return s.Handle(s.NewHandler(&Log{h}, opts...))
}

type logHandler struct {
	LogHandler
}

func (h *logHandler) LoadPlayLog(ctx context.Context, in *LoadPlayLogReq, out *LoadPlayLogRes) error {
	return h.LogHandler.LoadPlayLog(ctx, in, out)
}

func (h *logHandler) LoadMatchLog(ctx context.Context, in *LoadMatchLogReq, out *LoadMatchLogRes) error {
	return h.LogHandler.LoadMatchLog(ctx, in, out)
}

func (h *logHandler) LoadMatchData(ctx context.Context, in *LoadMatchDataReq, out *LoadMatchDataRes) error {
	return h.LogHandler.LoadMatchData(ctx, in, out)
}

func (h *logHandler) LoadBlhNoticeLog(ctx context.Context, in *LoadBlhNoticeLogReq, out *LoadBlhNoticeLogRes) error {
	return h.LogHandler.LoadBlhNoticeLog(ctx, in, out)
}

func (h *logHandler) LoadOrderLog(ctx context.Context, in *LoadOrderLogReq, out *LoadOrderLogRes) error {
	return h.LogHandler.LoadOrderLog(ctx, in, out)
}

func (h *logHandler) DoOrderInfoLog(ctx context.Context, in *DoOrderInfoLogReq, out *DoOrderInfoLogRes) error {
	return h.LogHandler.DoOrderInfoLog(ctx, in, out)
}

func (h *logHandler) LoadExchangeLog(ctx context.Context, in *LoadExchangeLogReq, out *LoadExchangeLogRes) error {
	return h.LogHandler.LoadExchangeLog(ctx, in, out)
}

func (h *logHandler) OperateExchangeLog(ctx context.Context, in *OperateExchangeLogReq, out *OperateExchangeLogRes) error {
	return h.LogHandler.OperateExchangeLog(ctx, in, out)
}

func (h *logHandler) LoadWinningRateRank(ctx context.Context, in *LoadWinningRateRankReq, out *LoadWinningRateRankRes) error {
	return h.LogHandler.LoadWinningRateRank(ctx, in, out)
}

func (h *logHandler) LoadUserExchange(ctx context.Context, in *LoadUserExchangeReq, out *LoadUserExchangeRes) error {
	return h.LogHandler.LoadUserExchange(ctx, in, out)
}

func (h *logHandler) PlayerLogAnalyse(ctx context.Context, in *PlayerLogAnalyseReq, out *PlayerLogAnalyseRes) error {
	return h.LogHandler.PlayerLogAnalyse(ctx, in, out)
}

func (h *logHandler) MatchRankList(ctx context.Context, in *MatchRankListReq, out *MatchRankListRes) error {
	return h.LogHandler.MatchRankList(ctx, in, out)
}

func (h *logHandler) LoadPromoteBind(ctx context.Context, in *LoadPromoteBindReq, out *LoadPromoteBindRes) error {
	return h.LogHandler.LoadPromoteBind(ctx, in, out)
}

func (h *logHandler) LoadPromoteUuid(ctx context.Context, in *LoadPromoteUuidReq, out *LoadPromoteUuidRes) error {
	return h.LogHandler.LoadPromoteUuid(ctx, in, out)
}

func (h *logHandler) LoadPayLog(ctx context.Context, in *LoadPayLogReq, out *LoadPayLogRes) error {
	return h.LogHandler.LoadPayLog(ctx, in, out)
}

func (h *logHandler) LoadWithdrawalOrder(ctx context.Context, in *LoadWithdrawalOrderReq, out *LoadWithdrawalOrderRes) error {
	return h.LogHandler.LoadWithdrawalOrder(ctx, in, out)
}

func (h *logHandler) OperateWithdrawalOrder(ctx context.Context, in *OperateWithdrawalOrderReq, out *OperateWithdrawalOrderRes) error {
	return h.LogHandler.OperateWithdrawalOrder(ctx, in, out)
}

// Api Endpoints for Stats service

func NewStatsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Stats service

type StatsService interface {
	LoadGameStats(ctx context.Context, in *GameStatsReq, opts ...client.CallOption) (*GameStatsRes, error)
	GameStats(ctx context.Context, in *GameStatsReq, opts ...client.CallOption) (*GameStatsRes, error)
	LoadItemRank(ctx context.Context, in *LoadItemRankReq, opts ...client.CallOption) (*LoadItemRankRes, error)
	LoadGameNumByMatchCid(ctx context.Context, in *LoadGameNumByMatchCidReq, opts ...client.CallOption) (*LoadGameNumByMatchCidRes, error)
	LoadItemStock(ctx context.Context, in *LoadItemStockReq, opts ...client.CallOption) (*LoadItemStockRes, error)
	ImportAdRoi(ctx context.Context, in *ImportAdRoiReq, opts ...client.CallOption) (*ImportAdRoiRes, error)
	LoadAdRoi(ctx context.Context, in *LoadAdRoiReq, opts ...client.CallOption) (*LoadAdRoiRes, error)
	LoadRobotWinLose(ctx context.Context, in *LoadRobotWinLoseReq, opts ...client.CallOption) (*LoadRobotWinLoseRes, error)
}

type statsService struct {
	c    client.Client
	name string
}

func NewStatsService(name string, c client.Client) StatsService {
	return &statsService{
		c:    c,
		name: name,
	}
}

func (c *statsService) LoadGameStats(ctx context.Context, in *GameStatsReq, opts ...client.CallOption) (*GameStatsRes, error) {
	req := c.c.NewRequest(c.name, "Stats.LoadGameStats", in)
	out := new(GameStatsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) GameStats(ctx context.Context, in *GameStatsReq, opts ...client.CallOption) (*GameStatsRes, error) {
	req := c.c.NewRequest(c.name, "Stats.GameStats", in)
	out := new(GameStatsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) LoadItemRank(ctx context.Context, in *LoadItemRankReq, opts ...client.CallOption) (*LoadItemRankRes, error) {
	req := c.c.NewRequest(c.name, "Stats.LoadItemRank", in)
	out := new(LoadItemRankRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) LoadGameNumByMatchCid(ctx context.Context, in *LoadGameNumByMatchCidReq, opts ...client.CallOption) (*LoadGameNumByMatchCidRes, error) {
	req := c.c.NewRequest(c.name, "Stats.LoadGameNumByMatchCid", in)
	out := new(LoadGameNumByMatchCidRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) LoadItemStock(ctx context.Context, in *LoadItemStockReq, opts ...client.CallOption) (*LoadItemStockRes, error) {
	req := c.c.NewRequest(c.name, "Stats.LoadItemStock", in)
	out := new(LoadItemStockRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) ImportAdRoi(ctx context.Context, in *ImportAdRoiReq, opts ...client.CallOption) (*ImportAdRoiRes, error) {
	req := c.c.NewRequest(c.name, "Stats.ImportAdRoi", in)
	out := new(ImportAdRoiRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) LoadAdRoi(ctx context.Context, in *LoadAdRoiReq, opts ...client.CallOption) (*LoadAdRoiRes, error) {
	req := c.c.NewRequest(c.name, "Stats.LoadAdRoi", in)
	out := new(LoadAdRoiRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsService) LoadRobotWinLose(ctx context.Context, in *LoadRobotWinLoseReq, opts ...client.CallOption) (*LoadRobotWinLoseRes, error) {
	req := c.c.NewRequest(c.name, "Stats.LoadRobotWinLose", in)
	out := new(LoadRobotWinLoseRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stats service

type StatsHandler interface {
	LoadGameStats(context.Context, *GameStatsReq, *GameStatsRes) error
	GameStats(context.Context, *GameStatsReq, *GameStatsRes) error
	LoadItemRank(context.Context, *LoadItemRankReq, *LoadItemRankRes) error
	LoadGameNumByMatchCid(context.Context, *LoadGameNumByMatchCidReq, *LoadGameNumByMatchCidRes) error
	LoadItemStock(context.Context, *LoadItemStockReq, *LoadItemStockRes) error
	ImportAdRoi(context.Context, *ImportAdRoiReq, *ImportAdRoiRes) error
	LoadAdRoi(context.Context, *LoadAdRoiReq, *LoadAdRoiRes) error
	LoadRobotWinLose(context.Context, *LoadRobotWinLoseReq, *LoadRobotWinLoseRes) error
}

func RegisterStatsHandler(s server.Server, hdlr StatsHandler, opts ...server.HandlerOption) error {
	type stats interface {
		LoadGameStats(ctx context.Context, in *GameStatsReq, out *GameStatsRes) error
		GameStats(ctx context.Context, in *GameStatsReq, out *GameStatsRes) error
		LoadItemRank(ctx context.Context, in *LoadItemRankReq, out *LoadItemRankRes) error
		LoadGameNumByMatchCid(ctx context.Context, in *LoadGameNumByMatchCidReq, out *LoadGameNumByMatchCidRes) error
		LoadItemStock(ctx context.Context, in *LoadItemStockReq, out *LoadItemStockRes) error
		ImportAdRoi(ctx context.Context, in *ImportAdRoiReq, out *ImportAdRoiRes) error
		LoadAdRoi(ctx context.Context, in *LoadAdRoiReq, out *LoadAdRoiRes) error
		LoadRobotWinLose(ctx context.Context, in *LoadRobotWinLoseReq, out *LoadRobotWinLoseRes) error
	}
	type Stats struct {
		stats
	}
	h := &statsHandler{hdlr}
	return s.Handle(s.NewHandler(&Stats{h}, opts...))
}

type statsHandler struct {
	StatsHandler
}

func (h *statsHandler) LoadGameStats(ctx context.Context, in *GameStatsReq, out *GameStatsRes) error {
	return h.StatsHandler.LoadGameStats(ctx, in, out)
}

func (h *statsHandler) GameStats(ctx context.Context, in *GameStatsReq, out *GameStatsRes) error {
	return h.StatsHandler.GameStats(ctx, in, out)
}

func (h *statsHandler) LoadItemRank(ctx context.Context, in *LoadItemRankReq, out *LoadItemRankRes) error {
	return h.StatsHandler.LoadItemRank(ctx, in, out)
}

func (h *statsHandler) LoadGameNumByMatchCid(ctx context.Context, in *LoadGameNumByMatchCidReq, out *LoadGameNumByMatchCidRes) error {
	return h.StatsHandler.LoadGameNumByMatchCid(ctx, in, out)
}

func (h *statsHandler) LoadItemStock(ctx context.Context, in *LoadItemStockReq, out *LoadItemStockRes) error {
	return h.StatsHandler.LoadItemStock(ctx, in, out)
}

func (h *statsHandler) ImportAdRoi(ctx context.Context, in *ImportAdRoiReq, out *ImportAdRoiRes) error {
	return h.StatsHandler.ImportAdRoi(ctx, in, out)
}

func (h *statsHandler) LoadAdRoi(ctx context.Context, in *LoadAdRoiReq, out *LoadAdRoiRes) error {
	return h.StatsHandler.LoadAdRoi(ctx, in, out)
}

func (h *statsHandler) LoadRobotWinLose(ctx context.Context, in *LoadRobotWinLoseReq, out *LoadRobotWinLoseRes) error {
	return h.StatsHandler.LoadRobotWinLose(ctx, in, out)
}

// Api Endpoints for OptGoods service

func NewOptGoodsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OptGoods service

type OptGoodsService interface {
	LoadGoods(ctx context.Context, in *LoadGoodsReq, opts ...client.CallOption) (*LoadGoodsRes, error)
	EditGoods(ctx context.Context, in *EditGoodsReq, opts ...client.CallOption) (*EditGoodsRes, error)
	CreateGoods(ctx context.Context, in *CreateGoodsReq, opts ...client.CallOption) (*CreateGoodsRes, error)
}

type optGoodsService struct {
	c    client.Client
	name string
}

func NewOptGoodsService(name string, c client.Client) OptGoodsService {
	return &optGoodsService{
		c:    c,
		name: name,
	}
}

func (c *optGoodsService) LoadGoods(ctx context.Context, in *LoadGoodsReq, opts ...client.CallOption) (*LoadGoodsRes, error) {
	req := c.c.NewRequest(c.name, "OptGoods.LoadGoods", in)
	out := new(LoadGoodsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optGoodsService) EditGoods(ctx context.Context, in *EditGoodsReq, opts ...client.CallOption) (*EditGoodsRes, error) {
	req := c.c.NewRequest(c.name, "OptGoods.EditGoods", in)
	out := new(EditGoodsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optGoodsService) CreateGoods(ctx context.Context, in *CreateGoodsReq, opts ...client.CallOption) (*CreateGoodsRes, error) {
	req := c.c.NewRequest(c.name, "OptGoods.CreateGoods", in)
	out := new(CreateGoodsRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OptGoods service

type OptGoodsHandler interface {
	LoadGoods(context.Context, *LoadGoodsReq, *LoadGoodsRes) error
	EditGoods(context.Context, *EditGoodsReq, *EditGoodsRes) error
	CreateGoods(context.Context, *CreateGoodsReq, *CreateGoodsRes) error
}

func RegisterOptGoodsHandler(s server.Server, hdlr OptGoodsHandler, opts ...server.HandlerOption) error {
	type optGoods interface {
		LoadGoods(ctx context.Context, in *LoadGoodsReq, out *LoadGoodsRes) error
		EditGoods(ctx context.Context, in *EditGoodsReq, out *EditGoodsRes) error
		CreateGoods(ctx context.Context, in *CreateGoodsReq, out *CreateGoodsRes) error
	}
	type OptGoods struct {
		optGoods
	}
	h := &optGoodsHandler{hdlr}
	return s.Handle(s.NewHandler(&OptGoods{h}, opts...))
}

type optGoodsHandler struct {
	OptGoodsHandler
}

func (h *optGoodsHandler) LoadGoods(ctx context.Context, in *LoadGoodsReq, out *LoadGoodsRes) error {
	return h.OptGoodsHandler.LoadGoods(ctx, in, out)
}

func (h *optGoodsHandler) EditGoods(ctx context.Context, in *EditGoodsReq, out *EditGoodsRes) error {
	return h.OptGoodsHandler.EditGoods(ctx, in, out)
}

func (h *optGoodsHandler) CreateGoods(ctx context.Context, in *CreateGoodsReq, out *CreateGoodsRes) error {
	return h.OptGoodsHandler.CreateGoods(ctx, in, out)
}

// Api Endpoints for Manage service

func NewManageEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Manage service

type ManageService interface {
	CreateManageRole(ctx context.Context, in *CreateManageRoleReq, opts ...client.CallOption) (*CreateManageRoleRes, error)
	DeleteManageRole(ctx context.Context, in *DeleteManageRoleReq, opts ...client.CallOption) (*DeleteManageRoleRes, error)
	EditManageRole(ctx context.Context, in *EditManageRoleReq, opts ...client.CallOption) (*EditManageRoleRes, error)
	LoadManageRole(ctx context.Context, in *LoadManageRoleReq, opts ...client.CallOption) (*LoadManageRoleRes, error)
	CreateManageUser(ctx context.Context, in *CreateManageUserReq, opts ...client.CallOption) (*CreateManageUserRes, error)
	DeleteManageUser(ctx context.Context, in *DeleteManageUserReq, opts ...client.CallOption) (*DeleteManageUserRes, error)
	EditManageUser(ctx context.Context, in *EditManageUserReq, opts ...client.CallOption) (*EditManageUserRes, error)
	LoadManageUser(ctx context.Context, in *LoadManageUserReq, opts ...client.CallOption) (*LoadManageUserRes, error)
	LoginManageUser(ctx context.Context, in *LoginManageUserReq, opts ...client.CallOption) (*LoginManageUserRes, error)
}

type manageService struct {
	c    client.Client
	name string
}

func NewManageService(name string, c client.Client) ManageService {
	return &manageService{
		c:    c,
		name: name,
	}
}

func (c *manageService) CreateManageRole(ctx context.Context, in *CreateManageRoleReq, opts ...client.CallOption) (*CreateManageRoleRes, error) {
	req := c.c.NewRequest(c.name, "Manage.CreateManageRole", in)
	out := new(CreateManageRoleRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) DeleteManageRole(ctx context.Context, in *DeleteManageRoleReq, opts ...client.CallOption) (*DeleteManageRoleRes, error) {
	req := c.c.NewRequest(c.name, "Manage.DeleteManageRole", in)
	out := new(DeleteManageRoleRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) EditManageRole(ctx context.Context, in *EditManageRoleReq, opts ...client.CallOption) (*EditManageRoleRes, error) {
	req := c.c.NewRequest(c.name, "Manage.EditManageRole", in)
	out := new(EditManageRoleRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) LoadManageRole(ctx context.Context, in *LoadManageRoleReq, opts ...client.CallOption) (*LoadManageRoleRes, error) {
	req := c.c.NewRequest(c.name, "Manage.LoadManageRole", in)
	out := new(LoadManageRoleRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) CreateManageUser(ctx context.Context, in *CreateManageUserReq, opts ...client.CallOption) (*CreateManageUserRes, error) {
	req := c.c.NewRequest(c.name, "Manage.CreateManageUser", in)
	out := new(CreateManageUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) DeleteManageUser(ctx context.Context, in *DeleteManageUserReq, opts ...client.CallOption) (*DeleteManageUserRes, error) {
	req := c.c.NewRequest(c.name, "Manage.DeleteManageUser", in)
	out := new(DeleteManageUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) EditManageUser(ctx context.Context, in *EditManageUserReq, opts ...client.CallOption) (*EditManageUserRes, error) {
	req := c.c.NewRequest(c.name, "Manage.EditManageUser", in)
	out := new(EditManageUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) LoadManageUser(ctx context.Context, in *LoadManageUserReq, opts ...client.CallOption) (*LoadManageUserRes, error) {
	req := c.c.NewRequest(c.name, "Manage.LoadManageUser", in)
	out := new(LoadManageUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageService) LoginManageUser(ctx context.Context, in *LoginManageUserReq, opts ...client.CallOption) (*LoginManageUserRes, error) {
	req := c.c.NewRequest(c.name, "Manage.LoginManageUser", in)
	out := new(LoginManageUserRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manage service

type ManageHandler interface {
	CreateManageRole(context.Context, *CreateManageRoleReq, *CreateManageRoleRes) error
	DeleteManageRole(context.Context, *DeleteManageRoleReq, *DeleteManageRoleRes) error
	EditManageRole(context.Context, *EditManageRoleReq, *EditManageRoleRes) error
	LoadManageRole(context.Context, *LoadManageRoleReq, *LoadManageRoleRes) error
	CreateManageUser(context.Context, *CreateManageUserReq, *CreateManageUserRes) error
	DeleteManageUser(context.Context, *DeleteManageUserReq, *DeleteManageUserRes) error
	EditManageUser(context.Context, *EditManageUserReq, *EditManageUserRes) error
	LoadManageUser(context.Context, *LoadManageUserReq, *LoadManageUserRes) error
	LoginManageUser(context.Context, *LoginManageUserReq, *LoginManageUserRes) error
}

func RegisterManageHandler(s server.Server, hdlr ManageHandler, opts ...server.HandlerOption) error {
	type manage interface {
		CreateManageRole(ctx context.Context, in *CreateManageRoleReq, out *CreateManageRoleRes) error
		DeleteManageRole(ctx context.Context, in *DeleteManageRoleReq, out *DeleteManageRoleRes) error
		EditManageRole(ctx context.Context, in *EditManageRoleReq, out *EditManageRoleRes) error
		LoadManageRole(ctx context.Context, in *LoadManageRoleReq, out *LoadManageRoleRes) error
		CreateManageUser(ctx context.Context, in *CreateManageUserReq, out *CreateManageUserRes) error
		DeleteManageUser(ctx context.Context, in *DeleteManageUserReq, out *DeleteManageUserRes) error
		EditManageUser(ctx context.Context, in *EditManageUserReq, out *EditManageUserRes) error
		LoadManageUser(ctx context.Context, in *LoadManageUserReq, out *LoadManageUserRes) error
		LoginManageUser(ctx context.Context, in *LoginManageUserReq, out *LoginManageUserRes) error
	}
	type Manage struct {
		manage
	}
	h := &manageHandler{hdlr}
	return s.Handle(s.NewHandler(&Manage{h}, opts...))
}

type manageHandler struct {
	ManageHandler
}

func (h *manageHandler) CreateManageRole(ctx context.Context, in *CreateManageRoleReq, out *CreateManageRoleRes) error {
	return h.ManageHandler.CreateManageRole(ctx, in, out)
}

func (h *manageHandler) DeleteManageRole(ctx context.Context, in *DeleteManageRoleReq, out *DeleteManageRoleRes) error {
	return h.ManageHandler.DeleteManageRole(ctx, in, out)
}

func (h *manageHandler) EditManageRole(ctx context.Context, in *EditManageRoleReq, out *EditManageRoleRes) error {
	return h.ManageHandler.EditManageRole(ctx, in, out)
}

func (h *manageHandler) LoadManageRole(ctx context.Context, in *LoadManageRoleReq, out *LoadManageRoleRes) error {
	return h.ManageHandler.LoadManageRole(ctx, in, out)
}

func (h *manageHandler) CreateManageUser(ctx context.Context, in *CreateManageUserReq, out *CreateManageUserRes) error {
	return h.ManageHandler.CreateManageUser(ctx, in, out)
}

func (h *manageHandler) DeleteManageUser(ctx context.Context, in *DeleteManageUserReq, out *DeleteManageUserRes) error {
	return h.ManageHandler.DeleteManageUser(ctx, in, out)
}

func (h *manageHandler) EditManageUser(ctx context.Context, in *EditManageUserReq, out *EditManageUserRes) error {
	return h.ManageHandler.EditManageUser(ctx, in, out)
}

func (h *manageHandler) LoadManageUser(ctx context.Context, in *LoadManageUserReq, out *LoadManageUserRes) error {
	return h.ManageHandler.LoadManageUser(ctx, in, out)
}

func (h *manageHandler) LoginManageUser(ctx context.Context, in *LoginManageUserReq, out *LoginManageUserRes) error {
	return h.ManageHandler.LoginManageUser(ctx, in, out)
}

// Api Endpoints for Feedback service

func NewFeedbackEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Feedback service

type FeedbackService interface {
	SendWeChatMsg(ctx context.Context, in *SendWeChatMsgReq, opts ...client.CallOption) (*SendWeChatMsgRes, error)
	GetFeedback(ctx context.Context, in *GetFeedbackReq, opts ...client.CallOption) (*GetFeedbackRes, error)
	GetFeedbackMedia(ctx context.Context, in *GetFeedbackMediaReq, opts ...client.CallOption) (*GetFeedbackMediaRes, error)
	SendScribeMsg(ctx context.Context, in *SendScribeMsgReq, opts ...client.CallOption) (*SendScribeMsgRes, error)
}

type feedbackService struct {
	c    client.Client
	name string
}

func NewFeedbackService(name string, c client.Client) FeedbackService {
	return &feedbackService{
		c:    c,
		name: name,
	}
}

func (c *feedbackService) SendWeChatMsg(ctx context.Context, in *SendWeChatMsgReq, opts ...client.CallOption) (*SendWeChatMsgRes, error) {
	req := c.c.NewRequest(c.name, "Feedback.SendWeChatMsg", in)
	out := new(SendWeChatMsgRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackService) GetFeedback(ctx context.Context, in *GetFeedbackReq, opts ...client.CallOption) (*GetFeedbackRes, error) {
	req := c.c.NewRequest(c.name, "Feedback.GetFeedback", in)
	out := new(GetFeedbackRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackService) GetFeedbackMedia(ctx context.Context, in *GetFeedbackMediaReq, opts ...client.CallOption) (*GetFeedbackMediaRes, error) {
	req := c.c.NewRequest(c.name, "Feedback.GetFeedbackMedia", in)
	out := new(GetFeedbackMediaRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackService) SendScribeMsg(ctx context.Context, in *SendScribeMsgReq, opts ...client.CallOption) (*SendScribeMsgRes, error) {
	req := c.c.NewRequest(c.name, "Feedback.SendScribeMsg", in)
	out := new(SendScribeMsgRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Feedback service

type FeedbackHandler interface {
	SendWeChatMsg(context.Context, *SendWeChatMsgReq, *SendWeChatMsgRes) error
	GetFeedback(context.Context, *GetFeedbackReq, *GetFeedbackRes) error
	GetFeedbackMedia(context.Context, *GetFeedbackMediaReq, *GetFeedbackMediaRes) error
	SendScribeMsg(context.Context, *SendScribeMsgReq, *SendScribeMsgRes) error
}

func RegisterFeedbackHandler(s server.Server, hdlr FeedbackHandler, opts ...server.HandlerOption) error {
	type feedback interface {
		SendWeChatMsg(ctx context.Context, in *SendWeChatMsgReq, out *SendWeChatMsgRes) error
		GetFeedback(ctx context.Context, in *GetFeedbackReq, out *GetFeedbackRes) error
		GetFeedbackMedia(ctx context.Context, in *GetFeedbackMediaReq, out *GetFeedbackMediaRes) error
		SendScribeMsg(ctx context.Context, in *SendScribeMsgReq, out *SendScribeMsgRes) error
	}
	type Feedback struct {
		feedback
	}
	h := &feedbackHandler{hdlr}
	return s.Handle(s.NewHandler(&Feedback{h}, opts...))
}

type feedbackHandler struct {
	FeedbackHandler
}

func (h *feedbackHandler) SendWeChatMsg(ctx context.Context, in *SendWeChatMsgReq, out *SendWeChatMsgRes) error {
	return h.FeedbackHandler.SendWeChatMsg(ctx, in, out)
}

func (h *feedbackHandler) GetFeedback(ctx context.Context, in *GetFeedbackReq, out *GetFeedbackRes) error {
	return h.FeedbackHandler.GetFeedback(ctx, in, out)
}

func (h *feedbackHandler) GetFeedbackMedia(ctx context.Context, in *GetFeedbackMediaReq, out *GetFeedbackMediaRes) error {
	return h.FeedbackHandler.GetFeedbackMedia(ctx, in, out)
}

func (h *feedbackHandler) SendScribeMsg(ctx context.Context, in *SendScribeMsgReq, out *SendScribeMsgRes) error {
	return h.FeedbackHandler.SendScribeMsg(ctx, in, out)
}
