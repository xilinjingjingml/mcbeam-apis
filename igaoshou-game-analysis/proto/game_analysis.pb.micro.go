// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/game_analysis.proto

package analysis

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GameData service

func NewGameDataEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GameData service

type GameDataService interface {
	GetGameReport(ctx context.Context, in *GetGameReportReq, opts ...client.CallOption) (*GetGameReportRsp, error)
	GetPlayerLabels(ctx context.Context, in *GetPlayerLabelsReq, opts ...client.CallOption) (*GetPlayerLabelsRsp, error)
}

type gameDataService struct {
	c    client.Client
	name string
}

func NewGameDataService(name string, c client.Client) GameDataService {
	return &gameDataService{
		c:    c,
		name: name,
	}
}

func (c *gameDataService) GetGameReport(ctx context.Context, in *GetGameReportReq, opts ...client.CallOption) (*GetGameReportRsp, error) {
	req := c.c.NewRequest(c.name, "GameData.GetGameReport", in)
	out := new(GetGameReportRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameDataService) GetPlayerLabels(ctx context.Context, in *GetPlayerLabelsReq, opts ...client.CallOption) (*GetPlayerLabelsRsp, error) {
	req := c.c.NewRequest(c.name, "GameData.GetPlayerLabels", in)
	out := new(GetPlayerLabelsRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GameData service

type GameDataHandler interface {
	GetGameReport(context.Context, *GetGameReportReq, *GetGameReportRsp) error
	GetPlayerLabels(context.Context, *GetPlayerLabelsReq, *GetPlayerLabelsRsp) error
}

func RegisterGameDataHandler(s server.Server, hdlr GameDataHandler, opts ...server.HandlerOption) error {
	type gameData interface {
		GetGameReport(ctx context.Context, in *GetGameReportReq, out *GetGameReportRsp) error
		GetPlayerLabels(ctx context.Context, in *GetPlayerLabelsReq, out *GetPlayerLabelsRsp) error
	}
	type GameData struct {
		gameData
	}
	h := &gameDataHandler{hdlr}
	return s.Handle(s.NewHandler(&GameData{h}, opts...))
}

type gameDataHandler struct {
	GameDataHandler
}

func (h *gameDataHandler) GetGameReport(ctx context.Context, in *GetGameReportReq, out *GetGameReportRsp) error {
	return h.GameDataHandler.GetGameReport(ctx, in, out)
}

func (h *gameDataHandler) GetPlayerLabels(ctx context.Context, in *GetPlayerLabelsReq, out *GetPlayerLabelsRsp) error {
	return h.GameDataHandler.GetPlayerLabels(ctx, in, out)
}
