// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ad.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Ad service

func NewAdEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Ad service

type AdService interface {
	LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, opts ...client.CallOption) (*LoadAdConfigRsp, error)
	//创建广告订单
	CreateAdOrder(ctx context.Context, in *CreateAdOrderReq, opts ...client.CallOption) (*CreateAdOrderRsp, error)
	//完成广告订单
	CompleteAdOrder(ctx context.Context, in *CompleteAdOrderReq, opts ...client.CallOption) (*CompleteAdOrderRsp, error)
}

type adService struct {
	c    client.Client
	name string
}

func NewAdService(name string, c client.Client) AdService {
	return &adService{
		c:    c,
		name: name,
	}
}

func (c *adService) LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, opts ...client.CallOption) (*LoadAdConfigRsp, error) {
	req := c.c.NewRequest(c.name, "Ad.LoadAdConfig", in)
	out := new(LoadAdConfigRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adService) CreateAdOrder(ctx context.Context, in *CreateAdOrderReq, opts ...client.CallOption) (*CreateAdOrderRsp, error) {
	req := c.c.NewRequest(c.name, "Ad.CreateAdOrder", in)
	out := new(CreateAdOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adService) CompleteAdOrder(ctx context.Context, in *CompleteAdOrderReq, opts ...client.CallOption) (*CompleteAdOrderRsp, error) {
	req := c.c.NewRequest(c.name, "Ad.CompleteAdOrder", in)
	out := new(CompleteAdOrderRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ad service

type AdHandler interface {
	LoadAdConfig(context.Context, *LoadAdConfigReq, *LoadAdConfigRsp) error
	//创建广告订单
	CreateAdOrder(context.Context, *CreateAdOrderReq, *CreateAdOrderRsp) error
	//完成广告订单
	CompleteAdOrder(context.Context, *CompleteAdOrderReq, *CompleteAdOrderRsp) error
}

func RegisterAdHandler(s server.Server, hdlr AdHandler, opts ...server.HandlerOption) error {
	type ad interface {
		LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, out *LoadAdConfigRsp) error
		CreateAdOrder(ctx context.Context, in *CreateAdOrderReq, out *CreateAdOrderRsp) error
		CompleteAdOrder(ctx context.Context, in *CompleteAdOrderReq, out *CompleteAdOrderRsp) error
	}
	type Ad struct {
		ad
	}
	h := &adHandler{hdlr}
	return s.Handle(s.NewHandler(&Ad{h}, opts...))
}

type adHandler struct {
	AdHandler
}

func (h *adHandler) LoadAdConfig(ctx context.Context, in *LoadAdConfigReq, out *LoadAdConfigRsp) error {
	return h.AdHandler.LoadAdConfig(ctx, in, out)
}

func (h *adHandler) CreateAdOrder(ctx context.Context, in *CreateAdOrderReq, out *CreateAdOrderRsp) error {
	return h.AdHandler.CreateAdOrder(ctx, in, out)
}

func (h *adHandler) CompleteAdOrder(ctx context.Context, in *CompleteAdOrderReq, out *CompleteAdOrderRsp) error {
	return h.AdHandler.CompleteAdOrder(ctx, in, out)
}
