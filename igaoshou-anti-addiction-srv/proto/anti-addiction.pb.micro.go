// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/anti-addiction.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AntiAddiction service

func NewAntiAddictionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AntiAddiction service

type AntiAddictionService interface {
	Check(ctx context.Context, in *CheckReq, opts ...client.CallOption) (*CheckRes, error)
	Query(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*QueryRes, error)
}

type antiAddictionService struct {
	c    client.Client
	name string
}

func NewAntiAddictionService(name string, c client.Client) AntiAddictionService {
	return &antiAddictionService{
		c:    c,
		name: name,
	}
}

func (c *antiAddictionService) Check(ctx context.Context, in *CheckReq, opts ...client.CallOption) (*CheckRes, error) {
	req := c.c.NewRequest(c.name, "AntiAddiction.Check", in)
	out := new(CheckRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiAddictionService) Query(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*QueryRes, error) {
	req := c.c.NewRequest(c.name, "AntiAddiction.Query", in)
	out := new(QueryRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AntiAddiction service

type AntiAddictionHandler interface {
	Check(context.Context, *CheckReq, *CheckRes) error
	Query(context.Context, *QueryReq, *QueryRes) error
}

func RegisterAntiAddictionHandler(s server.Server, hdlr AntiAddictionHandler, opts ...server.HandlerOption) error {
	type antiAddiction interface {
		Check(ctx context.Context, in *CheckReq, out *CheckRes) error
		Query(ctx context.Context, in *QueryReq, out *QueryRes) error
	}
	type AntiAddiction struct {
		antiAddiction
	}
	h := &antiAddictionHandler{hdlr}
	return s.Handle(s.NewHandler(&AntiAddiction{h}, opts...))
}

type antiAddictionHandler struct {
	AntiAddictionHandler
}

func (h *antiAddictionHandler) Check(ctx context.Context, in *CheckReq, out *CheckRes) error {
	return h.AntiAddictionHandler.Check(ctx, in, out)
}

func (h *antiAddictionHandler) Query(ctx context.Context, in *QueryReq, out *QueryRes) error {
	return h.AntiAddictionHandler.Query(ctx, in, out)
}
